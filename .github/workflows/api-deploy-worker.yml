name: API Deployment

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      env:
        required: true
        type: string
      branch:
        required: true
        type: string
      endpoint_url:
        required: true
        type: string
    secrets:
      HIVE_TOKEN:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      JFP_AWS_ACCESS_KEY_ID:
        required: true
      JFP_AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_NETWORK_CONFIG:
        required: true

jobs:
  build-and-deploy:
    environment: Production
    env:
      HIVE_TOKEN: ${{ secrets.HIVE_TOKEN }}
      ENV_SUFFIX: ${{ inputs.branch }}
      ECS_CLUSTER: jfp-ecs-cluster-${{ inputs.env }}
      ECS_SERVICE: ${{ inputs.name}}-${{ inputs.env }}-service
      ECR_REPOSITORY: jfp-${{ inputs.name }}-${{ inputs.env }}
      IMAGE_TAG: ${{ github.sha }}
    runs-on: blacksmith-2vcpu-ubuntu-2204
    strategy:
      matrix:
        node-version: [22]
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v4
      - uses: useblacksmith/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get Node Version
        id: node-version
        run: echo "version=$(node -v)" >> $GITHUB_OUTPUT

      - name: Mount NPM Cache
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-${{ steps.node-version.outputs.version }}-npm-cache
          path: ~/.npm
      - name: Mount node_modules
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-${{ steps.node-version.outputs.version }}-node-modules
          path: ./node_modules
      - name: NPM Install
        run: npm install --silent

      - name: nx Install
        run: npm install -g nx --silent

      - name: Get affected apps
        run: |
          echo "apps=$(npx ts-node tools/scripts/affected-apps.ts --projects apis/api-*)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        id: affected-apps

      - name: Has Prisma
        id: has_prisma
        uses: andstor/file-existence-action@v3
        with:
          files: 'apis/${{inputs.name}}/db/schema.prisma'

      - name: Prisma Migrate
        if: steps.has_prisma.outputs.files_exists == 'true' && contains(steps.affected-apps.outputs.apps, inputs.name)
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: prisma-generate
          projects: ${{ inputs.name }}
          parallel: 1
        env:
          DISABLE_ERD: true
      - name: Build ${{ inputs.name }}
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: build
          projects: ${{ inputs.name }}
          args: --c=production

      # ECS Deployment
      - name: Configure ECS AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.JFP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.JFP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr-ecs
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push the image to Amazon ECR
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        id: build-image-ecs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-ecs.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR 
          docker build --build-arg SERVICE_VERSION=$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . -f apis/${{ inputs.name }}/Dockerfile
          echo "Pushing image to ECR..."
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Restart task definition
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        run: |
          aws ecs update-service --force-new-deployment --service $ECS_SERVICE --cluster $ECS_CLUSTER

      - name: Update Hive managed subgraph
        run: |
          npx hive schema:publish apis/${{ inputs.name }}/schema.graphql --service ${{ inputs.name }} --url ${{ inputs.endpoint_url }} --github
