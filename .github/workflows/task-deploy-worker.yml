name: Task Deployment

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      env:
        required: true
        type: string
      branch:
        required: true
        type: string
    secrets:
      AWS_DEFAULT_REGION:
        required: true
      JFP_AWS_ACCESS_KEY_ID:
        required: true
      JFP_AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-deploy:
    environment: Production
    env:
      ENV_SUFFIX: ${{ inputs.branch }}
      ECS_CLUSTER: jfp-ecs-cluster-${{ inputs.env }}
      ECS_SERVICE: ${{ inputs.name}}-${{ inputs.env }}-service
      ECR_REPOSITORY: jfp-${{ inputs.name }}-${{ inputs.env }}
      IMAGE_TAG: ${{ github.sha }}
      PNPM_STORE_PATH: $HOME/.pnpm-store
    runs-on: blacksmith-2vcpu-ubuntu-2204
    strategy:
      matrix:
        node-version: [22]
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: $HOME/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Configure pnpm store-dir
        run: pnpm config set store-dir $HOME/.pnpm-store
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --silent

      - name: nx Install
        run: pnpm add -g nx --silent

      - name: Get affected apps
        run: |
          echo "apps=$(pnpm exec ts-node tools/scripts/affected-apps.ts --projects apis/*)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        id: affected-apps

      - name: Prisma Generate
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: prisma-generate
          all: true
        env:
          DISABLE_ERD: true
      - name: Build ${{ inputs.name }}
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: build
          projects: ${{ inputs.name }}
          args: --c=production

      # ECS Deployment
      - name: Configure ECS AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.JFP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.JFP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        id: login-ecr-ecs
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to Amazon ECR
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        id: build-image-ecs
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: apis/${{ inputs.name }}/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr-ecs.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ steps.login-ecr-ecs.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          build-args: |
            SERVICE_VERSION=${{ env.IMAGE_TAG }}

      - name: Set image output
        if: contains(steps.affected-apps.outputs.apps, inputs.name)
        run: |
          echo "image=${{ steps.login-ecr-ecs.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
