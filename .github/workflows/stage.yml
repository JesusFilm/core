name: Stage Merge
on:
  push:
    branches:
      - add-ns3-serverless
#on:
#  push:
#    branches:
#      - stage

jobs:
  build-and-deploy:
    environment: Stage
    env:
      ENV_SUFFIX: stage
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      # DATABASE_URL: ${{ secrets.DATABASE_URL }}
      APOLLO_KEY: ${{ secrets.APOLLO_KEY }}

    runs-on: ubuntu-latest

    steps:
      - name: Build Lambda security group name
        run: |
          echo "LAMBDA_GROUP_NAME=ark-journey-lambda-$ENV_SUFFIX" >> $GITHUB_ENV

      - name: Checkout current branch
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"

      - name: NPM Install
        run: npm install

      - name: Install Serverless
        run: npm install -g serverless

      - name: Install Rover
        run: npm install -g @apollo/rover

      - name: Build Apollo API Gateway
        uses: mansagroup/nrwl-nx-action@v2
        with:
          targets: build
          projects: api-gateway

      - name: Prep Apollo API Gateway assets
        run: |
          aws s3 cp dist/apps/api-gateway/* s3://core-apollo-gateway/
          aws s3 cp package.json s3://core-apollo-gateway/
          aws s3 cp apps/api-gateway/schema.graphql s3://core-apollo-gateway/
          aws s3 cp apps/api-gateway/.env s3://core-apollo-gateway/

      - name: Deploy/Update Infrastructure
        uses: mansagroup/nrwl-nx-action@v2
        with:
          targets: deploy
          projects: infrastructure
          args: --config resources/cf-stacks/serverless.yml --env $ENV_SUFFIX --lambda-group-name $LAMBDA_GROUP_NAME

      - name: Set ENV Vars Based on Infrastructure Output
        run: |
          echo "LAMBDA_SECURITY_GROUP_ID=$( jq -r '.LambdaSecurityGroupId' infrastructure-output.json )" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://$( jq -r '.ConnectionString' infrastructure-output.json )" >> $GITHUB_ENV

      - name: Run NX generate and deploy lambdas
        uses: mansagroup/nrwl-nx-action@v2
        with:
          targets: prismagenerate,deploy
          projects: api-journeys

      - name: Get api-journeys endpoint
        run: |
          echo "JOURNEYS_API_ENDPOINT=$( jq -r '.ServiceEndpoint' journeys-output.json )/journeys" >> $GITHUB_ENV

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Allow Github Actions Access to Postgres
        run: aws ec2 authorize-security-group-ingress --group-id $LAMBDA_SECURITY_GROUP_ID --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Prisma Migrations api-journeys
        run: npx prisma migrate deploy --schema apps/api-journeys/prisma/schema.prisma

      - name: Seed DB
        run: npx prisma db seed --preview-feature --schema apps/api-journeys/prisma/schema.prisma

      - name: Publish Apollo Graph
        run: rover subgraph publish ark-weave-journeys@preprod --name journeys --schema apps/api-journeys/schema.graphql --routing-url $JOURNEYS_API_ENDPOINT

      # Cleanup / remove Github access to postgres.
      - name: Remove Github Actions Access to Postgres
        if: always()
        run: aws ec2 revoke-security-group-ingress --group-id $LAMBDA_SECURITY_GROUP_ID --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32
