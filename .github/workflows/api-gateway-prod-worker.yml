name: API Deployment

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      KUBE_CONFIG_DATA:
        required: true
      JFP_AWS_ACCESS_KEY_ID:
        required: true
      JFP_AWS_SECRET_ACCESS_KEY:
        required: true
      CA_CRT:
        required: true
      USER_CRT:
        required: true
      USER_KEY:
        required: true

jobs:
  build-and-deploy:
    environment: Production
    env:
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      IMAGE_TAG: ${{ github.sha }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-

      - name: NPM Install
        run: npm install --silent

      - name: nx Install
        run: npm install -g nx --silent

      - name: rover Install
        run: npm install -g @apollo/rover@0.10.0

      - name: Build api-gateway
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: build
          projects: api-gateway
          args: --configuration="production"

      - name: Build api-journeys-main schema
        run: rover subgraph introspect https://api-journeys.core.jesusfilm.org/graphql > dist/apps/api-gateway/api-journeys-schema.graphql

      - name: Build api-users-main schema
        run: rover subgraph introspect https://api-users.core.jesusfilm.org/graphql > dist/apps/api-gateway/api-users-schema.graphql

      - name: Build api-languages-main schema
        run: rover subgraph introspect https://api-languages.core.jesusfilm.org/graphql > dist/apps/api-gateway/api-languages-schema.graphql

      - name: Build api-videos-main schema
        run: rover subgraph introspect https://api-videos.core.jesusfilm.org/graphql > dist/apps/api-gateway/api-videos-schema.graphql

      - name: Build api-gateway schema
        run: rover supergraph compose --config apps/api-gateway/supergraph-main.yml > dist/apps/api-gateway/schema.graphql

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/jfp-api-gateway-prod:$IMAGE_TAG -t $ECR_REGISTRY/jfp-api-gateway-prod:latest .  -f apps/api-gateway/Dockerfile
          echo "Pushing image to ECR..."
          docker push -a $ECR_REGISTRY/jfp-api-gateway-prod
          echo "image=$ECR_REGISTRY/jfp-api-gateway-prod:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Kubernetes cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBECTL_VERSION: 'v1.21.12'
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/jfp-api-gateway-prod:${{ env.IMAGE_TAG }}
        with:
          args: set image deployment/api-gateway-main jfp-api-gateway-prod=${{ env.RELEASE_IMAGE }}

      - name: Verify Kubernetes deployment
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBECTL_VERSION: 'v1.21.12'
        with:
          args: rollout status deploy api-gateway-main

      #ECS Deployment
      - name: Install Open VPN
        run: sudo apt-get install openvpn

      - name: Setup VPN CONFIG
        run: |
          echo "${{ secrets.CA_CRT }}" > ca.crt
          echo "${{ secrets.USER_CRT }}" > user.crt
          echo "${{ secrets.USER_KEY }}" > user.key

      - name: Connect VPN
        run: sudo openvpn --config ".github/vpn/main.ovpn" --daemon

      - name: Wait for a VPN connection
        timeout-minutes: 1
        run: until dig api-journeys.service.internal A +time=1; do sleep 2; done

      # TODO: Used once we have moved to ECS
      # - name: Build api-journeys-main schema
      #   run: rover subgraph introspect http://api-journeys.service.internal:4001/graphql > dist/apps/api-gateway/api-journeys-schema.graphql

      # - name: Build api-users-main schema
      #   run: rover subgraph introspect http://api-users.service.internal:4002/graphql > dist/apps/api-gateway/api-users-schema.graphql

      # - name: Build api-languages-main schema
      #   run: rover subgraph introspect http://api-languages.service.internal:4003/graphql > dist/apps/api-gateway/api-languages-schema.graphql

      # - name: Build api-videos-main schema
      #   run: rover subgraph introspect https://api-videos.service.internal:4004/graphql > dist/apps/api-gateway/api-videos-schema.graphql

      - name: Build api-gateway schema
        run: rover supergraph compose --config apps/api-gateway/supergraph-main-ecs.yml > dist/apps/api-gateway/schema.graphql

      - name: Configure ECS AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.JFP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.JFP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr-ecs
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image-ecs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-ecs.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/jfp-api-gateway-prod:$IMAGE_TAG -t $ECR_REGISTRY/jfp-api-gateway-prod:latest . -f apps/api-gateway/Dockerfile
          echo "Pushing image to ECR..."
          docker push -a $ECR_REGISTRY/jfp-api-gateway-prod
          echo "image=$ECR_REGISTRY/jfp-api-gateway-prod:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition jfp-api-gateway-prod --query taskDefinition > task-definition.json
      - name: Redeploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: api-gateway-prod-service
          cluster: jfp-ecs-cluster-prod
          wait-for-service-stability: true
