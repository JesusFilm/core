name: API Deployment

on:
  workflow_call:
    secrets:
      AWS_DEFAULT_REGION:
        required: true
      JFP_AWS_ACCESS_KEY_ID:
        required: true
      JFP_AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-deploy:
    environment: Production
    env:
      IMAGE_TAG: ${{ github.sha }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-

      - name: NPM Install
        run: npm install --silent

      - name: nx Install
        run: npm install -g nx --silent

      - name: Get affected apps
        run: echo "apps=$(nx affected:apps --plain --base=HEAD~1 --head=HEAD)" >> $GITHUB_OUTPUT
        id: affected-apps

      - name: Build api-gateway
        if: contains(steps.affected-apps.outputs.apps, 'api-gateway')
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: build
          projects: api-gateway
          args: --configuration="production"

      #ECS Deployment
      - name: Configure ECS AWS credentials
        if: contains(steps.affected-apps.outputs.apps, 'api-gateway')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.JFP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.JFP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        if: contains(steps.affected-apps.outputs.apps, 'api-gateway')
        id: login-ecr-ecs
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        if: contains(steps.affected-apps.outputs.apps, 'api-gateway')
        id: build-image-ecs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-ecs.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/jfp-api-gateway-prod:$IMAGE_TAG -t $ECR_REGISTRY/jfp-api-gateway-prod:latest . -f apps/api-gateway/Dockerfile
          echo "Pushing image to ECR..."
          docker push -a $ECR_REGISTRY/jfp-api-gateway-prod
          echo "image=$ECR_REGISTRY/jfp-api-gateway-prod:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Restart task definition
        if: contains(steps.affected-apps.outputs.apps, 'api-gateway')
        run: |
          aws ecs update-service --force-new-deployment --service api-gateway-prod-service --cluster jfp-ecs-cluster-prod
