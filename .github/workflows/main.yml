name: Main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main, feature/*]
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  lint:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch other branches
        if: ${{ github.event_name == 'pull_request' }}
        run: git fetch --no-tags --prune --depth=5 origin $GITHUB_BASE_REF
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-
      - name: NPM Install
        run: npm install --silent
      - name: generate prisma imports
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: prisma-generate
          all: true
      - name: NPM apollo and graphql for codegen
        run: npm i -g apollo graphql @apollo/rover@0.10.0
      - name: Codegen
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: codegen
          all: true
      - name: lint, type-check, extract-translations, subgraph-check
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: lint,type-check,extract-translations,subgraph-check
        env:
          APOLLO_KEY: ${{ secrets.APOLLO_KEY }}
      - name: Prettier
        run: npx prettier --check .
      - name: lint commit messages
        run: npx commitlint --from f654382 # earliest good commit to main
      - name: lint branch name
        if: ${{ github.event_name == 'pull_request' }}
        run: npx validate-branch-name -t $GITHUB_HEAD_REF
      - name: Check for file changes due to codegen
        run: ./tools/scripts/check-git-status.sh
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch other branches
        if: ${{ github.event_name == 'pull_request' }}
        run: git fetch --no-tags --prune --depth=5 origin $GITHUB_BASE_REF
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-
      - name: NPM Install
        run: npm install --silent
      - name: generate prisma imports
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: prisma-generate
          all: true
      - name: Install Doppler
        run: |
          sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
          curl -sLf --retry 3 --tlsv1.2 --proto "=https" 'https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key' | sudo apt-key add -
          echo "deb https://packages.doppler.com/public/cli/deb/debian any-version main" | sudo tee /etc/apt/sources.list.d/doppler-cli.list
          sudo apt-get update && sudo apt-get -y install doppler
      - uses: mansagroup/nrwl-nx-action@v3
        env:
          DOPPLER_API_GATEWAY_TOKEN: ${{ secrets.DOPPLER_API_GATEWAY_TOKEN }}
          DOPPLER_API_JOURNEYS_TOKEN: ${{ secrets.DOPPLER_API_JOURNEYS_TOKEN }}
          DOPPLER_API_LANGUAGES_TOKEN: ${{ secrets.DOPPLER_API_LANGUAGES_TOKEN }}
          DOPPLER_API_TAGS_TOKEN: ${{ secrets.DOPPLER_API_TAGS_TOKEN }}
          DOPPLER_API_USERS_TOKEN: ${{ secrets.DOPPLER_API_USERS_TOKEN }}
          DOPPLER_API_VIDEOS_TOKEN: ${{ secrets.DOPPLER_API_VIDEOS_TOKEN }}
          DOPPLER_API_MEDIA_TOKEN: ${{ secrets.DOPPLER_API_MEDIA_TOKEN }}
          DOPPLER_JOURNEYS_TOKEN: ${{ secrets.DOPPLER_JOURNEYS_TOKEN }}
          DOPPLER_JOURNEYS_ADMIN_TOKEN: ${{ secrets.DOPPLER_JOURNEYS_ADMIN_TOKEN }}
          DOPPLER_WATCH_TOKEN: ${{ secrets.DOPPLER_WATCH_TOKEN }}
          DOPPLER_WATCH_ADMIN_TOKEN: ${{ secrets.DOPPLER_WATCH_ADMIN_TOKEN }}
        with:
          targets: fetch-secrets,build
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch other branches
        if: ${{ github.event_name == 'pull_request' }}
        run: git fetch --no-tags --prune --depth=5 origin $GITHUB_BASE_REF
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-
      - name: NPM Install
        run: npm install --silent
      - name: generate prisma imports
        uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: prisma-generate
          all: true
      - uses: mansagroup/nrwl-nx-action@v3
        with:
          targets: test
          args: --ci
  visual-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check branch up to date with base
        run: ./tools/scripts/check-git-diff.sh
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-
      - name: NPM Install
        run: npm install --silent
      - name: nx Install
        run: npm install -g nx --silent
      - name: Build Stories
        id: build-storybook
        run: nx build-storybook shared-storybook --webpack-stats-json
        #ðŸ‘‡ Adds Chromatic as a step in the workflow
      - name: Run VR tests
        uses: chromaui/action@v1
        # Options required for Chromatic's GitHub Action
        # https://www.chromatic.com/docs/github-actions#available-options
        # https://github.com/chromaui/chromatic-cli/blob/main/action.yml
        with:
          #ðŸ‘‡ Chromatic projectToken, see https://storybook.js.org/tutorials/intro-to-storybook/react/en/deploy/ to obtain it
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          token: ${{ secrets.GITHUB_TOKEN }}
          storybookBuildDir: 'dist/storybook/shared-storybook'
          exitOnceUploaded: 'true'
          autoAcceptChanges: 'main'
          onlyChanged: 'true'
          skip: '@(dependabot/**|00-00-CI-chore-update-translations)'
          untraced: '@(package*.json|.storybook/**)'
          traceChanged: 'expanded'
