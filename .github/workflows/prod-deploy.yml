name: Prod Merge
on:
  push:
    branches:
      # - main
      - arangodb-cloud-deploy
jobs:
  api-journeys: 
    environment: Production
    env:
      ENV_SUFFIX: prod
      APOLLO_KEY: ${{ secrets.APOLLO_KEY }}
      ECR_REPOSITORY: jfp-api-journeys
      KUBE_NAMESPACE: api
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      IMAGE_TAG: ${{ github.sha }}
      DATABASE_URL: ${{ secrets.ARANGODB_URL }}
      DATABASE_USER: ${{ secrets.ARANGODB_USER }}
      DATABASE_PASS: ${{ secrets.ARANGODB_PASS }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      # - name: Derive appropriate SHAs for base and head for `nx affected` commands
      #   uses: nrwl/nx-set-shas@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-

      - name: NPM Install
        run: npm install --silent
      
      - name: nx Install
        run: npm install -g nx --silent

      # - name: Get affected apps
      #   run: echo "::set-output name=apps::$(nx affected:apps plain)"
      #   id: affected-apps  

      # - name: Install Rover
      #   if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
      #   run: npm install -g @apollo/rover --silent

      - name: Build api-journeys
        # if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
        uses: mansagroup/nrwl-nx-action@v2
        with:
          targets: build
          projects: api-journeys
      
      - name: Configure AWS credentials
        # if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
      - name: Login to Amazon ECR
        # if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        # if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  -f apps/api-journeys/Dockerfile --build-arg DATABASE_URL=$DATABASE_URL --build-arg DATABASE_USER=$DATABASE_USER --build-arg DATABASE_PASS=$DATABASE_PASS
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Get affected app seed
      #   run: echo "::set-output name=apps::$(nx affected:apps plain --files apps/api-journeys/db/seed.ts)"
      #   id: affected-apps 

      - name: Deploy to Kubernetes cluster                                                                            
        uses: kodermax/kubectl-aws-eks@master                                                                         
        env:                                                                                                     
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        with:                                                                                                         
          args: set image deployment/api-journeys $ECR_REPOSITORY=${{ env.RELEASE_IMAGE }} -n $KUBE_NAMESPACE
      
      - name: Verify Kubernetes deployment                               
        uses: kodermax/kubectl-aws-eks@master                            
        with:                                                            
          args: rollout status deploy api-journeys -n $KUBE_NAMESPACE

  # build-and-deploy:
  #   environment: Production
  #   env:
  #     ENV_SUFFIX: prod
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     APOLLO_KEY: ${{ secrets.APOLLO_KEY }}
  #     AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
  #     DB_USER: ${{ secrets.DB_USER }}
  #     DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout current branch
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 1

  #     - name: Derive appropriate SHAs for base and head for `nx affected` commands
  #       uses: nrwl/nx-set-shas@v2

  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #         cache: "npm"

  #     - name: Cache Node Modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: node-modules-main

  #     - name: NPM Install
  #       run: npm install
      
  #     - name: nx Install
  #       run: npm install -g nx

  #     - name: Get affected apps
  #       run: echo "::set-output name=apps::$(nx affected:apps plain)"
  #       id: affected-apps  

  #     - name: Install Serverless
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: npm install -g serverless

  #     - name: Install Rover
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: npm install -g @apollo/rover

  #     - name: Build Apollo API Gateway
  #       if: contains(steps.affected-apps.outputs.apps, 'api-gateway')
  #       uses: mansagroup/nrwl-nx-action@v2
  #       with:
  #         targets: build
  #         projects: api-gateway

  #     - name: Prep Apollo API Gateway assets
  #       if: contains(steps.affected-apps.outputs.apps, 'api-gateway')        
  #       run: |
  #         aws s3 cp dist/apps/api-gateway/main.js s3://core-apollo-gateway-$ENV_SUFFIX/
  #         aws s3 cp package.json s3://core-apollo-gateway-$ENV_SUFFIX/
  #         aws s3 cp apps/api-gateway/schema.graphql s3://core-apollo-gateway-$ENV_SUFFIX/
  #         aws s3 cp apps/api-gateway/.env s3://core-apollo-gateway-$ENV_SUFFIX/

  #     - name: Build Lambda security group name
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: |
  #         echo "LAMBDA_GROUP_NAME=ark-journey-lambda-$ENV_SUFFIX" >> $GITHUB_ENV

  #     - name: Deploy/Update Infrastructure
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       uses: mansagroup/nrwl-nx-action@v2
  #       with:
  #         targets: deploy
  #         projects: infrastructure
  #         args: --config resources/cf-stacks/serverless.yml --env $ENV_SUFFIX --lambda-group-name $LAMBDA_GROUP_NAME --region $AWS_DEFAULT_REGION --dbuser $DB_USER --dbpassword $DB_PASSWORD

  #     - name: Set ENV Vars Based on Infrastructure Output
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: |
  #         echo "LAMBDA_SECURITY_GROUP_ID=$( jq -r '.LambdaSecurityGroupId' infrastructure-output.json )" >> $GITHUB_ENV
  #         echo "DATABASE_URL=postgresql://$( jq -r '.ConnectionString' infrastructure-output.json )" >> $GITHUB_ENV
  #         echo "GATEWAY_INSTANCE_IP=$( jq -r '.ApolloGatewayInstanceIp' infrastructure-output.json )" >> $GITHUB_ENV

  #     - name: Prisma Generate api-journeys
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       uses: mansagroup/nrwl-nx-action@v2
  #       with:
  #         targets: generate-prisma
  #         projects: api-journeys

  #     - name: Deploy api-journeys
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       uses: mansagroup/nrwl-nx-action@v2
  #       with:
  #         targets: deploy        
  #         projects: api-journeys
  #         args: --env $ENV_SUFFIX

  #     - name: Get api-journeys endpoint
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: |
  #         echo "JOURNEYS_API_ENDPOINT=$( jq -r '.ServiceEndpoint' journeys-output.json )/journeys" >> $GITHUB_ENV

  #     - name: Get Github action IP
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       id: ip
  #       uses: haythem/public-ip@v1.2

  #     - name: Allow Github Actions Access to Postgres
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: aws ec2 authorize-security-group-ingress --group-id $LAMBDA_SECURITY_GROUP_ID --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32

  #     - name: Prisma Migrations api-journeys
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: npx prisma migrate deploy --schema apps/api-journeys/prisma/schema.prisma

  #     - name: Seed DB
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: npx prisma db seed --preview-feature --schema apps/api-journeys/prisma/schema.prisma

  #     - name: Publish Apollo Graph
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: rover subgraph publish ark-weave-journeys@current --name journeys --schema apps/api-journeys/schema.graphql --routing-url $JOURNEYS_API_ENDPOINT

  #     - name: Setup SSH for Gateway access
  #       run: |
  #         mkdir -p ~/.ssh/
  #         echo "$AWS_SSH_KEY" > ~/.ssh/gateway.key
  #         chmod 600 ~/.ssh/gateway.key
  #         cat >>~/.ssh/config <<END
  #         Host gateway
  #           HostName $GATEWAY_INSTANCE_IP
  #           User ec2-user
  #           IdentityFile ~/.ssh/gateway.key
  #           StrictHostKeyChecking no
  #         END

  #     - name: Update Apollo Gateway schema to proper API Gateway URL
  #       if: contains(steps.affected-apps.outputs.apps, 'api-journeys')
  #       run: ssh gateway "sudo sed -i 's|http://127.0.0.1:4001/graphql|$JOURNEYS_API_ENDPOINT|g' /opt/apollo-gateway/apps/api-gateway/schema.graphql"

  #     - name: Restart Apollo Gateway
  #       run: ssh gateway "sudo -- sh -c '. /.nvm/nvm.sh; \cp -r /etc/.pm2 ~; pkill pm2; pkill node; pm2 resurrect; pm2 start 0'"

  #     # Cleanup / remove Github access to postgres.
  #     - name: Remove Github Actions Access to Postgres
  #       run: aws ec2 revoke-security-group-ingress --group-id $LAMBDA_SECURITY_GROUP_ID --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32
