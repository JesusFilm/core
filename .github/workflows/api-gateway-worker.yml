name: API Deployment

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      repository:
        required: true
        type: string
      branch:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      KUBE_CONFIG_DATA:
        required: true

jobs:
  build-and-deploy:
    environment: Production
    env:
      ENV_SUFFIX: ${{ inputs.branch }}
      ECR_REPOSITORY: ${{ inputs.repository }}
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      IMAGE_TAG: ${{ github.sha }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-

      - name: NPM Install
        run: npm install --silent

      - name: nx Install
        run: npm install -g nx --silent

      - name: rover Install
        run: npm install -g @apollo/rover@0.2.1

      - name: Build ${{ inputs.name }}
        uses: mansagroup/nrwl-nx-action@v2
        with:
          targets: build
          projects: ${{ inputs.name }}
          args: --configuration="production"

      - name: Build api-journeys-stage schema
        if: ${{ inputs.branch }} == 'stage'
        run: rover subgraph introspect http://a3213965fc6c842f3abaca429a7fdbdf-2062532363.us-east-2.elb.amazonaws.com:4001/graphql > dist/apps/api-gateway/api-journeys-schema.graphql

      - name: Build api-journeys-main schema
        if: ${{ inputs.branch }} == 'main'
        run: rover subgraph introspect http://a8b2a4355a3734f45a29b6f5161e67bf-2098749914.us-east-2.elb.amazonaws.com:4001/graphql > dist/apps/api-gateway/api-journeys-schema.graphql

      - name: Build api-journeys-stage schema
        if: ${{ inputs.branch }} == 'stage'
        run: rover subgraph introspect http://a1297fe27930647eba5996fc18192a04-4172096.us-east-2.elb.amazonaws.com:4002/graphql > dist/apps/api-gateway/api-users-schema.graphql

      - name: Build api-users-main schema
        if: ${{ inputs.branch }} == 'main'
        run: rover subgraph introspect http://ad67299f5087f4d1b845926ce1832198-64788321.us-east-2.elb.amazonaws.com:4002/graphql > dist/apps/api-gateway/api-users-schema.graphql

      - name: Build api-gateway schema
        run: rover supergraph compose --config apps/api-gateway/supergraph-$ENV_SUFFIX.yml > dist/apps/api-gateway/schema.graphql

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$ENV_SUFFIX .  -f apps/${{ inputs.name }}/Dockerfile
          echo "Pushing image to ECR..."
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to Kubernetes cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        with:
          args: set image deployment/${{ inputs.name }}-$ENV_SUFFIX $ECR_REPOSITORY=${{ env.RELEASE_IMAGE }}

      - name: Verify Kubernetes deployment
        uses: kodermax/kubectl-aws-eks@master
        with:
          args: rollout status deploy ${{ inputs.name }}-$ENV_SUFFIX
