---
title: Watch Modern Build Rules
globs: core/apps/watch-modern/**
alwaysApply: false
---
# Watch-Modern Rules

- @base.mdc

## 1. Technology Stack & Constraints

### Core Technologies
- **ReactJS** - Frontend framework
- **NextJS (App Router)** - Full-stack React framework with app directory
- **TypeScript** - Primary language (all components must be fully typed)
- **JavaScript** - Supporting language
- **HTML** - Semantic markup
- **CSS** - Base styling
- **Tailwind CSS** - Utility-first CSS framework
- **Shadcn/ui** - Component library (preferred choice)
- **Gql.tada** - GraphQL type generation
- **Apollo Client** - GraphQL state management
- **Next-intl** - Internationalization (currently implemented)

### CRITICAL WORKFLOW CONSTRAINT:
Never automatically run git commit commands without explicit user permission. Always ask the user before any git operations including: git add, git commit, git push, git merge, etc. The user wants control over version control operations. Only suggest commit commands and let the user execute them manually, or ask "Should I commit these changes?" before proceeding.

### **CRITICAL UI CONSTRAINT**
**Watch-modern must NEVER import or use MUI (@mui/material) components.**

### UI Component Hierarchy (order of preference)
1. **Shadcn/ui components** - Primary choice for all UI needs
2. **Custom Tailwind components** - If shadcn/ui doesn't exist, build with Tailwind CSS
3. **Semantic HTML + Tailwind** - For basic elements when neither above applies

### Code Implementation Guidelines

**CRITICAL CONSTRAINT**: Watch-modern must NEVER import or use MUI (@mui/material) components. This is a hard requirement.

### CRITICAL PATH CONSTRAINT

All file operations for this workspace MUST be within /workspaces/core/ directory. Never create files in /workspaces/apps/ or /workspaces/prds/. The correct structure is:
- /workspaces/core/apps/ (NOT /workspaces/apps/)
- /workspaces/core/prds/ (NOT /workspaces/prds/)

Always verify current working directory is /workspaces/core before file operations.

**UI Component Hierarchy** (in order of preference):

1. **Shadcn/ui components** - Primary choice for all UI needs
2. **Custom Tailwind components** - If shadcn/ui doesn't exist, build with Tailwind CSS
3. **Semantic HTML + Tailwind** - For basic elements when neither above applies

**NEVER use**: MUI components, styled-components, CSS modules, or any non-Tailwind styling approaches.

Follow these rules when you write code:

- Use early returns whenever possible to make the code more readable.
- **ALWAYS prefer shadcn/ui components** over any other UI library or custom implementations. If a shadcn/ui component does not exist, use semantic HTML and Tailwind CSS, and document the reason.
- **NO MUI imports** - Never import anything from @mui/material, @mui/lab, @mui/icons-material, or related MUI packages.
- Use descriptive variable and function/const names. Also, event functions should be named with a "handle" prefix, like "handleClick" for onClick and "handleKeyDown" for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex="0", aria-label, on:click, and on:keydown, and similar attributes.
- "All components and functions must be fully typed with TypeScript."

## 3. Testing Strategy & Implementation

### Testing Technology Stack
- **Jest** - Test framework with advanced configuration
- **@testing-library/react** - Component testing library
- **@testing-library/user-event** - User interaction testing
- **@testing-library/jest-dom** - Custom Jest matchers
- **Next.js mocking** - Pre-configured for images, router, etc.

### TDD Methodology
**CRITICAL REQUIREMENT**: All development must follow Test-Driven 
Development (TDD) methodology.

**TDD Process**:
1. **Red**: Write failing test first before any implementation
2. **Green**: Write minimal code to make tests pass  
3. **Verify**: Check server compilation (`nx serve` - wait for "✓ Ready in Xs")
4. **Refactor**: Improve code while maintaining test coverage

### Test Environment Setup
```typescript
// Already configured in setupTests.tsx:
- '@testing-library/jest-dom' matchers
- Next.js Image component mocking
- Next.js Router mocking with next-router-mock
- CI retry logic (3 retries on failure)
- Extended timeout: 2500ms for async operations
```

### Test File Patterns
- **Location**: Adjacent to components: `Component.spec.tsx`
- **Naming**: Descriptive test names: `should render header with correct brand text`
- **Structure**: Group related tests with `describe` blocks
- **Setup**: Use `beforeEach` for common setup, `afterEach` for cleanup

### Component Testing Checklist
1. **Rendering**: Component renders without crashing
2. **Props**: All props work correctly with various inputs
3. **Interactions**: User interactions (clicks, keyboard, form inputs)
4. **Accessibility**: ARIA labels, keyboard navigation, semantic HTML
5. **Conditional logic**: Different states and prop combinations
6. **CSS classes**: Correct Tailwind classes applied

### Example Test Patterns
```typescript
describe('MyComponent', () => {
  it('should render with correct text', () => {
    render(<MyComponent text="Hello World" />)
    expect(screen.getByText('Hello World')).toBeInTheDocument()
  })

  it('should handle click events', async () => {
    const handleClick = jest.fn()
    render(<MyComponent onClick={handleClick} />)
    
    await user.click(screen.getByRole('button'))
    expect(handleClick).toHaveBeenCalledTimes(1)
  })

  it('should apply correct CSS classes', () => {
    render(<MyComponent className="custom-class" />)
    expect(screen.getByRole('button')).toHaveClass('custom-class')
  })
})
```

## Documentation Guidelines

- Keep documentation up to date with code changes.

## Component Patterns

- Export all components through index.ts files
- Use alphabetical order for imports and exports

### Component Naming Conventions

Components should follow a consistent naming pattern based on their type/category to improve organization and discoverability:

- **Pages**: Prefix with 'Page'
  - PageHome
  - PageVideo  
  - PageCollection
  - PageSearch
  - PageSettings

- **Dialogs/Modals**: Prefix with 'Dialog'
  - DialogConfirm
  - DialogShare
  - DialogSettings

- **Sections**: Prefix with 'Section'
  - SectionHeader
  - SectionFooter 
  - SectionHero
  - SectionFeatures

- **Layout Components**: Prefix with 'Layout'
  - LayoutDefault
  - LayoutFullWidth
  - LayoutSidebar


- Prefix interface names with component name: `PageLayoutProps`

**CSS Class Patterns**:

- Use component classes from globals.css: `.container-standard`, `.responsive-padding`, `.space-between`
- Follow z-index system: `.z-header`, `.z-content`, `.z-modal`
- Use responsive patterns: `.hide-mobile`, `.show-mobile`

**Linting Requirements**:

- Use type-only imports for React types: `import type { ReactElement }`
- Maintain alphabetical import order

## Component Implementation Patterns

**React Component Structure**:

- Define interfaces above the component function
- Use destructured props with default values

**Component Props Patterns**:

- Use optional props with sensible defaults: `hideHeader = false`
- Include className prop for extensibility: `className?: string`
- Use ReactNode for children and content slots: `children?: ReactNode`
- Name interfaces with component name prefix: `ComponentNameProps`

**Layout Integration Patterns**:

- Use semantic HTML elements: `<header>`, `<main>`, `<footer>`
- Apply z-index classes semantically: `.z-header`, `.z-content`
- Use container and responsive padding patterns consistently
- Implement responsive behavior with established hide/show classes

## Test-Driven Development Patterns

**Component Testing Workflow**:

1. **Write test file first**: Create `ComponentName.spec.tsx` before `ComponentName.tsx`
2. **Test component rendering**: Verify component renders without crashing
3. **Test props and interactions**: Test all props, user interactions, and state changes
4. **Test accessibility**: Ensure proper ARIA labels, keyboard navigation, screen reader support
5. **Test responsive behavior**: Verify hide/show patterns and responsive classes

**Test File Organization**:

- Place test files adjacent to components: `ComponentName.spec.tsx`
- Use descriptive test names: `should render header with correct brand text`
- Group related tests with `describe` blocks
- Use `beforeEach` for common setup, `afterEach` for cleanup

**Testing Layout Components**:

- Test CSS class application: `.container-standard`, `.responsive-padding`
- Test conditional rendering: `hideHeader`, `hideFooter` props
- Test responsive behavior: mobile/desktop class visibility
- Test accessibility: semantic HTML elements, ARIA attributes

**Example TDD Workflow**:

```typescript
// 1. RED: Write failing test first
describe('MyComponent', () => {
  it('should render with correct text', () => {
    render(<MyComponent text="Hello" />)
    expect(screen.getByText('Hello')).toBeInTheDocument()
  })
})

// 2. GREEN: Write minimal implementation
export function MyComponent({ text }: { text: string }) {
  return <div>{text}</div>
}

// 3. REFACTOR: Improve while maintaining tests
```

# READ FIRST
- Before coding: read prds/watch-modern/<feature>/{requirements.md,design.md,slices.md,intake.md}
- Work strictly slice-by-slice from slices.md. Each commit references requirement IDs.

# HARD RULES
- TDD: write failing tests first (Jest + RTL), then minimal code, then refactor.
- UI: Tailwind + shadcn only. MUI forbidden.
- Each new component must have a *.spec.tsx sibling.
- After each slice: update slices.md (status + progress + deviations).
- Update apps/watch-modern/LEARNINGS.md after each slice.

# STOP CONDITIONS
- If spec is ambiguous/conflicting → stop and ask.
- If spec files missing → stop and request SHAPER first.

- Update apps/watch-modern/LEARNINGS.md after each slice.

# STOP CONDITIONS
- If spec is ambiguous/conflicting → stop and ask.
- If spec files missing → stop and request SHAPER first.

- Update apps/watch-modern/LEARNINGS.md after each slice.

# STOP CONDITIONS
- If spec is ambiguous/conflicting → stop and ask.
- If spec files missing → stop and request SHAPER first.

- Update apps/watch-modern/LEARNINGS.md after each slice.
