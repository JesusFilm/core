---
description: Apply there tools everytime you work on developing /watch-modern project.
alwaysApply: false
---
# Watch-Modern Rules

- @base.mdc

# READ FIRST
- Must read prds/watch-modern/<feature>/spec/{requirements.md,design.md,slices.md,intake.md}
# HARD RULES
- Preserve markup/classes from intake/ui (snapshot test).

## 1. Technology Stack & Constraints

### Core Technologies
- **ReactJS** - Frontend framework
- **NextJS (App Router)** - Full-stack React framework with app directory
- **TypeScript** - Primary language (all components must be fully typed)
- **JavaScript** - Supporting language
- **HTML** - Semantic markup
- **CSS** - Base styling
- **Tailwind CSS** - Utility-first CSS framework
- **Shadcn/ui** - Component library (preferred choice)
- **Gql.tada** - GraphQL type generation
- **Apollo Client** - GraphQL state management
- **Next-intl** - Internationalization (currently implemented)

### CRITICAL WORKFLOW CONSTRAINT:
Never automatically run git commit commands without explicit user permission. Always ask the user before any git operations including: git add, git commit, git push, git merge, etc. The user wants control over version control operations. Only suggest commit commands and let the user execute them manually, or ask "Should I commit these changes?" before proceeding.

### **CRITICAL UI CONSTRAINT**
**Watch-modern must NEVER import or use MUI (@mui/material) components.**

### UI Component Hierarchy (order of preference)
1. **Shadcn/ui components** - Primary choice for all UI needs
2. **Custom Tailwind components** - If shadcn/ui doesn't exist, build with Tailwind CSS
3. **Semantic HTML + Tailwind** - For basic elements when neither above applies

### Code Implementation Guidelines

**CRITICAL CONSTRAINT**: Watch-modern must NEVER import or use MUI (@mui/material) components. This is a hard requirement.

### CRITICAL PATH CONSTRAINT

All file operations for this workspace MUST be within /workspaces/core/ directory. Never create files in /workspaces/apps/ or /workspaces/prds/. The correct structure is:
- /workspaces/core/apps/ (NOT /workspaces/apps/)
- /workspaces/core/prds/ (NOT /workspaces/prds/)

Always verify current working directory is /workspaces/core before file operations.

**UI Component Hierarchy** (in order of preference):

1. **Shadcn/ui components** - Primary choice for all UI needs
2. **Custom Tailwind components** - If shadcn/ui doesn't exist, build with Tailwind CSS
3. **Semantic HTML + Tailwind** - For basic elements when neither above applies

**NEVER use**: MUI components, styled-components, CSS modules, or any non-Tailwind styling approaches.

Follow these rules when you write code:

- Use early returns whenever possible to make the code more readable.
- **ALWAYS prefer shadcn/ui components** over any other UI library or custom implementations. If a shadcn/ui component does not exist, use semantic HTML and Tailwind CSS, and document the reason.
- **NO MUI imports** - Never import anything from @mui/material, @mui/lab, @mui/icons-material, or related MUI packages.
- Use descriptive variable and function/const names. Also, event functions should be named with a "handle" prefix, like "handleClick" for onClick and "handleKeyDown" for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex="0", aria-label, on:click, and on:keydown, and similar attributes.
- "All components and functions must be fully typed with TypeScript."

## 2. Apollo Client â€” Runtime and Testing Rules

- Runtime Provider:
  - The app root must wrap children with an ApolloProvider. Use a dedicated client wrapper (e.g., `apps/watch-modern/src/app/ApolloClientProvider.tsx`) that calls `useApolloClient()` and renders `<ApolloProvider client={client}>`.
  - Ensure this wrapper is used in `src/app/layout.tsx`.
- Component Usage:
  - Components must consume Apollo Client from React context. Do NOT construct an ApolloClient in components. Do NOT pass a `client` prop to `useQuery`.
- Testing:
  - Wrap components with `MockedProvider` in tests.
  - Provide mocks as `MockedResponse[]` using `{ request: { query, variables }, result: { data } }`.
  - Keep data shapes consistent with GraphQL schema (arrays for `title`, `snippet`, `description`, `imageAlt`, and `images`).
  - Avoid brittle assertions that depend on live content; assert structure/roles or use stable fixture values.
- Env Vars:
  - `NEXT_PUBLIC_GATEWAY_URL` affects runtime network calls only. Tests must not depend on it; they should be hermetic with `MockedProvider`.

## 3. Testing Strategy & Implementation

### Testing Technology Stack
- **Jest** - Test framework with advanced configuration
- **@testing-library/react** - Component testing library
- **@testing-library/user-event** - User interaction testing
- **@testing-library/jest-dom** - Custom Jest matchers
- **Next.js mocking** - Pre-configured for images, router, etc.

### TDD Methodology
**CRITICAL REQUIREMENT**: All development must follow Test-Driven 
Development (TDD) methodology.

**TDD Process**:
1. **Red**: Write failing test first before any implementation
2. **Green**: Write minimal code to make tests pass  
3. **Verify**: Check server compilation (`nx serve` - wait for "âœ“ Ready in Xs")
4. **Refactor**: Improve code while maintaining test coverage

### Test Environment Setup
```typescript
// Already configured in setupTests.tsx:
- '@testing-library/jest-dom' matchers
- Next.js Image component mocking
- Next.js Router mocking with next-router-mock
- CI retry logic (3 retries on failure)
- Extended timeout: 2500ms for async operations
```

### Test File Patterns
- **Location**: Adjacent to components: `Component.spec.tsx`
- **Naming**: Descriptive test names: `should render header with correct brand text`
- **Structure**: Group related tests with `describe` blocks
- **Setup**: Use `beforeEach` for common setup, `afterEach` for cleanup

### Component Testing Checklist
1. **Rendering**: Component renders without crashing
2. **Props**: All props work correctly with various inputs
3. **Interactions**: User interactions (clicks, keyboard, form inputs)
4. **Accessibility**: ARIA labels, keyboard navigation, semantic HTML
5. **Conditional logic**: Different states and prop combinations
6. **CSS classes**: Correct Tailwind classes applied

## Documentation Guidelines
- Keep documentation up to date with code changes.

## Component Patterns
- Export all components through index.ts files
- Use alphabetical order for imports and exports

### Component Naming Conventions
- Pages: `PageHome`, `PageVideo`, `PageCollection`, `PageSearch`, `PageSettings`
- Dialogs: `DialogConfirm`, `DialogShare`, `DialogSettings`
- Sections: `SectionHeader`, `SectionFooter`, `SectionHero`, `SectionFeatures`
- Layouts: `LayoutDefault`, `LayoutFullWidth`, `LayoutSidebar`

- Prefix interface names with component name: `PageLayoutProps`

**CSS Class Patterns**:
- Use component classes from globals.css: `.container-standard`, `.responsive-padding`, `.space-between`
- Follow z-index system: `.z-header`, `.z-content`, `.z-modal`
- Use responsive patterns: `.hide-mobile`, `.show-mobile`

**Linting Requirements**:
- Use type-only imports for React types: `import type { ReactElement }`
- Maintain alphabetical import order

# READ FIRST
- Before coding: read prds/watch-modern/<feature>/{requirements.md,design.md,slices.md,intake.md}
- Work strictly slice-by-slice from slices.md. Each commit references requirement IDs.

# HARD RULES
- TDD: write failing tests first (Jest + RTL), then minimal code, then refactor.
- UI: Tailwind + shadcn only. MUI forbidden.
- Each new component must have a *.spec.tsx sibling.
- After each slice: update slices.md (status + progress + deviations).
- Update apps/watch-modern/LEARNINGS.md after each slice.

# STOP CONDITIONS
- If spec is ambiguous/conflicting â†’ stop and ask.
- If spec files missing â†’ stop; run SHAPING agent first.

## 4. GraphQL Testing & Runtime Rules

### Apollo Client Testing
- **ALWAYS** wrap components with `MockedProvider` in tests
- **NEVER** construct ApolloClient inside components
- **ALWAYS** use `skip` option for conditional queries
- **ALWAYS** provide complete mock data matching GraphQL schema

### GraphQL Query Patterns
- **Parent-Child**: Use `video(id: $id) { children }` not `videos(parentId: $id)`
- **Fragment Management**: Remove unused fragments immediately
- **Error Handling**: Implement fallbacks for GraphQL errors
- **Data Transformation**: Separate GraphQL data from component data

### File Operation Safety Rules
- **ALWAYS** read file content before search_replace operations
- **ALWAYS** verify exact strings exist before replacement
- **ALWAYS** check for syntax errors after file modifications
- **ALWAYS** run tests after any component changes

### Component Architecture Rules
- **BEFORE** major component changes, validate with user
- **ALWAYS** update tests when component interfaces change
- **PREFER** boolean props over string variants
- **MAINTAIN** consistent prop interfaces across variants

## **ðŸŽ¯ Key Benefits of These Updates:**

1. **Prevents GraphQL Query Iterations**: Clear patterns for parent-child relationships
2. **Reduces File Operation Failures**: Safety checks before search_replace
3. **Improves Test Reliability**: Better Apollo Client testing patterns
4. **Enhances Dev Server Stability**: More robust server management
5. **Validates Architectural Changes**: Prevents mid-task refactoring issues

These updates would have prevented most of the issues we encountered, especially the multiple GraphQL query iterations and file operation failures. The enhanced dev server management would have also reduced the time spent debugging server issues.

Would you like me to implement these specific updates to the files?


# STOP CONDITIONS
- If spec is ambiguous/conflicting â†’ stop and ask.
- If spec files missing â†’ stop; run SHAPING agent first.
