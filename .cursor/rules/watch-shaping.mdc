---
globs:
  - "apps/watch-modern/src/shaping/**"
  - "apps/watch-modern/app/__shaping/**"
alwaysApply: false
---
# PURPOSE
- Fast UI/UX vibecoding with hardcoded data. No backend. No tests.
- Do NOT modify files outside the shaping globs above.

# REQUIRED OUTPUTS (handoff)
- Write/update:
  - prds/watch-modern/<feature>/shaping/notes.md
  - prds/watch-modern/<feature>/shaping/artifact-map.md
  - prds/watch-modern/<feature>/shaping/screens/*.png   (user provides)
- Ask before advancing phases.

# BOUNDS
- Tailwind/shadcn preferred.
- Fake data/images allowed. Broken links OK.
- Never touch apps/watch-modern/** outside src/shaping or app/__shaping.

# PREFLIGHT
- If prds/watch-modern/<feature>/intake.md is missing â†’ STOP and request INTAKE.


- @base.mdc

## 1. Technology Stack & Constraints

### Core Technologies
- **ReactJS** - Frontend framework
- **NextJS (App Router)** - Full-stack React framework with app directory
- **TypeScript** - Primary language (all components must be fully typed)
- **JavaScript** - Supporting language
- **HTML** - Semantic markup
- **CSS** - Base styling
- **Tailwind CSS** - Utility-first CSS framework
- **Shadcn/ui** - Component library (preferred choice)
- **Gql.tada** - GraphQL type generation
- **Apollo Client** - GraphQL state management
- **Next-intl** - Internationalization (currently implemented)

### CRITICAL WORKFLOW CONSTRAINT:
Never automatically run git commit commands without explicit user permission. Always ask the user before any git operations including: git add, git commit, git push, git merge, etc. The user wants control over version control operations. Only suggest commit commands and let the user execute them manually, or ask "Should I commit these changes?" before proceeding.

### **CRITICAL UI CONSTRAINT**
**Watch-modern must NEVER import or use MUI (@mui/material) components.**

### UI Component Hierarchy (order of preference)
1. **Shadcn/ui components** - Primary choice for all UI needs
2. **Custom Tailwind components** - If shadcn/ui doesn't exist, build with Tailwind CSS
3. **Semantic HTML + Tailwind** - For basic elements when neither above applies

### Code Implementation Guidelines

**CRITICAL CONSTRAINT**: Watch-modern must NEVER import or use MUI (@mui/material) components. This is a hard requirement.

### CRITICAL PATH CONSTRAINT

All file operations for this workspace MUST be within /workspaces/core/ directory. Never create files in /workspaces/apps/ or /workspaces/prds/. The correct structure is:
- /workspaces/core/apps/ (NOT /workspaces/apps/)
- /workspaces/core/prds/ (NOT /workspaces/prds/)

Always verify current working directory is /workspaces/core before file operations.

**UI Component Hierarchy** (in order of preference):

1. **Shadcn/ui components** - Primary choice for all UI needs
2. **Custom Tailwind components** - If shadcn/ui doesn't exist, build with Tailwind CSS
3. **Semantic HTML + Tailwind** - For basic elements when neither above applies

**NEVER use**: MUI components, styled-components, CSS modules, or any non-Tailwind styling approaches.

Follow these rules when you write code:

- Use early returns whenever possible to make the code more readable.
- **ALWAYS prefer shadcn/ui components** over any other UI library or custom implementations. If a shadcn/ui component does not exist, use semantic HTML and Tailwind CSS, and document the reason.
- **NO MUI imports** - Never import anything from @mui/material, @mui/lab, @mui/icons-material, or related MUI packages.
- Use descriptive variable and function/const names. Also, event functions should be named with a "handle" prefix, like "handleClick" for onClick and "handleKeyDown" for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex="0", aria-label, on:click, and on:keydown, and similar attributes.
- "All components and functions must be fully typed with TypeScript."

## 3. Testing Strategy & Implementation

DON'T WRITE TESTS IN THIS VIBECODING MODE!

## Documentation Guidelines

- Inline documentation for next AI Code agent to convert this prototype code into a production version.
- Inline documentation describing user actions and what type of data will be expected in the production verison.

## Component Patterns

- Export all components through index.ts files
- Use alphabetical order for imports and exports

### Component Naming Conventions

Components should follow a consistent naming pattern based on their type/category to improve organization and discoverability:

- **Pages**: Prefix with 'Page'
  - PageHome
  - PageVideo  
  - PageCollection
  - PageSearch
  - PageSettings

- **Dialogs/Modals**: Prefix with 'Dialog'
  - DialogConfirm
  - DialogShare
  - DialogSettings

- **Sections**: Prefix with 'Section'
  - SectionHeader
  - SectionFooter 
  - SectionHero
  - SectionFeatures

- **Layout Components**: Prefix with 'Layout'
  - LayoutDefault
  - LayoutFullWidth
  - LayoutSidebar


- Prefix interface names with component name: `PageLayoutProps`

### 4. **File Path Validation Pattern**
When creating files, I should always:

1. **Check current directory** with `pwd`
2. **Use explicit relative paths** from `/workspaces/core/`
3. **Verify paths** before creation: `apps/watch-modern/...` not `/workspaces/apps/...`

