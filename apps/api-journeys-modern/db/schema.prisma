generator client {
  provider      = "prisma-client-js"
  output        = env("PRISMA_LOCATION_JOURNEYS_MODERN")
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator erd {
  provider    = "prisma-erd-generator"
  ignoreEnums = "true"
  disabled    = "true"
}

generator pothos {
  provider     = "prisma-pothos-types"
  output       = "../src/__generated__/pothos-types.ts"
  clientOutput = ".prisma/api-journeys-modern-client"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL_JOURNEYS")
}

model ChatButton {
  id        String           @id @default(uuid())
  journeyId String
  link      String?
  platform  MessagePlatform?
  updatedAt DateTime         @default(now()) @updatedAt
  journey   Journey          @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@index([journeyId])
}

model Event {
  id                      String            @id @default(uuid())
  typename                String
  journeyId               String?
  blockId                 String?
  stepId                  String?
  createdAt               DateTime          @default(now())
  label                   String?
  value                   String?
  visitorId               String
  action                  ButtonAction?
  actionValue             String?
  messagePlatform         MessagePlatform?
  languageId              String?
  radioOptionBlockId      String?
  email                   String?
  nextStepId              String?
  position                Float?
  source                  VideoBlockSource?
  progress                Int?
  userId                  String?
  journeyVisitorJourneyId String?
  journeyVisitorVisitorId String?
  updatedAt               DateTime          @default(now()) @updatedAt
  previousStepId          String?
  journeyVisitor          JourneyVisitor?   @relation(fields: [journeyVisitorJourneyId, journeyVisitorVisitorId], references: [journeyId, visitorId])
  visitor                 Visitor           @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@index([journeyId])
  @@index([visitorId])
  @@index([blockId])
  @@index([userId])
}

model Visitor {
  id                        String           @id @default(uuid())
  createdAt                 DateTime         @default(now())
  countryCode               String?
  duration                  Int              @default(0)
  email                     String?
  lastChatStartedAt         DateTime?
  lastChatPlatform          MessagePlatform?
  lastStepViewedAt          DateTime?
  lastLinkAction            String?
  lastTextResponse          String?
  lastRadioQuestion         String?
  lastRadioOptionSubmission String?
  messagePlatform           MessagePlatform?
  messagePlatformId         String?
  name                      String?
  notes                     String?
  status                    VisitorStatus?
  teamId                    String
  userId                    String
  userAgent                 Json?
  referrer                  String?
  updatedAt                 DateTime         @default(now()) @updatedAt
  events                    Event[]
  journeyVisitors           JourneyVisitor[]
  team                      Team             @relation(fields: [teamId], references: [id])

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([createdAt(sort: Desc)])
  @@index([userId])
  @@index([status])
  @@index([countryCode])
}

model Host {
  id        String    @id @default(uuid())
  teamId    String
  title     String
  location  String?
  src1      String?
  src2      String?
  updatedAt DateTime  @default(now()) @updatedAt
  team      Team      @relation(fields: [teamId], references: [id])
  journeys  Journey[]

  @@index([teamId])
}

model JourneyVisitor {
  id                        String           @id @default(uuid())
  journeyId                 String
  visitorId                 String
  createdAt                 DateTime         @default(now())
  duration                  Int              @default(0)
  lastChatStartedAt         DateTime?
  lastChatPlatform          MessagePlatform?
  lastStepViewedAt          DateTime?
  lastLinkAction            String?
  lastTextResponse          String?
  lastRadioQuestion         String?
  lastRadioOptionSubmission String?
  activityCount             Int              @default(0)
  updatedAt                 DateTime         @default(now()) @updatedAt
  events                    Event[]
  journey                   Journey          @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  visitor                   Visitor          @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@unique([journeyId, visitorId])
  @@index([createdAt(sort: Desc)])
  @@index([journeyId])
  @@index([visitorId])
  @@index([lastChatStartedAt])
  @@index([lastRadioQuestion])
  @@index([lastTextResponse])
  @@index([activityCount(sort: Desc)])
  @@index([duration(sort: Desc)])
}

model Team {
  id                 String              @id @default(uuid())
  title              String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  publicTitle        String?
  plausibleToken     String?
  customDomains      CustomDomain[]
  hosts              Host[]
  integrations       Integration[]
  journeys           Journey[]
  journeyCollections JourneyCollection[]
  userTeams          UserTeam[]
  UserTeamInvites    UserTeamInvite[]
  visitors           Visitor[]

  @@index([title])
}

model Integration {
  id                     String          @id @default(uuid())
  teamId                 String
  type                   IntegrationType
  accessId               String?
  accessSecretPart       String?
  accessSecretCipherText String?
  accessSecretIv         String?
  accessSecretTag        String?
  team                   Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model UserTeam {
  id                   String                @id @default(uuid())
  teamId               String
  userId               String
  role                 UserTeamRole          @default(member)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  journeyNotifications JourneyNotification[]
  team                 Team                  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([role])
  @@index([teamId])
}

model UserTeamInvite {
  id           String    @id @default(uuid())
  teamId       String
  email        String
  senderId     String
  receipientId String?
  acceptedAt   DateTime?
  removedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  team         Team      @relation(fields: [teamId], references: [id])

  @@unique([teamId, email])
  @@index([email, acceptedAt, removedAt])
  @@index([email])
  @@index([teamId])
}

model UserJourney {
  id                  String               @id @default(uuid())
  userId              String
  journeyId           String
  updatedAt           DateTime             @default(now()) @updatedAt
  role                UserJourneyRole
  openedAt            DateTime?
  journeyNotification JourneyNotification?
  journey             Journey              @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@unique([journeyId, userId])
  @@index([journeyId])
  @@index([role])
}

model JourneyTag {
  id        String  @id @default(uuid())
  tagId     String
  journeyId String
  journey   Journey @relation(fields: [journeyId], references: [id])

  @@unique([journeyId, tagId])
  @@index([tagId])
}

model Journey {
  id                        String                      @id @default(uuid())
  title                     String
  languageId                String
  description               String?
  slug                      String                      @unique
  archivedAt                DateTime?
  createdAt                 DateTime                    @default(now())
  deletedAt                 DateTime?
  publishedAt               DateTime?
  trashedAt                 DateTime?
  featuredAt                DateTime?
  status                    JourneyStatus
  seoTitle                  String?
  seoDescription            String?
  primaryImageBlockId       String?                     @unique
  template                  Boolean?                    @default(false)
  teamId                    String
  hostId                    String?
  themeMode                 ThemeMode?                  @default(light)
  themeName                 ThemeName?                  @default(base)
  updatedAt                 DateTime                    @default(now()) @updatedAt
  strategySlug              String?
  creatorDescription        String?
  creatorImageBlockId       String?                     @unique
  plausibleToken            String?
  displayTitle              String?
  showDislikeButton         Boolean?                    @default(true)
  showLikeButton            Boolean?                    @default(true)
  showShareButton           Boolean?                    @default(true)
  website                   Boolean?                    @default(false)
  logoImageBlockId          String?                     @unique
  menuButtonIcon            JourneyMenuButtonIcon?
  menuStepBlockId           String?                     @unique
  showChatButtons           Boolean?                    @default(true)
  showDisplayTitle          Boolean?                    @default(true)
  showHosts                 Boolean?                    @default(true)
  showLogo                  Boolean?                    @default(false)
  showMenu                  Boolean?                    @default(false)
  showReactionButtons       Boolean?                    @default(true)
  actions                   Action[]
  blocks                    Block[]
  chatButtons               ChatButton[]
  creatorImageBlock         Block?                      @relation("CreatorImageBlock", fields: [creatorImageBlockId], references: [id])
  host                      Host?                       @relation(fields: [hostId], references: [id])
  logoImageBlock            Block?                      @relation("LogoImageBlock", fields: [logoImageBlockId], references: [id])
  menuStepBlock             Block?                      @relation("MenuStepBlock", fields: [menuStepBlockId], references: [id])
  primaryImageBlock         Block?                      @relation("PrimaryImageBlock", fields: [primaryImageBlockId], references: [id])
  team                      Team                        @relation(fields: [teamId], references: [id])
  journeyCollectionJourneys JourneyCollectionJourneys[]
  journeyNotifications      JourneyNotification[]
  journeyTags               JourneyTag[]
  journeyVisitors           JourneyVisitor[]
  userInvites               UserInvite[]
  userJourneys              UserJourney[]

  @@index([title])
}

model UserRole {
  id     String @id @default(uuid())
  userId String @unique
  roles  Role[]

  @@index([userId])
}

model JourneyProfile {
  id                           String    @id @default(uuid())
  userId                       String    @unique
  acceptedTermsAt              DateTime  @default(now())
  lastActiveTeamId             String?
  onboardingFormCompletedAt    DateTime?
  journeyFlowBackButtonClicked Boolean?
  plausibleDashboardViewed     Boolean?
  plausibleJourneyFlowViewed   Boolean?

  @@index([userId])
}

model UserInvite {
  id         String    @id @default(uuid())
  journeyId  String
  senderId   String
  email      String
  acceptedAt DateTime?
  removedAt  DateTime?
  updatedAt  DateTime  @default(now()) @updatedAt
  journey    Journey   @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@unique([journeyId, email])
  @@index([email, acceptedAt, removedAt])
}

model Block {
  id                      String               @id @default(uuid())
  typename                String
  journeyId               String
  parentBlockId           String?
  parentOrder             Int?
  label                   String?
  variant                 String?
  color                   String?
  size                    String?
  startIconId             String?
  endIconId               String?
  backgroundColor         String?
  coverBlockId            String?              @unique
  fullscreen              Boolean?
  themeMode               String?
  themeName               String?
  spacing                 Int?
  direction               String?
  justifyContent          String?
  alignItems              String?
  xl                      Int?
  lg                      Int?
  sm                      Int?
  name                    String?
  src                     String?
  width                   Int?
  height                  Int?
  alt                     String?
  blurhash                String?
  submitIconId            String?
  submitLabel             String?
  nextBlockId             String?
  locked                  Boolean?
  hint                    String?
  minRows                 Int?
  content                 String?
  align                   String?
  startAt                 Int?
  endAt                   Int?
  muted                   Boolean?
  autoplay                Boolean?
  posterBlockId           String?              @unique
  fullsize                Boolean?
  videoId                 String?
  videoVariantLanguageId  String?
  source                  VideoBlockSource?
  title                   String?
  description             String?
  image                   String?
  duration                Int?
  objectFit               VideoBlockObjectFit?
  triggerStart            Int?
  updatedAt               DateTime             @default(now()) @updatedAt
  apiToken                String?
  formSlug                String?
  projectId               String?
  x                       Int?
  y                       Int?
  integrationId           String?
  routeId                 String?
  type                    TextResponseType?
  deletedAt               DateTime?
  scale                   Int?
  slug                    String?
  targetActions           Action[]             @relation("Block")
  action                  Action?
  coverBlock              Block?               @relation("CoverBlock", fields: [coverBlockId], references: [id])
  coverBlockParent        Block?               @relation("CoverBlock")
  journey                 Journey              @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  nextBlock               Block?               @relation("NextBlock", fields: [nextBlockId], references: [id])
  nextBlockParents        Block[]              @relation("NextBlock")
  parentBlock             Block?               @relation("ParentBlock", fields: [parentBlockId], references: [id], onDelete: Cascade)
  childBlocks             Block[]              @relation("ParentBlock")
  posterBlock             Block?               @relation("PosterBlock", fields: [posterBlockId], references: [id])
  posterBlockParent       Block?               @relation("PosterBlock")
  creatorImageBlockParent Journey?             @relation("CreatorImageBlock")
  logoImageBlockParent    Journey?             @relation("LogoImageBlock")
  menuStepBlockParent     Journey?             @relation("MenuStepBlock")
  primaryImageBlockParent Journey?             @relation("PrimaryImageBlock")

  @@unique([slug, journeyId])
  @@index([journeyId])
  @@index([parentOrder])
  @@index([typename])
}

model Action {
  parentBlockId String   @id
  gtmEventName  String?
  blockId       String?
  journeyId     String?
  url           String?
  target        String?
  email         String?
  updatedAt     DateTime @default(now()) @updatedAt
  block         Block?   @relation("Block", fields: [blockId], references: [id])
  journey       Journey? @relation(fields: [journeyId], references: [id])
  parentBlock   Block    @relation(fields: [parentBlockId], references: [id], onDelete: Cascade)

  @@index([parentBlockId])
}

model JourneysEmailPreference {
  email                String  @id @unique
  unsubscribeAll       Boolean @default(false)
  accountNotifications Boolean @default(true)

  @@index([email])
}

model JourneyNotification {
  id                      String       @id @default(uuid())
  userId                  String
  journeyId               String
  userTeamId              String?
  userJourneyId           String?      @unique
  visitorInteractionEmail Boolean      @default(false)
  journey                 Journey      @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  userJourney             UserJourney? @relation(fields: [userJourneyId], references: [id], onDelete: Cascade)
  userTeam                UserTeam?    @relation(fields: [userTeamId], references: [id], onDelete: Cascade)

  @@unique([userId, journeyId])
  @@unique([userId, journeyId, userTeamId])
  @@index([userId])
  @@index([journeyId])
}

model CustomDomain {
  id                   String             @id @default(uuid())
  teamId               String
  name                 String             @unique
  apexName             String
  journeyCollectionId  String?
  routeAllTeamJourneys Boolean            @default(true)
  journeyCollection    JourneyCollection? @relation(fields: [journeyCollectionId], references: [id])
  team                 Team               @relation(fields: [teamId], references: [id])
}

model JourneyCollection {
  id                        String                      @id @default(uuid())
  teamId                    String
  title                     String?
  customDomains             CustomDomain[]
  team                      Team                        @relation(fields: [teamId], references: [id])
  journeyCollectionJourneys JourneyCollectionJourneys[]
}

model JourneyCollectionJourneys {
  id                  String            @id @default(uuid())
  journeyCollectionId String
  journeyId           String
  order               Int
  journeyCollection   JourneyCollection @relation(fields: [journeyCollectionId], references: [id], onDelete: Cascade)
  journey             Journey           @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@unique([journeyCollectionId, journeyId])
  @@unique([journeyCollectionId, order])
}

enum MessagePlatform {
  facebook
  telegram
  whatsApp
  instagram
  viber
  vk
  snapchat
  skype
  line
  tikTok
  custom
  globe2
  globe3
  messageText1
  messageText2
  send1
  send2
  messageChat2
  messageCircle
  messageNotifyCircle
  messageNotifySquare
  messageSquare
  mail1
  linkExternal
  home3
  home4
  helpCircleContained
  helpSquareContained
  shieldCheck
  menu1
  checkBroken
  checkContained
  settings
}

enum VisitorStatus {
  star
  prohibited
  checkMarkSymbol
  thumbsUp
  thumbsDown
  partyPopper
  warning
  robotFace
  redExclamationMark
  redQuestionMark
}

enum DeviceType {
  console
  mobile
  tablet
  smarttv
  wearable
  embedded
}

enum ButtonAction {
  NavigateToBlockAction
  LinkAction
  EmailAction
}

enum VideoBlockSource {
  internal
  youTube
  cloudflare
}

enum IntegrationType {
  growthSpaces
}

enum TextResponseType {
  freeForm
  name
  email
}

enum UserTeamRole {
  manager
  member
}

enum UserJourneyRole {
  inviteRequested
  editor
  owner
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

enum JourneyMenuButtonIcon {
  menu1
  equals
  home3
  home4
  more
  ellipsis
  grid1
  chevronDown
}

enum Role {
  publisher
}

enum VideoBlockObjectFit {
  fill
  fit
  zoomed
}
