generator client {
    provider = "prisma-client-js"
    output   = env("PRISMA_LOCATION_NEXUS")
}

datasource db {
    provider = "postgresql"
    url      = env("PG_DATABASE_URL_NEXUS")
}

model Nexus {
    id          String      @id @default(uuid())
    name        String
    description String?
    createdAt   DateTime    @default(now())
    deletedAt   DateTime?
    status      NexusStatus @default(published)
    userNexuses UserNexus[]
    channels    Channel[]
    resources   Resource[]
    batches     Batch[]
}

enum NexusStatus {
    deleted
    published
}

model UserNexus {
    id      String @id @default(uuid())
    userId  String
    nexusId String
    nexus   Nexus  @relation(fields: [nexusId], references: [id])
    role    String
}

model Channel {
    id                     String                   @id @default(uuid())
    nexusId                String
    name                   String
    platform               String
    connected              Boolean                  @default(false)
    nexus                  Nexus                    @relation(fields: [nexusId], references: [id])
    youtube                ChannelYoutube?
    status                 ChannelStatus            @default(published)
    createdAt              DateTime                 @default(now())
    deletedAt              DateTime?
    resourceYoutubeChannel ResourceYoutubeChannel[]
}

enum ChannelStatus {
    deleted
    published
}

model ChannelYoutube {
    id           String  @id @default(uuid())
    channelId    String  @unique
    channel      Channel @relation(fields: [channelId], references: [id])
    title        String
    description  String
    youtubeId    String
    imageUrl     String
    refreshToken String
}

model Resource {
    id                     String                        @id @default(uuid())
    nexusId                String
    name                   String
    nexus                  Nexus                         @relation(fields: [nexusId], references: [id])
    status                 ResourceStatus                @default(published)
    createdAt              DateTime                      @default(now())
    updatedAt              DateTime                      @updatedAt
    deletedAt              DateTime?
    category               String?
    spokenLanguage         String?
    customThumbnail        String?
    privacy                PrivacyStatus?
    sourceType             SourceType
    localizations          ResourceLocalization[]
    googleDrive            GoogleDriveResource?
    thumbnailGoogleDrive   ThumbnailGoogleDriveResource?
    resourceYoutubeChannel ResourceYoutubeChannel[]
    notifySubscribers      String?
    playlistId             String?
    isMadeForKids          String?
    mediaComponentId       String?
}

model ResourceYoutubeChannel {
    id         String   @id @default(uuid())
    resourceId String
    channelId  String
    youtubeId  String
    resource   Resource @relation(fields: [resourceId], references: [id])
    channel    Channel  @relation(fields: [channelId], references: [id])
}

model GoogleDriveResource {
    id           String   @id @default(uuid())
    resourceId   String   @unique
    driveId      String
    cloudFlareId String   @default("")
    mimeType     String
    refreshToken String
    resource     Resource @relation(fields: [resourceId], references: [id])
}

model ThumbnailGoogleDriveResource {
    id           String   @id @default(uuid())
    resourceId   String   @unique
    driveId      String
    cloudFlareId String   @default("")
    mimeType     String
    refreshToken String
    resource     Resource @relation(fields: [resourceId], references: [id])
}

model ResourceLocalization {
    id                    String                 @id @default(uuid())
    resourceId            String
    title                 String?
    description           String?
    keywords              String?
    captionFile           String?
    audioTrackFile        String?
    language              String
    videoId               String?
    resource              Resource               @relation(fields: [resourceId], references: [id])
    localizedResourceFile LocalizedResourceFile?
}

model LocalizedResourceFile {
    id                      String               @id @default(uuid())
    localizationId          String               @unique
    captionDriveId          String
    captionFileCloudFlareId String               @default("")
    audioDriveId            String
    audioFileCloudFlareId   String               @default("")
    captionMimeType         String
    audioMimeType           String
    refreshToken            String?
    localization            ResourceLocalization @relation(fields: [localizationId], references: [id])
}

enum ResourceStatus {
    deleted
    published
    processing
    error
    uploaded
}

enum SourceType {
    googleDrive
    template
    archlight
    other
}

enum PrivacyStatus {
    public
    unlisted
    private
}

model GoogleAccessToken {
    id           String @id @default(uuid())
    refreshToken String
}

model Batch {
    id             String      @id @default(uuid())
    nexusId        String
    name           String
    status         BatchStatus @default(pending)
    totalTasks     Int         @default(0)
    completedTasks Int         @default(0)
    failedTasks    Int         @default(0)
    progress       Float       @default(0)
    nexus          Nexus       @relation(fields: [nexusId], references: [id])
    tasks          BatchTask[]
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
}

enum BatchStatus {
    pending
    running
    completed
    failed
    cancelled
    paused
    error
    warning
    scheduled
}

model BatchTask {
    id         String        @id @default(uuid())
    batchId    String
    type       BatchTaskType
    status     TaskStatus
    progress   Float         @default(0)
    resourceId String
    metadata   Json?
    error      String?
    batch      Batch         @relation(fields: [batchId], references: [id])
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
}

enum BatchTaskType {
    video_upload
    caption_processing
    localization
}

enum TaskStatus {
    pending
    processing
    completed
    failed
}
