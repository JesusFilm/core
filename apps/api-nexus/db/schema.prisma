generator client {
    provider = "prisma-client-js"
    output   = env("PRISMA_LOCATION")
}

datasource db {
    provider = "postgresql"
    url      = env("PG_DATABASE_URL")
}

model Nexus {
    id          String      @id @default(uuid())
    name        String
    description String?
    createdAt   DateTime    @default(now())
    deletedAt   DateTime?
    status      NexusStatus @default(published)
    userNexuses UserNexus[]
    channels    Channel[]
    resources   Resource[]
}

enum NexusStatus {
    deleted
    published
}

model UserNexus {
    id      String @id @default(uuid())
    userId  String
    nexusId String
    nexus   Nexus  @relation(fields: [nexusId], references: [id])
    role    String
}

model Channel {
    id        String          @id @default(uuid())
    nexusId   String
    name      String
    platform  String
    connected Boolean         @default(false)
    nexus     Nexus           @relation(fields: [nexusId], references: [id])
    youtube   ChannelYoutube?
    status    NexusStatus     @default(published)
    createdAt DateTime        @default(now())
    deletedAt DateTime?
}

model ChannelYoutube {
    id           String  @id @default(uuid())
    channelId    String  @unique
    channel      Channel @relation(fields: [channelId], references: [id])
    title        String
    description  String
    youtubeId    String
    imageUrl     String
    refreshToken String
}

model Resource {
    id               String               @id @default(uuid())
    nexusId          String
    name             String
    nexus            Nexus                @relation(fields: [nexusId], references: [id])
    googleDrive      GoogleDriveResource?
    status           ResourceStatus       @default(published)
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
    deletedAt        DateTime?
    templateResource TemplateResource?
    sourceType       SourceType
}

enum ResourceStatus {
    deleted
    published
    processing
    error
    uploaded
}

enum SourceType {
    googleDrive
    template
    archlight
    other
}

model GoogleDriveResource {
    id           String   @id @default(uuid())
    resourceId   String   @unique
    title        String
    driveId      String
    mimeType     String
    refreshToken String
    resource     Resource @relation(fields: [resourceId], references: [id])
}

model TemplateResource {
    id                String        @id @default(uuid())
    resourceId        String        @unique
    filename          String
    channel           String?
    titles            Title[]
    descriptions      Description[]
    keywords          Keyword[]
    spokenLanguage    String
    captionFile       String?
    captionLanguage   String?
    category          String?
    privacyStatus     PrivacyStatus
    notifySubscribers Boolean       @default(true)
    customThumbnail   String?
    playlistId        String?
    isMadeForKids     Boolean       @default(false)
    resource          Resource      @relation(fields: [resourceId], references: [id])
}

model Title {
    id                 String           @id @default(uuid())
    templateResourceId String
    languageEntries    LanguageEntry[]
    templateResource   TemplateResource @relation(fields: [templateResourceId], references: [id])
}

model Description {
    id                 String           @id @default(uuid())
    templateResourceId String
    languageEntries    LanguageEntry[]
    templateResource   TemplateResource @relation(fields: [templateResourceId], references: [id])
}

model Keyword {
    id                 String           @id @default(uuid())
    templateResourceId String
    languageEntries    LanguageEntry[]
    templateResource   TemplateResource @relation(fields: [templateResourceId], references: [id])
}

model LanguageEntry {
    id            String       @id @default(uuid())
    text          String
    languageCode  String
    Title         Title?       @relation(fields: [titleId], references: [id])
    titleId       String?
    Description   Description? @relation(fields: [descriptionId], references: [id])
    descriptionId String?
    Keyword       Keyword?     @relation(fields: [keywordId], references: [id])
    keywordId     String?
}

enum PrivacyStatus {
    public
    unlisted
    private
}
