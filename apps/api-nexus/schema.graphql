directive @key(fields: _FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @external(reason: String) on OBJECT | FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @extends on OBJECT | INTERFACE

scalar DateTime

scalar Object

type Batch
  @key(fields: "id")
{
  id: ID!
  nexusId: String!
  name: String!
  status: BatchStatus!
  tasks: [BatchTask!]!
  progress: Float
  createdAt: DateTime!
}

enum BatchStatus {
  pending
  running
  completed
  failed
  cancelled
  paused
  error
  warning
  scheduled
}

type BatchTask
  @key(fields: "id")
{
  id: ID!
  batchId: String!
  type: BatchTaskType!
  status: TaskStatus!
  progress: Float
  metadata: Object
  error: String
}

enum BatchTaskType {
  video_upload
  caption_processing
  localization
}

enum TaskStatus {
  pending
  processing
  completed
  failed
}

input BatchFilter {
  ids: [ID!]
  name: String
  nexusId: String
  status: BatchStatus
  limit: Int
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

extend type Query {
  batches(where: BatchFilter): [Batch!]
  batch(id: ID!): Batch!
  channels(where: ChannelFilter): [Channel!]
  channel(id: ID!): Channel!
  nexuses(where: NexusFilter): [Nexus!]!
  nexus(id: ID!): Nexus!
  resources(where: ResourceFilter): [Resource!]
  resource(id: ID!): Resource!
}

type Channel
  @key(fields: "id")
{
  id: ID!
  nexusId: String!
  name: String!
  platform: String
  connected: Boolean
  youtube: ChannelYoutube
  status: ChannelStatus!
  createdAt: DateTime!
}

enum ChannelStatus {
  deleted
  published
}

type ChannelYoutube {
  id: ID!
  channelId: String
  channel: Channel
  title: String
  description: String
  youtubeId: String
  imageUrl: String
  refreshToken: String
}

input ChannelCreateInput {
  nexusId: String!
  name: String!
  platform: String!
}

input ChannelUpdateInput {
  name: String
  nexusId: String
  platform: String
}

input ChannelFilter {
  ids: [ID!]
  name: String
  nexusId: String
  limit: Int
  connected: Boolean
  status: ChannelStatus
}

input ConnectYoutubeChannelInput {
  channelId: String!
  authCode: String!
  redirectUri: String!
}

extend type Mutation {
  channelCreate(input: ChannelCreateInput!): Channel!
  channelUpdate(id: ID!, input: ChannelUpdateInput!): Channel!
  channelDelete(id: ID!): Channel!
  connectYoutubeChannel(input: ConnectYoutubeChannelInput!): Channel!
  nexusCreate(input: NexusCreateInput!): Nexus!
  nexusUpdate(id: ID!, input: NexusUpdateInput!): Nexus!
  nexusDelete(id: ID!): Boolean!
  resourceCreate(input: ResourceCreateInput!): Resource!
  resourceUpdate(id: ID!, input: ResourceUpdateInput!): Resource!
  resourceDelete(id: ID!): Resource!
  resourceFromGoogleDrive(input: ResourceFromGoogleDriveInput!): [Resource!]
  resourceFromTemplate(nexusId: String!, tokenId: String!, spreadsheetId: String!, drivefolderId: String!): [Resource!]
  getGoogleAccessToken(input: GoogleAuthInput!): GoogleAuthResponse!
  uploadToYoutube(channelId: String!, resourceId: String!): Boolean
  resourceBatchJob(input: BatchJobInput!): String
}

type Nexus
  @key(fields: "id")
{
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  deletedAt: DateTime
  status: NexusStatus!
}

enum NexusStatus {
  deleted
  published
}

input NexusCreateInput {
  name: String!
  description: String
}

input NexusUpdateInput {
  name: String
  description: String
}

input NexusFilter {
  ids: [ID!]
  name: String
  description: String
  createdAt: DateTime
  limit: Int
  orderByRecent: Boolean
}

scalar Upload

type Resource
  @key(fields: "id")
{
  id: ID!
  nexusId: String!
  nexus: Nexus!
  name: String!
  status: ResourceStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  googleDriveLink: String
  category: String!
  privacy: PrivacyStatus!
  sourceType: SourceType!
  localizations: [ResourceLocalization]!
}

type ResourceLocalization
  @key(fields: "id")
{
  id: ID!
  resourceId: String!
  title: String!
  description: String!
  keywords: String!
  language: String!
}

type GoogleAuthResponse {
  id: ID!
  accessToken: String!
}

enum PrivacyStatus {
  public
  unlisted
  private
}

enum SourceType {
  googleDrive
  template
  archlight
  other
}

enum ResourceStatus {
  deleted
  published
  processing
  error
  uploaded
}

input ResourceCreateInput {
  nexusId: String!
  name: String!
}

input ResourceUpdateInput {
  name: String
}

input ResourceFromGoogleDriveInput {
  fileIds: [String!]!
  authCode: String!
  nexusId: String!
}

input ResourceFilter {
  ids: [ID!]
  name: String
  nexusId: String
  status: ResourceStatus
  limit: Int
}

input AddResourceFromGoogleDriveInput {
  accessToken: String!
  fileId: String!
  nexusId: String!
}

input ResourceFromSpreadsheetInput {
  file: Upload
  nexusId: String!
}

input GoogleAuthInput {
  authCode: String!
  url: String!
}

input BatchJobBatch {
  id: ID!
  batchName: String!
}

input BatchJobResource {
  resource: ID!
  channel: ID!
}

input BatchJobInput {
  batch: BatchJobBatch!
  resources: [BatchJobResource]!
}

scalar _FieldSet

scalar _Any

type _Service {
  sdl: String
}

union _Entity = Batch | BatchTask | Channel | Nexus | Resource | ResourceLocalization
