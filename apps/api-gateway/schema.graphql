
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  
{
  query: Query
  mutation: Mutation
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  API_ANALYTICS @join__graph(name: "api-analytics", url: "http://127.0.0.1:4008/graphql") 
  API_JOURNEYS @join__graph(name: "api-journeys", url: "http://127.0.0.1:4001/graphql") 
  API_JOURNEYS_MODERN @join__graph(name: "api-journeys-modern", url: "http://127.0.0.1:4004/graphql") 
  API_LANGUAGES @join__graph(name: "api-languages", url: "http://127.0.0.1:4003/graphql") 
  API_MEDIA @join__graph(name: "api-media", url: "http://127.0.0.1:4005/graphql") 
  API_USERS @join__graph(name: "api-users", url: "http://127.0.0.1:4002/graphql") 
}

scalar DateTime @join__type(graph: API_JOURNEYS) 

scalar Json @join__type(graph: API_JOURNEYS) 

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date @join__type(graph: API_MEDIA) 

type Error @join__type(graph: API_ANALYTICS)  {
  message: String!
}

type Mutation @join__type(graph: API_ANALYTICS)  @join__type(graph: API_JOURNEYS)  @join__type(graph: API_MEDIA)  @join__type(graph: API_USERS)  {
  siteCreate(input: SiteCreateInput!) : MutationSiteCreateResult! @join__field(graph: API_ANALYTICS) 
  blockDeleteAction(id: ID!, """
  drop this parameter after merging teams
  """
  journeyId: ID) : Block! @join__field(graph: API_JOURNEYS) 
  blockUpdateNavigateToBlockAction(
    id: ID!
    input: NavigateToBlockActionInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): NavigateToBlockAction! @join__field(graph: API_JOURNEYS) 
  blockUpdateLinkAction(
    id: ID!
    input: LinkActionInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): LinkAction! @join__field(graph: API_JOURNEYS) 
  blockUpdateEmailAction(
    id: ID!
    input: EmailActionInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): EmailAction! @join__field(graph: API_JOURNEYS) 
  blockUpdateAction(id: ID!, input: BlockUpdateActionInput) : Action! @join__field(graph: API_JOURNEYS) 
  """
  blockDelete returns the updated sibling blocks on successful delete
  """
  blockDelete(
    id: ID!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
    """
    drop this parameter after merging teams
    """
    parentBlockId: ID
  ): [Block!]! @join__field(graph: API_JOURNEYS) 
  """
  blockDuplicate returns the updated block, it's children and sibling blocks on successful duplicate
  """
  blockDuplicate(
    id: ID!
    """
    parentOrder defines the position to add the duplicated block. Negative values defines the position from the end of the array. Positions greater than the length of the array or null parentOrder will add duplicate at end of the array.
    """
    parentOrder: Int
    """
    idMap is used to set custom ids for the duplicated block and it's descendants.
    """
    idMap: [BlockDuplicateIdMap!]
    """
    drop this parameter after merging teams
    """
    journeyId: ID
    """
    x is used to position a step block block horizontally in the journey flow diagram on
    the editor.
    """
    x: Int
    """
    y is used to position a step block block vertically in the journey flow diagram on
    the editor.
    """
    y: Int
  ): [Block!]! @join__field(graph: API_JOURNEYS) 
  blockOrderUpdate(
    id: ID!
    parentOrder: Int!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): [Block!]! @join__field(graph: API_JOURNEYS) 
  """
  blockRestore is used for redo/undo
  """
  blockRestore(id: ID!) : [Block!]! @join__field(graph: API_JOURNEYS) 
  buttonBlockCreate(input: ButtonBlockCreateInput!) : ButtonBlock! @join__field(graph: API_JOURNEYS) 
  buttonBlockUpdate(
    id: ID!
    input: ButtonBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): ButtonBlock @join__field(graph: API_JOURNEYS) 
  cardBlockCreate(input: CardBlockCreateInput!) : CardBlock! @join__field(graph: API_JOURNEYS) 
  cardBlockUpdate(
    id: ID!
    input: CardBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): CardBlock! @join__field(graph: API_JOURNEYS) 
  iconBlockCreate(input: IconBlockCreateInput!) : IconBlock! @join__field(graph: API_JOURNEYS) 
  iconBlockUpdate(
    id: ID!
    input: IconBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): IconBlock! @join__field(graph: API_JOURNEYS) 
  imageBlockCreate(input: ImageBlockCreateInput!) : ImageBlock! @join__field(graph: API_JOURNEYS) 
  imageBlockUpdate(
    id: ID!
    input: ImageBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): ImageBlock! @join__field(graph: API_JOURNEYS) 
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!) : RadioOptionBlock! @join__field(graph: API_JOURNEYS) 
  radioOptionBlockUpdate(
    id: ID!
    input: RadioOptionBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): RadioOptionBlock! @join__field(graph: API_JOURNEYS) 
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!) : RadioQuestionBlock! @join__field(graph: API_JOURNEYS) 
  radioQuestionBlockUpdate(
    id: ID!
    parentBlockId: ID!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): RadioQuestionBlock! @join__field(graph: API_JOURNEYS) 
  signUpBlockCreate(input: SignUpBlockCreateInput!) : SignUpBlock! @join__field(graph: API_JOURNEYS) 
  signUpBlockUpdate(
    id: ID!
    input: SignUpBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): SignUpBlock @join__field(graph: API_JOURNEYS) 
  stepBlockCreate(input: StepBlockCreateInput!) : StepBlock! @join__field(graph: API_JOURNEYS) 
  stepBlockUpdate(
    id: ID!
    input: StepBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): StepBlock! @join__field(graph: API_JOURNEYS) 
  stepBlockPositionUpdate(input: [StepBlockPositionUpdateInput!]!) : [StepBlock!]! @join__field(graph: API_JOURNEYS) 
  textResponseBlockCreate(input: TextResponseBlockCreateInput!) : TextResponseBlock! @join__field(graph: API_JOURNEYS) 
  textResponseBlockUpdate(
    id: ID!
    input: TextResponseBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): TextResponseBlock @join__field(graph: API_JOURNEYS) 
  typographyBlockCreate(input: TypographyBlockCreateInput!) : TypographyBlock! @join__field(graph: API_JOURNEYS) 
  typographyBlockUpdate(
    id: ID!
    input: TypographyBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): TypographyBlock! @join__field(graph: API_JOURNEYS) 
  videoBlockCreate(input: VideoBlockCreateInput!) : VideoBlock! @join__field(graph: API_JOURNEYS) 
  videoBlockUpdate(
    id: ID!
    input: VideoBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): VideoBlock! @join__field(graph: API_JOURNEYS) 
  chatButtonCreate(journeyId: ID!, input: ChatButtonCreateInput) : ChatButton! @join__field(graph: API_JOURNEYS) 
  chatButtonUpdate(id: ID!, journeyId: ID!, input: ChatButtonUpdateInput!) : ChatButton! @join__field(graph: API_JOURNEYS) 
  chatButtonRemove(id: ID!) : ChatButton! @join__field(graph: API_JOURNEYS) 
  customDomainCreate(input: CustomDomainCreateInput!) : CustomDomain! @join__field(graph: API_JOURNEYS) 
  customDomainUpdate(id: ID!, input: CustomDomainUpdateInput!) : CustomDomain! @join__field(graph: API_JOURNEYS) 
  customDomainDelete(id: ID!) : CustomDomain! @join__field(graph: API_JOURNEYS) 
  customDomainCheck(id: ID!) : CustomDomainCheck! @join__field(graph: API_JOURNEYS) 
  buttonClickEventCreate(input: ButtonClickEventCreateInput!) : ButtonClickEvent! @join__field(graph: API_JOURNEYS) 
  chatOpenEventCreate(input: ChatOpenEventCreateInput!) : ChatOpenEvent! @join__field(graph: API_JOURNEYS) 
  journeyViewEventCreate(input: JourneyViewEventCreateInput!) : JourneyViewEvent! @join__field(graph: API_JOURNEYS) 
  radioQuestionSubmissionEventCreate(input: RadioQuestionSubmissionEventCreateInput!) : RadioQuestionSubmissionEvent! @join__field(graph: API_JOURNEYS) 
  signUpSubmissionEventCreate(input: SignUpSubmissionEventCreateInput!) : SignUpSubmissionEvent! @join__field(graph: API_JOURNEYS) 
  stepViewEventCreate(input: StepViewEventCreateInput!) : StepViewEvent! @join__field(graph: API_JOURNEYS) 
  stepNextEventCreate(input: StepNextEventCreateInput!) : StepNextEvent! @join__field(graph: API_JOURNEYS) 
  stepPreviousEventCreate(input: StepPreviousEventCreateInput!) : StepPreviousEvent! @join__field(graph: API_JOURNEYS) 
  textResponseSubmissionEventCreate(input: TextResponseSubmissionEventCreateInput!) : TextResponseSubmissionEvent! @join__field(graph: API_JOURNEYS) 
  videoStartEventCreate(input: VideoStartEventCreateInput!) : VideoStartEvent! @join__field(graph: API_JOURNEYS) 
  videoPlayEventCreate(input: VideoPlayEventCreateInput!) : VideoPlayEvent! @join__field(graph: API_JOURNEYS) 
  videoPauseEventCreate(input: VideoPauseEventCreateInput!) : VideoPauseEvent! @join__field(graph: API_JOURNEYS) 
  videoCompleteEventCreate(input: VideoCompleteEventCreateInput!) : VideoCompleteEvent! @join__field(graph: API_JOURNEYS) 
  videoExpandEventCreate(input: VideoExpandEventCreateInput!) : VideoExpandEvent! @join__field(graph: API_JOURNEYS) 
  videoCollapseEventCreate(input: VideoCollapseEventCreateInput!) : VideoCollapseEvent! @join__field(graph: API_JOURNEYS) 
  videoProgressEventCreate(input: VideoProgressEventCreateInput!) : VideoProgressEvent! @join__field(graph: API_JOURNEYS) 
  hostCreate(teamId: ID!, input: HostCreateInput!) : Host! @join__field(graph: API_JOURNEYS) 
  hostUpdate(id: ID!, teamId: ID!, input: HostUpdateInput) : Host! @join__field(graph: API_JOURNEYS) 
  hostDelete(id: ID!, teamId: ID!) : Host! @join__field(graph: API_JOURNEYS) 
  integrationGrowthSpacesCreate(input: IntegrationGrowthSpacesCreateInput!) : IntegrationGrowthSpaces! @join__field(graph: API_JOURNEYS) 
  integrationGrowthSpacesUpdate(id: ID!, input: IntegrationGrowthSpacesUpdateInput!) : IntegrationGrowthSpaces! @join__field(graph: API_JOURNEYS) 
  integrationDelete(id: ID!) : Integration! @join__field(graph: API_JOURNEYS) 
  journeyCreate(input: JourneyCreateInput!, teamId: ID!) : Journey! @join__field(graph: API_JOURNEYS) 
  journeyDuplicate(id: ID!, teamId: ID!) : Journey! @join__field(graph: API_JOURNEYS) 
  journeyUpdate(id: ID!, input: JourneyUpdateInput!) : Journey! @join__field(graph: API_JOURNEYS) 
  """
  Sets journey status to published
  """
  journeyPublish(id: ID!) : Journey @join__field(graph: API_JOURNEYS) 
  """
  Sets journey status to featured
  """
  journeyFeature(id: ID!, feature: Boolean!) : Journey @join__field(graph: API_JOURNEYS) 
  """
  Sets journeys statuses to archived
  """
  journeysArchive(ids: [ID!]!) : [Journey] @join__field(graph: API_JOURNEYS) 
  """
  Sets journeys statuses to deleted
  """
  journeysDelete(ids: [ID!]!) : [Journey] @join__field(graph: API_JOURNEYS) 
  """
  Sets journeys statuses to trashed
  """
  journeysTrash(ids: [ID!]!) : [Journey] @join__field(graph: API_JOURNEYS) 
  """
  Sets journeys statuses to last active status
  """
  journeysRestore(ids: [ID!]!) : [Journey] @join__field(graph: API_JOURNEYS) 
  """
  Updates template
  """
  journeyTemplate(id: ID!, input: JourneyTemplateInput!) : Journey! @join__field(graph: API_JOURNEYS) 
  journeyCollectionCreate(input: JourneyCollectionCreateInput!) : JourneyCollection! @join__field(graph: API_JOURNEYS) 
  journeyCollectionUpdate(id: ID!, input: JourneyCollectionUpdateInput!) : JourneyCollection! @join__field(graph: API_JOURNEYS) 
  journeyCollectionDelete(id: ID!) : JourneyCollection! @join__field(graph: API_JOURNEYS) 
  journeyNotificationUpdate(input: JourneyNotificationUpdateInput!) : JourneyNotification! @join__field(graph: API_JOURNEYS) 
  journeyProfileCreate: JourneyProfile! @join__field(graph: API_JOURNEYS) 
  journeyProfileUpdate(input: JourneyProfileUpdateInput!) : JourneyProfile! @join__field(graph: API_JOURNEYS) 
  updateJourneysEmailPreference(input: JourneysEmailPreferenceUpdateInput!) : JourneysEmailPreference @join__field(graph: API_JOURNEYS) 
  teamCreate(input: TeamCreateInput) : Team! @join__field(graph: API_JOURNEYS) 
  teamUpdate(id: ID!, input: TeamUpdateInput) : Team! @join__field(graph: API_JOURNEYS) 
  userInviteCreate(journeyId: ID!, input: UserInviteCreateInput) : UserInvite @join__field(graph: API_JOURNEYS) 
  userInviteRemove(id: ID!, journeyId: ID!) : UserInvite! @join__field(graph: API_JOURNEYS) 
  userInviteAcceptAll: [UserInvite!]! @join__field(graph: API_JOURNEYS) 
  userJourneyApprove(id: ID!) : UserJourney! @join__field(graph: API_JOURNEYS) 
  userJourneyPromote(id: ID!) : UserJourney! @join__field(graph: API_JOURNEYS) 
  userJourneyRemove(id: ID!) : UserJourney! @join__field(graph: API_JOURNEYS) 
  """
  Removes all userJourneys associated with a journeyId
  """
  userJourneyRemoveAll(id: ID!) : [UserJourney!]! @join__field(graph: API_JOURNEYS) 
  userJourneyRequest(
    journeyId: ID!
    """
    drop this parameter after merging teams
    """
    idType: IdType
  ): UserJourney! @join__field(graph: API_JOURNEYS) 
  userJourneyOpen(id: ID!) : UserJourney @join__field(graph: API_JOURNEYS) 
  userTeamUpdate(id: ID!, input: UserTeamUpdateInput) : UserTeam! @join__field(graph: API_JOURNEYS) 
  userTeamDelete(id: ID!) : UserTeam! @join__field(graph: API_JOURNEYS) 
  userTeamInviteCreate(teamId: ID!, input: UserTeamInviteCreateInput) : UserTeamInvite @join__field(graph: API_JOURNEYS) 
  userTeamInviteRemove(id: ID!) : UserTeamInvite! @join__field(graph: API_JOURNEYS) 
  userTeamInviteAcceptAll: [UserTeamInvite!]! @join__field(graph: API_JOURNEYS) 
  """
  Update a visitor
  """
  visitorUpdate(id: ID!, input: VisitorUpdateInput!) : Visitor! @join__field(graph: API_JOURNEYS) 
  """
  Allow current user to update specific allowable fields of their visitor record
  """
  visitorUpdateForCurrentUser(input: VisitorUpdateInput!) : Visitor! @join__field(graph: API_JOURNEYS) 
  createCloudflareUploadByFile(input: ImageInput) : CloudflareImage! @join__field(graph: API_MEDIA) 
  createCloudflareUploadByUrl(url: String!, input: ImageInput) : CloudflareImage! @join__field(graph: API_MEDIA) 
  createCloudflareImageFromPrompt(prompt: String!, input: ImageInput) : CloudflareImage! @join__field(graph: API_MEDIA) 
  deleteCloudflareImage(id: ID!) : Boolean! @join__field(graph: API_MEDIA) 
  cloudflareUploadComplete(id: ID!) : Boolean! @join__field(graph: API_MEDIA) 
  createCloudflareVideoUploadByFile(uploadLength: Int!, name: String!) : CloudflareVideo! @join__field(graph: API_MEDIA) 
  createCloudflareVideoUploadByUrl(url: String!) : CloudflareVideo! @join__field(graph: API_MEDIA) 
  deleteCloudflareVideo(id: ID!) : Boolean! @join__field(graph: API_MEDIA) 
  createImageBySegmindPrompt(prompt: String!, model: SegmindModel!) : CloudflareImage! @join__field(graph: API_MEDIA)  @deprecated(reason: "use createCloudflareImageFromPrompt") 
  triggerUnsplashDownload(url: String!) : Boolean! @join__field(graph: API_MEDIA) 
  videoCreate(input: VideoCreateInput!) : Video! @join__field(graph: API_MEDIA) 
  videoUpdate(input: VideoUpdateInput!) : Video! @join__field(graph: API_MEDIA) 
  videoDescriptionCreate(input: VideoTranslationCreateInput!) : VideoDescription! @join__field(graph: API_MEDIA) 
  videoDescriptionUpdate(input: VideoTranslationUpdateInput!) : VideoDescription! @join__field(graph: API_MEDIA) 
  videoDescriptionDelete(id: ID!) : VideoDescription! @join__field(graph: API_MEDIA) 
  videoImageAltCreate(input: VideoTranslationCreateInput!) : VideoImageAlt! @join__field(graph: API_MEDIA) 
  videoImageAltUpdate(input: VideoTranslationUpdateInput!) : VideoImageAlt! @join__field(graph: API_MEDIA) 
  videoImageAltDelete(id: ID!) : VideoImageAlt! @join__field(graph: API_MEDIA) 
  videoSnippetCreate(input: VideoTranslationCreateInput!) : VideoSnippet! @join__field(graph: API_MEDIA) 
  videoSnippetUpdate(input: VideoTranslationUpdateInput!) : VideoSnippet! @join__field(graph: API_MEDIA) 
  videoSnippetDelete(id: ID!) : VideoSnippet! @join__field(graph: API_MEDIA) 
  videoStudyQuestionCreate(input: VideoStudyQuestionCreateInput!) : VideoStudyQuestion! @join__field(graph: API_MEDIA) 
  videoStudyQuestionUpdate(input: VideoStudyQuestionUpdateInput!) : VideoStudyQuestion! @join__field(graph: API_MEDIA) 
  videoStudyQuestionDelete(id: ID!) : VideoStudyQuestion! @join__field(graph: API_MEDIA) 
  videoSubtitleCreate(input: VideoSubtitleCreateInput!) : VideoSubtitle! @join__field(graph: API_MEDIA) 
  videoSubtitleUpdate(input: VideoSubtitleUpdateInput!) : VideoSubtitle! @join__field(graph: API_MEDIA) 
  videoSubtitleDelete(id: ID!) : VideoSubtitle! @join__field(graph: API_MEDIA) 
  videoTitleCreate(input: VideoTranslationCreateInput!) : VideoTitle! @join__field(graph: API_MEDIA) 
  videoTitleUpdate(input: VideoTranslationUpdateInput!) : VideoTitle! @join__field(graph: API_MEDIA) 
  videoTitleDelete(id: ID!) : VideoTitle! @join__field(graph: API_MEDIA) 
  videoVariantCreate(input: VideoVariantCreateInput!) : VideoVariant! @join__field(graph: API_MEDIA) 
  videoVariantUpdate(input: VideoVariantUpdateInput!) : VideoVariant! @join__field(graph: API_MEDIA) 
  videoVariantDelete(id: ID!) : VideoVariant! @join__field(graph: API_MEDIA) 
  videoVariantDownloadCreate(input: VideoVariantDownloadCreateInput!) : VideoVariantDownload! @join__field(graph: API_MEDIA) 
  videoVariantDownloadUpdate(input: VideoVariantDownloadUpdateInput!) : VideoVariantDownload! @join__field(graph: API_MEDIA) 
  videoVariantDownloadDelete(id: ID!) : VideoVariantDownload! @join__field(graph: API_MEDIA) 
  userImpersonate(email: String!) : String @join__field(graph: API_USERS) 
  createVerificationRequest(input: CreateVerificationRequestInput) : Boolean @join__field(graph: API_USERS) 
  validateEmail(email: String!, token: String!) : User @join__field(graph: API_USERS) 
}

type MutationSiteCreateSuccess @join__type(graph: API_ANALYTICS)  {
  data: Site!
}

type Site @join__type(graph: API_ANALYTICS)  {
  id: String!
  domain: String!
  memberships: [SiteMembership!]!
  sharedLinks: [SiteSharedLink!]!
  goals: [SiteGoal!]!
}

type SiteGoal @join__type(graph: API_ANALYTICS)  {
  id: String!
  eventName: String
}

type SiteMembership @join__type(graph: API_ANALYTICS)  {
  id: String!
  role: String!
}

type SiteSharedLink @join__type(graph: API_ANALYTICS)  {
  id: String!
  slug: String!
}

type NavigateToBlockAction implements Action @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Action")  {
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  blockId: String!
}

type LinkAction implements Action @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Action")  {
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  url: String!
  target: String
}

type EmailAction implements Action @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Action")  {
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  email: String!
}

type Journey @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  blocks: [Block!]
  primaryImageBlock: ImageBlock
  creatorImageBlock: ImageBlock
  logoImageBlock: ImageBlock
  menuStepBlock: StepBlock
  chatButtons: [ChatButton!]!
  """
  private title for creators
  """
  title: String!
  language: Language!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  creatorDescription: String
  slug: String!
  archivedAt: DateTime
  deletedAt: DateTime
  publishedAt: DateTime
  trashedAt: DateTime
  featuredAt: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
  status: JourneyStatus!
  """
  title for seo and sharing
  """
  seoTitle: String
  seoDescription: String
  template: Boolean
  host: Host
  team: Team
  strategySlug: String
  tags: [Tag!]!
  journeyCollections: [JourneyCollection!]!
  """
  used in a plausible share link to embed report
  """
  plausibleToken: String
  website: Boolean
  showShareButton: Boolean
  showLikeButton: Boolean
  showDislikeButton: Boolean
  """
  public title for viewers
  """
  displayTitle: String
  showHosts: Boolean
  showChatButtons: Boolean
  showReactionButtons: Boolean
  showLogo: Boolean
  showMenu: Boolean
  showDisplayTitle: Boolean
  menuButtonIcon: JourneyMenuButtonIcon
  userJourneys: [UserJourney!]
}

type Query @join__type(graph: API_ANALYTICS)  @join__type(graph: API_JOURNEYS)  @join__type(graph: API_JOURNEYS_MODERN)  @join__type(graph: API_LANGUAGES)  @join__type(graph: API_MEDIA)  @join__type(graph: API_USERS)  {
  blocks(where: BlocksFilter) : [Block!]! @join__field(graph: API_JOURNEYS) 
  block(id: ID!) : Block! @join__field(graph: API_JOURNEYS) 
  customDomain(id: ID!) : CustomDomain! @join__field(graph: API_JOURNEYS) 
  customDomains(teamId: ID!) : [CustomDomain!]! @join__field(graph: API_JOURNEYS) 
  hosts(teamId: ID!) : [Host!]! @join__field(graph: API_JOURNEYS) 
  integrations(teamId: ID!) : [Integration!]! @join__field(graph: API_JOURNEYS) 
  """
  returns all journeys that match the provided filters
  If no team id is provided and template is not true then only returns journeys
  where the user is not a member of a team but is an editor or owner of the
  journey
  """
  adminJourneys(
    status: [JourneyStatus!]
    template: Boolean
    teamId: ID
    """
    Use Last Active Team Id from JourneyProfile (if null will error)
    """
    useLastActiveTeamId: Boolean
  ): [Journey!]! @join__field(graph: API_JOURNEYS) 
  adminJourneysReport(reportType: JourneysReportType!) : PowerBiEmbed @join__field(graph: API_JOURNEYS) 
  adminJourney(id: ID!, idType: IdType) : Journey! @join__field(graph: API_JOURNEYS) 
  journeys(where: JourneysFilter, options: JourneysQueryOptions) : [Journey!]! @join__field(graph: API_JOURNEYS) 
  journey(id: ID!, idType: IdType, options: JourneysQueryOptions) : Journey! @join__field(graph: API_JOURNEYS) 
  journeyCollection(id: ID!) : JourneyCollection! @join__field(graph: API_JOURNEYS) 
  journeyCollections(teamId: ID!) : [JourneyCollection]! @join__field(graph: API_JOURNEYS) 
  getJourneyProfile: JourneyProfile @join__field(graph: API_JOURNEYS) 
  """
  Get a list of Visitor Information by Journey
  """
  journeyVisitorsConnection(
    """
    Returns the elements in the list that match the specified filter.
    """
    filter: JourneyVisitorFilter!
    """
    Returns the first n elements from the list.
    """
    first: Int
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    """
    Specifies the sort field for the list.
    """
    sort: JourneyVisitorSort
  ): JourneyVisitorsConnection! @join__field(graph: API_JOURNEYS) 
  """
  Get a JourneyVisitor count by JourneyVisitorFilter
  """
  journeyVisitorCount(filter: JourneyVisitorFilter!) : Int! @join__field(graph: API_JOURNEYS) 
  journeysEmailPreference(email: String!) : JourneysEmailPreference @join__field(graph: API_JOURNEYS) 
  journeysPlausibleStatsRealtimeVisitors(id: ID!, idType: IdType) : Int! @join__field(graph: API_JOURNEYS) 
  journeysPlausibleStatsAggregate(where: PlausibleStatsAggregateFilter!, id: ID!, idType: IdType) : PlausibleStatsAggregateResponse! @join__field(graph: API_JOURNEYS) 
  """
  This endpoint allows you to break down your stats by some property.
  If you are familiar with SQL family databases, this endpoint corresponds to
  running `GROUP BY` on a certain property in your stats, then ordering by the
  count.
  Check out the [properties](https://plausible.io/docs/stats-api#properties)
  section for a reference of all the properties you can use in this query.
  This endpoint can be used to fetch data for `Top sources`, `Top pages`,
  `Top countries` and similar reports.
  Currently, it is only possible to break down on one property at a time.
  Using a list of properties with one query is not supported. So if you want
  a breakdown by both `event:page` and `visit:source` for example, you would
  have to make multiple queries (break down on one property and filter on
  another) and then manually/programmatically group the results together in one
  report. This also applies for breaking down by time periods. To get a daily
  breakdown for every page, you would have to break down on `event:page` and
  make multiple queries for each date.
  """
  journeysPlausibleStatsBreakdown(where: PlausibleStatsBreakdownFilter!, id: ID!, idType: IdType) : [PlausibleStatsResponse!]! @join__field(graph: API_JOURNEYS) 
  """
  This endpoint provides timeseries data over a certain time period.
  If you are familiar with the Plausible dashboard, this endpoint
  corresponds to the main visitor graph.
  """
  journeysPlausibleStatsTimeseries(where: PlausibleStatsTimeseriesFilter!, id: ID!, idType: IdType) : [PlausibleStatsResponse!]! @join__field(graph: API_JOURNEYS) 
  teams: [Team!]! @join__field(graph: API_JOURNEYS) 
  team(id: ID!) : Team! @join__field(graph: API_JOURNEYS) 
  userInvites(journeyId: ID!) : [UserInvite!] @join__field(graph: API_JOURNEYS) 
  getUserRole: UserRole @join__field(graph: API_JOURNEYS) 
  userTeams(teamId: ID!, where: UserTeamFilterInput) : [UserTeam!]! @join__field(graph: API_JOURNEYS) 
  userTeam(id: ID!) : UserTeam! @join__field(graph: API_JOURNEYS) 
  userTeamInvites(teamId: ID!) : [UserTeamInvite!]! @join__field(graph: API_JOURNEYS) 
  """
  A list of visitors that are connected with a specific team.
  """
  visitorsConnection(
    """
    Returns the visitor items related to a specific team.
    """
    teamId: String
    """
    Returns the first n elements from the list.
    """
    first: Int
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
  ): VisitorsConnection! @join__field(graph: API_JOURNEYS) 
  """
  Get a single visitor
  """
  visitor(id: ID!) : Visitor! @join__field(graph: API_JOURNEYS) 
  language(id: ID!, idType: LanguageIdType = databaseId) : Language @join__field(graph: API_LANGUAGES) 
  languages(offset: Int, limit: Int, where: LanguagesFilter) : [Language!]! @join__field(graph: API_LANGUAGES) 
  languagesCount(where: LanguagesFilter) : Int! @join__field(graph: API_LANGUAGES) 
  country(id: ID!) : Country @join__field(graph: API_LANGUAGES) 
  countries: [Country!]! @join__field(graph: API_LANGUAGES) 
  getMyCloudflareImages(offset: Int, limit: Int) : [CloudflareImage!]! @join__field(graph: API_MEDIA) 
  getMyCloudflareImage(id: ID!) : CloudflareImage! @join__field(graph: API_MEDIA) 
  getMyCloudflareVideos(offset: Int, limit: Int) : [CloudflareVideo!]! @join__field(graph: API_MEDIA) 
  getMyCloudflareVideo(id: ID!) : CloudflareVideo! @join__field(graph: API_MEDIA) 
  listUnsplashCollectionPhotos(
    collectionId: String!
    page: Int
    perPage: Int
    orientation: UnsplashPhotoOrientation
  ): [UnsplashPhoto!]! @join__field(graph: API_MEDIA) 
  searchUnsplashPhotos(
    query: String!
    page: Int
    perPage: Int
    orderBy: UnsplashOrderBy
    collections: [String!]
    contentFilter: UnsplashContentFilter
    color: UnsplashColor
    orientation: UnsplashPhotoOrientation
  ): UnsplashQueryResponse! @join__field(graph: API_MEDIA) 
  bibleBooks: [BibleBook!]! @join__field(graph: API_MEDIA) 
  bibleCitations: [BibleCitation!]! @join__field(graph: API_MEDIA) 
  keywords: [Keyword!]! @join__field(graph: API_MEDIA) 
  adminVideo(id: ID!, idType: IdType = databaseId) : Video! @join__field(graph: API_MEDIA) 
  adminVideos(where: VideosFilter, offset: Int, limit: Int) : [Video!]! @join__field(graph: API_MEDIA) 
  adminVideosCount(where: VideosFilter) : Int! @join__field(graph: API_MEDIA) 
  video(id: ID!, idType: IdType = databaseId) : Video! @join__field(graph: API_MEDIA) 
  videos(where: VideosFilter, offset: Int, limit: Int) : [Video!]! @join__field(graph: API_MEDIA) 
  videosCount(where: VideosFilter) : Int! @join__field(graph: API_MEDIA) 
  videoVariants: [VideoVariant!]! @join__field(graph: API_MEDIA) 
  tags: [Tag!]! @join__field(graph: API_MEDIA) 
  taxonomies(category: String, languageCodes: [String!]) : [Taxonomy!]! @join__field(graph: API_MEDIA) 
  me(input: MeInput) : User @join__field(graph: API_USERS) 
  user(id: ID!) : User @join__field(graph: API_USERS) 
  userByEmail(email: String!) : User @join__field(graph: API_USERS) 
}

type ButtonBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  action: Action
}

type CardBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  """
  backgroundColor should be a HEX color value e.g #FFFFFF for white.
  """
  backgroundColor: String
  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID
  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean!
  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode
  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName
}

type GridContainerBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  spacing: Int!
  direction: GridDirection!
  justifyContent: GridJustifyContent!
  alignItems: GridAlignItems!
}

type GridItemBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  xl: Int!
  lg: Int!
  sm: Int!
}

type IconBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  name: IconName
  color: IconColor
  size: IconSize
}

type ImageBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  src: String
  width: Int!
  height: Int!
  alt: String!
  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
  scale: Int
  focalTop: Int
  focalLeft: Int
}

type RadioOptionBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  action: Action
}

type RadioQuestionBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

type SignUpBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

type StepBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  """
  nextBlockId contains the preferred block to navigate to, users will have to
  manually set the next block they want to card to navigate to
  """
  nextBlockId: ID
  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  parentBlockId: ID
  parentOrder: Int
  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int
  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
  """
  Slug should be unique amongst all blocks
  (server will throw BAD_USER_INPUT error if not)
  If not required will use the current block id
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

type TextResponseBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  hint: String
  minRows: Int
  type: TextResponseType
  routeId: String
  integrationId: String
}

type TypographyBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

type Video @join__type(graph: API_JOURNEYS, key: "id primaryLanguageId")  @join__type(graph: API_MEDIA, key: "id primaryLanguageId")  {
  id: ID!
  primaryLanguageId: ID!
  bibleCitations: [BibleCitation!]! @join__field(graph: API_MEDIA) 
  keywords(languageId: ID) : [Keyword!]! @join__field(graph: API_MEDIA) 
  label: VideoLabel! @join__field(graph: API_MEDIA) 
  published: Boolean! @join__field(graph: API_MEDIA) 
  title(languageId: ID, primary: Boolean) : [VideoTitle!]! @join__field(graph: API_MEDIA) 
  snippet(languageId: ID, primary: Boolean) : [VideoSnippet!]! @join__field(graph: API_MEDIA) 
  description(languageId: ID, primary: Boolean) : [VideoDescription!]! @join__field(graph: API_MEDIA) 
  studyQuestions(languageId: ID, primary: Boolean) : [VideoStudyQuestion!]! @join__field(graph: API_MEDIA) 
  image: String @join__field(graph: API_MEDIA)  @deprecated(reason: "use images.mobileCinematicHigh") 
  imageAlt(languageId: ID, primary: Boolean) : [VideoImageAlt!]! @join__field(graph: API_MEDIA) 
  videoStill: String @join__field(graph: API_MEDIA)  @deprecated(reason: "use images.videoStill") 
  thumbnail: String @join__field(graph: API_MEDIA)  @deprecated(reason: "use images.thumbnail") 
  mobileCinematicHigh: String @join__field(graph: API_MEDIA)  @deprecated(reason: "use images.mobileCinematicHigh") 
  mobileCinematicLow: String @join__field(graph: API_MEDIA)  @deprecated(reason: "use images.mobileCinematicLow") 
  mobileCinematicVeryLow: String @join__field(graph: API_MEDIA)  @deprecated(reason: "use images.mobileCinematicVeryLow") 
  variantLanguages: [Language!]! @join__field(graph: API_MEDIA) 
  variantLanguagesCount: Int! @join__field(graph: API_MEDIA) 
  """
  slug is a permanent link to the video.
  """
  slug: String! @join__field(graph: API_MEDIA) 
  noIndex: Boolean @join__field(graph: API_MEDIA) 
  children: [Video!]! @join__field(graph: API_MEDIA) 
  """
  the number value of the amount of children on a video
  """
  childrenCount: Int! @join__field(graph: API_MEDIA) 
  parents: [Video!]! @join__field(graph: API_MEDIA) 
  variantLanguagesWithSlug: [LanguageWithSlug!]! @join__field(graph: API_MEDIA) 
  variants: [VideoVariant!]! @join__field(graph: API_MEDIA) 
  subtitles(languageId: ID, primary: Boolean, edition: String) : [VideoSubtitle!]! @join__field(graph: API_MEDIA) 
  variant(languageId: ID) : VideoVariant @join__field(graph: API_MEDIA) 
  images(aspectRatio: ImageAspectRatio) : [CloudflareImage!]! @join__field(graph: API_MEDIA) 
}

type VideoBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  """
  startAt dictates at which point of time the video should start playing
  """
  startAt: Int
  """
  endAt dictates at which point of time the video should end
  """
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean
  """
  internal source videos: video is only populated when videoID and
  videoVariantLanguageId are present
  """
  video: Video
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID
  """
  internal source: videoId, videoVariantLanguageId, and video present
  youTube source: videoId, title, description, and duration present
  """
  source: VideoBlockSource!
  """
  internal source videos: this field is not populated and instead only present
  in the video field.
  For other sources this is automatically populated.
  """
  title: String
  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  description: String
  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  image: String
  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  duration in seconds.
  """
  duration: Int
  """
  action that should be performed when the video ends
  """
  action: Action
  """
  how the video should display within the VideoBlock
  """
  objectFit: VideoBlockObjectFit
}

"""
VideoTriggerBlock is a block that indicates the video to navigate
to the next block at the designated time.
"""
type VideoTriggerBlock implements Block @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int!
  action: Action!
}

type ChatButton @join__type(graph: API_JOURNEYS)  {
  id: ID!
  link: String
  platform: MessagePlatform
}

type CustomDomain @join__type(graph: API_JOURNEYS)  {
  id: ID!
  team: Team!
  name: String!
  apexName: String!
  journeyCollection: JourneyCollection
  routeAllTeamJourneys: Boolean!
}

type CustomDomainCheck @join__type(graph: API_JOURNEYS)  {
  """
  Is the domain correctly configured in the DNS?
  If false, A Record and CNAME Record should be added by the user.
  """
  configured: Boolean!
  """
  Does the domain belong to the team?
  If false, verification and verificationResponse will be populated.
  """
  verified: Boolean!
  """
  Verification records to be added to the DNS to confirm ownership.
  """
  verification: [CustomDomainVerification!]
  """
  Reasoning as to why verification is required.
  """
  verificationResponse: CustomDomainVerificationResponse
}

type CustomDomainVerification @join__type(graph: API_JOURNEYS)  {
  type: String!
  domain: String!
  value: String!
  reason: String!
}

type CustomDomainVerificationResponse @join__type(graph: API_JOURNEYS)  {
  code: String!
  message: String!
}

type ButtonClickEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the buttonBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  label of the button
  """
  value: String
  """
  Action type of the button when it was clicked
  """
  action: ButtonAction
  """
  The label for each corresponding action, mapping below:
  NavigateToBlockAction - StepName (generated in client) of the StepBlock
  LinkAction - url of the link
  """
  actionValue: String
}

type ChatOpenEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the buttonBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  null for ChatOpenEvent
  """
  label: String
  """
  messagePlatform of the link used for chat
  """
  value: String
  """
  messagePlatform of the link used for chat (based on the messagePlatform in the value field)
  """
  messagePlatform: MessagePlatform
}

type Language @join__type(graph: API_JOURNEYS, key: "id")  @join__type(graph: API_LANGUAGES, key: "id")  @join__type(graph: API_MEDIA, key: "id", extension: true)  {
  id: ID!
  bcp47: String @join__field(graph: API_LANGUAGES) 
  iso3: String @join__field(graph: API_LANGUAGES) 
  slug: String @join__field(graph: API_LANGUAGES) 
  name(languageId: ID, primary: Boolean) : [LanguageName!]! @join__field(graph: API_LANGUAGES) 
  countryLanguages: [CountryLanguage!]! @join__field(graph: API_LANGUAGES) 
  audioPreview: AudioPreview @join__field(graph: API_LANGUAGES) 
  primaryCountryId: String @join__field(graph: API_LANGUAGES) 
  speakerCount: Int! @join__field(graph: API_LANGUAGES) 
  countriesCount: Int! @join__field(graph: API_LANGUAGES) 
  seriesCount: Int! @join__field(graph: API_MEDIA) 
  featureFilmCount: Int! @join__field(graph: API_MEDIA) 
  shortFilmCount: Int! @join__field(graph: API_MEDIA) 
}

type JourneyViewEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey being viewed
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the journey being viewed
  """
  label: String
  """
  languageId of the journey being viewed
  """
  value: String
  """
  language of the journey being viewed (based on the ID in the value field)
  """
  language: Language
}

type RadioQuestionSubmissionEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the radioQuestionBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  label of the selected radioOptionBlock
  """
  value: String
}

type SignUpSubmissionEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the block belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  null for signUpSubmissionEvent
  """
  label: String
  """
  name from the signUpBlock form
  """
  value: String
  """
  email from the signUpBlock form
  """
  email: String
}

type StepViewEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the stepBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  null for stepViewEvent
  """
  label: String
  """
  stepName of the stepBlock
  """
  value: String
}

type StepNextEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the stepBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  stepName of the stepBlock
  """
  label: String
  """
  stepName of the next stepBlock
  """
  value: String
}

type StepPreviousEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the stepBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  stepName of the current stepBlock
  """
  label: String
  """
  stepName of the previous stepBlock
  """
  value: String
}

type TextResponseSubmissionEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the buttonBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  response from the TextResponseBlock form
  """
  value: String
  """
  the id of the block this event originates from
  """
  blockId: String
}

type VideoStartEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoStartEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

type VideoPlayEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoPlayEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

type VideoPauseEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoPauseEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

type VideoCompleteEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoCompleteEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

type VideoExpandEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoExpandEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

type VideoCollapseEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoCollapseEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

type VideoProgressEvent implements Event @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Event")  {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoProgressEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!
}

type Host @join__type(graph: API_JOURNEYS)  {
  id: ID!
  teamId: ID!
  title: String!
  location: String
  src1: String
  src2: String
}

type IntegrationGrowthSpaces implements Integration @join__type(graph: API_JOURNEYS)  @join__implements(graph: API_JOURNEYS, interface: "Integration")  {
  id: ID!
  team: Team!
  type: IntegrationType!
  accessId: String!
  accessSecretPart: String!
  routes: [IntegrationGrowthSpacesRoute!]!
}

type IntegrationGrowthSpacesRoute @join__type(graph: API_JOURNEYS)  {
  id: String!
  name: String!
}

type Tag @join__type(graph: API_JOURNEYS, key: "id")  @join__type(graph: API_MEDIA, key: "id")  {
  id: ID!
  parentId: ID @join__field(graph: API_MEDIA) 
  name(languageId: ID, primary: Boolean) : [TagName!]! @join__field(graph: API_MEDIA) 
  service: Service @join__field(graph: API_MEDIA) 
}

type PowerBiEmbed @join__type(graph: API_JOURNEYS)  {
  """
  The report ID
  """
  reportId: String!
  """
  The name of the report
  """
  reportName: String!
  """
  The embed URL of the report
  """
  embedUrl: String!
  """
  The embed token
  """
  accessToken: String!
  """
  The date and time (UTC) of token expiration
  """
  expiration: String!
}

type UserJourney @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  journey: Journey
  journeyNotification: JourneyNotification
  userId: ID!
  journeyId: ID!
  role: UserJourneyRole!
  user: User
  """
  Date time of when the journey was first opened
  """
  openedAt: DateTime
}

type JourneyCollection @join__type(graph: API_JOURNEYS)  {
  id: ID!
  team: Team!
  title: String
  customDomains: [CustomDomain!]
  journeys: [Journey!]
}

type JourneyNotification @join__type(graph: API_JOURNEYS)  {
  id: ID!
  userId: ID!
  journeyId: ID!
  userTeamId: ID
  userJourneyId: ID
  visitorInteractionEmail: Boolean!
}

type UserTeam @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  journeyNotification(journeyId: ID!) : JourneyNotification
  user: User!
  role: UserTeamRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type JourneyProfile @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  userId: ID!
  acceptedTermsAt: DateTime
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

type JourneyVisitor @join__type(graph: API_JOURNEYS, key: "visitorId journeyId")  {
  visitorId: ID!
  journeyId: ID!
  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!
  """
  Duration between createdAt and lastStepViewedAt in seconds
  """
  duration: Int
  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime
  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform
  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String
  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform
  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  notes: String
  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime
  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String
  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String
  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String
  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String
  events: [Event!]!
  visitor: Visitor!
}

type JourneyVisitorEdge @join__type(graph: API_JOURNEYS)  {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: JourneyVisitor!
}

type JourneyVisitorsConnection @join__type(graph: API_JOURNEYS)  {
  """
  A list of edges.
  """
  edges: [JourneyVisitorEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type JourneysEmailPreference @join__type(graph: API_JOURNEYS)  {
  email: String!
  unsubscribeAll: Boolean!
  accountNotifications: Boolean!
}

type PlausibleStatsAggregateValue @join__type(graph: API_JOURNEYS)  {
  value: Float!
  change: Int
}

type PlausibleStatsAggregateResponse @join__type(graph: API_JOURNEYS)  {
  """
  The number of unique visitors.
  """
  visitors: PlausibleStatsAggregateValue
  """
  The number of visits/sessions.
  """
  visits: PlausibleStatsAggregateValue
  """
  The number of pageview events.
  """
  pageviews: PlausibleStatsAggregateValue
  """
  The number of pageviews divided by the number of visits.
  Returns a floating point number. Currently only supported in Aggregate and
  Timeseries endpoints.
  """
  viewsPerVisit: PlausibleStatsAggregateValue
  """
  Bounce rate percentage.
  """
  bounceRate: PlausibleStatsAggregateValue
  """
  Visit duration in seconds.
  """
  visitDuration: PlausibleStatsAggregateValue
  """
  The number of events (pageviews + custom events). When filtering by a goal,
   this metric corresponds to "Total Conversions" in the dashboard.
  """
  events: PlausibleStatsAggregateValue
  """
  The percentage of visitors who completed the goal. Requires an `event:goal`
  filter or `event:goal` property in the breakdown endpoint
  """
  conversionRate: PlausibleStatsAggregateValue
  """
  The average time users spend on viewing a single page. Requires an
  `event:page` filter or `event:page` property in the breakdown endpoint.
  """
  timeOnPage: PlausibleStatsAggregateValue
}

type PlausibleStatsResponse @join__type(graph: API_JOURNEYS)  {
  """
  On breakdown queries, this is the property that was broken down by.
  On aggregate queries, this is the date the stats are for.
  """
  property: String!
  """
  The number of unique visitors.
  """
  visitors: Int
  """
  The number of visits/sessions.
  """
  visits: Int
  """
  The number of pageview events.
  """
  pageviews: Int
  """
  The number of pageviews divided by the number of visits.
  Returns a floating point number. Currently only supported in Aggregate and
  Timeseries endpoints.
  """
  viewsPerVisit: Float
  """
  Bounce rate percentage.
  """
  bounceRate: Int
  """
  Visit duration in seconds.
  """
  visitDuration: Int
  """
  The number of events (pageviews + custom events). When filtering by a goal,
   this metric corresponds to "Total Conversions" in the dashboard.
  """
  events: Int
  """
  The percentage of visitors who completed the goal. Requires an `event:goal`
  filter or `event:goal` property in the breakdown endpoint
  """
  conversionRate: Int
  """
  The average time users spend on viewing a single page. Requires an
  `event:page` filter or `event:page` property in the breakdown endpoint.
  """
  timeOnPage: Float
}

type Team @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  title: String!
  publicTitle: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userTeams: [UserTeam!]!
  customDomains: [CustomDomain!]!
  integrations: [Integration!]!
}

type UserInvite @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  journeyId: ID!
  senderId: ID!
  email: String!
  acceptedAt: DateTime
  removedAt: DateTime
}

type User @join__type(graph: API_JOURNEYS, key: "id")  @join__type(graph: API_MEDIA, key: "id", extension: true)  @join__type(graph: API_USERS, key: "id")  {
  id: ID!
  mediaUserRoles: [MediaRole!]! @join__field(graph: API_MEDIA) 
  firstName: String! @join__field(graph: API_USERS) 
  lastName: String @join__field(graph: API_USERS) 
  email: String! @join__field(graph: API_USERS) 
  imageUrl: String @join__field(graph: API_USERS) 
  superAdmin: Boolean @join__field(graph: API_USERS) 
  emailVerified: Boolean! @join__field(graph: API_USERS) 
}

type UserRole @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  userId: ID!
  roles: [Role!]
}

type UserTeamInvite @join__type(graph: API_JOURNEYS)  {
  id: ID!
  teamId: ID!
  email: String!
}

type Browser @join__type(graph: API_JOURNEYS)  {
  name: String
  version: String
}

type Device @join__type(graph: API_JOURNEYS)  {
  model: String
  type: DeviceType
  vendor: String
}

type OperatingSystem @join__type(graph: API_JOURNEYS)  {
  name: String
  version: String
}

"""
These types are a subset provided by the @types/ua-parser-js library.
"""
type UserAgent @join__type(graph: API_JOURNEYS)  {
  browser: Browser!
  device: Device!
  os: OperatingSystem!
}

"""
A visitor with attributes connected to a team.
"""
type Visitor @join__type(graph: API_JOURNEYS, key: "id")  {
  id: ID!
  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!
  """
  Duration between createdAt and lastStepViewedAt in seconds
  """
  duration: Int
  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime
  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform
  """
  The user agent of the visitor as poulated by the visitor's user-agent string
  detected in the JourneyViewEventCreate mutation. This field is enriched
  by data from the ua-parser-js library. If this field is empty it is likely
  that the JourneyViewEventCreate mutation was not called by the visitor.
  """
  userAgent: UserAgent
  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String
  """
  The name of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  name: String
  """
  The email address of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  email: String
  """
  Status of the visitor as populated by VisitorUpdate mutation.
  """
  status: VisitorStatus
  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform
  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  messagePlatformId: String
  """
  Private notes of the visitor as set by VisitorUpdate mutation.
  """
  notes: String
  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime
  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String
  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String
  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String
  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String
  """
  The url visitor was referred from
  """
  referrer: String
  events: [Event!]!
}

"""
An edge in a connection.
"""
type VisitorEdge @join__type(graph: API_JOURNEYS)  {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: Visitor!
}

"""
Information about pagination in a connection.
"""
type PageInfo @join__type(graph: API_JOURNEYS)  {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A list of visitors connected with a team.
"""
type VisitorsConnection @join__type(graph: API_JOURNEYS)  {
  """
  A list of edges.
  """
  edges: [VisitorEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type Translation @join__type(graph: API_JOURNEYS)  {
  value: String!
  language: Language!
  primary: Boolean!
}

type AudioPreview @join__type(graph: API_LANGUAGES)  {
  language: Language!
  value: String!
  duration: Int!
  size: Int!
  bitrate: Int!
  codec: String!
}

type Continent @join__type(graph: API_LANGUAGES)  {
  id: ID!
  name(languageId: ID, primary: Boolean) : [ContinentName!]!
  countries: [Country!]!
}

type ContinentName @join__type(graph: API_LANGUAGES)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type Country @join__type(graph: API_LANGUAGES, key: "id")  {
  id: ID!
  population: Int
  latitude: Float
  longitude: Float
  flagPngSrc: String
  flagWebpSrc: String
  languages: [Language!]!
  name(languageId: ID, primary: Boolean) : [CountryName!]!
  continent: Continent!
  countryLanguages: [CountryLanguage!]!
  languageCount: Int!
  languageHavingMediaCount: Int!
}

type CountryLanguage @join__type(graph: API_LANGUAGES)  {
  id: ID!
  language: Language!
  country: Country!
  speakers: Int!
  displaySpeakers: Int
  primary: Boolean!
  suggested: Boolean!
  order: Int
}

type CountryName @join__type(graph: API_LANGUAGES)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type LanguageName @join__type(graph: API_LANGUAGES)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type BibleBook @join__type(graph: API_MEDIA)  {
  id: ID!
  name(languageId: ID, primary: Boolean) : [BibleBookName!]!
  osisId: String!
  alternateName: String
  paratextAbbreviation: String!
  isNewTestament: Boolean!
  order: Int!
}

type BibleBookName @join__type(graph: API_MEDIA)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type BibleCitation @join__type(graph: API_MEDIA)  {
  id: ID!
  osisId: String!
  bibleBook: BibleBook!
  chapterStart: Int!
  chapterEnd: Int
  verseStart: Int!
  verseEnd: Int
  video: Video!
}

type CloudflareImage @join__type(graph: API_MEDIA)  {
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: Date!
  aspectRatio: ImageAspectRatio
  url: String
  mobileCinematicHigh: String
  mobileCinematicLow: String
  mobileCinematicVeryLow: String
  thumbnail: String
  videoStill: String
}

type CloudflareVideo @join__type(graph: API_MEDIA)  {
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: Date!
  readyToStream: Boolean!
}

type Keyword @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  language: Language!
}

type LanguageWithSlug @join__type(graph: API_MEDIA)  {
  language: Language!
  slug: String!
}

type TagName @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type Taxonomy @join__type(graph: API_MEDIA)  {
  id: ID!
  category: String!
  term: String!
  name(languageCodes: [String!], category: String) : [TaxonomyName!]!
}

type TaxonomyName @join__type(graph: API_MEDIA)  {
  id: ID!
  term: String!
  label: String!
  language: Language!
  taxonomy: Taxonomy!
}

type UnsplashPhoto @join__type(graph: API_MEDIA)  {
  id: ID!
  created_at: String!
  updated_at: String
  blur_hash: String
  width: Int!
  height: Int!
  color: String
  description: String
  alt_description: String
  promoted_at: String
  likes: Int!
  urls: UnsplashPhotoUrls!
  links: UnsplashPhotoLinks!
  user: UnsplashUser!
}

type UnsplashPhotoLinks @join__type(graph: API_MEDIA)  {
  self: String!
  html: String!
  download: String!
  download_location: String!
}

type UnsplashPhotoUrls @join__type(graph: API_MEDIA)  {
  full: String!
  raw: String!
  regular: String!
  small: String!
  thumb: String!
}

type UnsplashQueryResponse @join__type(graph: API_MEDIA)  {
  total: Int!
  total_pages: Int!
  results: [UnsplashPhoto!]!
}

type UnsplashUser @join__type(graph: API_MEDIA)  {
  id: ID!
  updated_at: String!
  username: String!
  name: String!
  first_name: String!
  last_name: String
  twitter_username: String
  portfolio_url: String
  bio: String
  location: String
  instagram_username: String
  total_collections: Int!
  total_likes: Int!
  total_photos: Int!
  links: UnsplashUserLinks!
  profile_image: UnsplashUserImage!
}

type UnsplashUserImage @join__type(graph: API_MEDIA)  {
  small: String!
  medium: String!
  large: String!
}

type UnsplashUserLinks @join__type(graph: API_MEDIA)  {
  followers: String!
  following: String!
  html: String!
  likes: String!
  photos: String!
  portfolio: String!
  self: String!
}

type VideoDescription @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoEdition @join__type(graph: API_MEDIA)  {
  id: ID!
  name: String
  videoVariants: [VideoVariant!]!
  videoSubtitles: [VideoSubtitle!]!
}

type VideoImageAlt @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoSnippet @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoStudyQuestion @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoSubtitle @join__type(graph: API_MEDIA)  {
  id: ID!
  languageId: ID!
  primary: Boolean!
  edition: String!
  vttSrc: String
  srtSrc: String
  value: String!
  language: Language!
  videoEdition: VideoEdition!
}

type VideoTitle @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoVariant @join__type(graph: API_MEDIA)  {
  id: ID!
  hls: String
  dash: String
  share: String
  downloads: [VideoVariantDownload!]!
  duration: Int!
  language: Language!
  videoEdition: VideoEdition!
  subtitle(languageId: ID, primary: Boolean) : [VideoSubtitle!]!
  subtitleCount: Int!
  """
  slug is a permanent link to the video variant.
  """
  slug: String!
}

type VideoVariantDownload @join__type(graph: API_MEDIA)  {
  id: ID!
  quality: VideoVariantDownloadQuality!
  size: Float!
  height: Int!
  width: Int!
  url: String!
}

interface Action @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
}

interface Block @join__type(graph: API_JOURNEYS)  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

interface Event @join__type(graph: API_JOURNEYS)  {
  id: ID!
  journeyId: ID!
  createdAt: DateTime!
  label: String
  value: String
}

interface Integration @join__type(graph: API_JOURNEYS)  {
  id: ID!
  team: Team!
  type: IntegrationType!
}

union MutationSiteCreateResult @join__type(graph: API_ANALYTICS)  @join__unionMember(graph: API_ANALYTICS, member: "Error")  @join__unionMember(graph: API_ANALYTICS, member: "MutationSiteCreateSuccess")  = Error | MutationSiteCreateSuccess

enum ThemeMode @join__type(graph: API_JOURNEYS)  {
  dark @join__enumValue(graph: API_JOURNEYS) 
  light @join__enumValue(graph: API_JOURNEYS) 
}

enum ThemeName @join__type(graph: API_JOURNEYS)  {
  base @join__enumValue(graph: API_JOURNEYS) 
}

enum IdType @join__type(graph: API_JOURNEYS)  @join__type(graph: API_MEDIA)  {
  databaseId @join__enumValue(graph: API_JOURNEYS)  @join__enumValue(graph: API_MEDIA) 
  slug @join__enumValue(graph: API_JOURNEYS)  @join__enumValue(graph: API_MEDIA) 
}

enum JourneyStatus @join__type(graph: API_JOURNEYS)  {
  archived @join__enumValue(graph: API_JOURNEYS) 
  deleted @join__enumValue(graph: API_JOURNEYS) 
  draft @join__enumValue(graph: API_JOURNEYS) 
  published @join__enumValue(graph: API_JOURNEYS) 
  trashed @join__enumValue(graph: API_JOURNEYS) 
}

enum JourneyMenuButtonIcon @join__type(graph: API_JOURNEYS)  {
  menu1 @join__enumValue(graph: API_JOURNEYS) 
  equals @join__enumValue(graph: API_JOURNEYS) 
  home3 @join__enumValue(graph: API_JOURNEYS) 
  home4 @join__enumValue(graph: API_JOURNEYS) 
  more @join__enumValue(graph: API_JOURNEYS) 
  ellipsis @join__enumValue(graph: API_JOURNEYS) 
  grid1 @join__enumValue(graph: API_JOURNEYS) 
  chevronDown @join__enumValue(graph: API_JOURNEYS) 
}

enum JourneysReportType @join__type(graph: API_JOURNEYS)  {
  multipleFull @join__enumValue(graph: API_JOURNEYS) 
  multipleSummary @join__enumValue(graph: API_JOURNEYS) 
  singleFull @join__enumValue(graph: API_JOURNEYS) 
  singleSummary @join__enumValue(graph: API_JOURNEYS) 
}

enum JourneyVisitorSort @join__type(graph: API_JOURNEYS)  {
  date @join__enumValue(graph: API_JOURNEYS) 
  duration @join__enumValue(graph: API_JOURNEYS) 
  activity @join__enumValue(graph: API_JOURNEYS) 
}

enum ButtonVariant @join__type(graph: API_JOURNEYS)  {
  text @join__enumValue(graph: API_JOURNEYS) 
  contained @join__enumValue(graph: API_JOURNEYS) 
}

enum ButtonColor @join__type(graph: API_JOURNEYS)  {
  primary @join__enumValue(graph: API_JOURNEYS) 
  secondary @join__enumValue(graph: API_JOURNEYS) 
  error @join__enumValue(graph: API_JOURNEYS) 
  inherit @join__enumValue(graph: API_JOURNEYS) 
}

enum ButtonSize @join__type(graph: API_JOURNEYS)  {
  small @join__enumValue(graph: API_JOURNEYS) 
  medium @join__enumValue(graph: API_JOURNEYS) 
  large @join__enumValue(graph: API_JOURNEYS) 
}

enum GridDirection @join__type(graph: API_JOURNEYS)  {
  columnReverse @join__enumValue(graph: API_JOURNEYS) 
  column @join__enumValue(graph: API_JOURNEYS) 
  row @join__enumValue(graph: API_JOURNEYS) 
  rowReverse @join__enumValue(graph: API_JOURNEYS) 
}

enum GridJustifyContent @join__type(graph: API_JOURNEYS)  {
  flexStart @join__enumValue(graph: API_JOURNEYS) 
  flexEnd @join__enumValue(graph: API_JOURNEYS) 
  center @join__enumValue(graph: API_JOURNEYS) 
}

enum GridAlignItems @join__type(graph: API_JOURNEYS)  {
  baseline @join__enumValue(graph: API_JOURNEYS) 
  flexStart @join__enumValue(graph: API_JOURNEYS) 
  flexEnd @join__enumValue(graph: API_JOURNEYS) 
  center @join__enumValue(graph: API_JOURNEYS) 
}

"""
IconName is equivalent to the icons found in @mui/icons-material
"""
enum IconName @join__type(graph: API_JOURNEYS)  {
  PlayArrowRounded @join__enumValue(graph: API_JOURNEYS) 
  TranslateRounded @join__enumValue(graph: API_JOURNEYS) 
  CheckCircleRounded @join__enumValue(graph: API_JOURNEYS) 
  RadioButtonUncheckedRounded @join__enumValue(graph: API_JOURNEYS) 
  FormatQuoteRounded @join__enumValue(graph: API_JOURNEYS) 
  LockOpenRounded @join__enumValue(graph: API_JOURNEYS) 
  ArrowForwardRounded @join__enumValue(graph: API_JOURNEYS) 
  ArrowBackRounded @join__enumValue(graph: API_JOURNEYS) 
  ChatBubbleOutlineRounded @join__enumValue(graph: API_JOURNEYS) 
  LiveTvRounded @join__enumValue(graph: API_JOURNEYS) 
  MenuBookRounded @join__enumValue(graph: API_JOURNEYS) 
  ChevronRightRounded @join__enumValue(graph: API_JOURNEYS) 
  ChevronLeftRounded @join__enumValue(graph: API_JOURNEYS) 
  BeenhereRounded @join__enumValue(graph: API_JOURNEYS) 
  SendRounded @join__enumValue(graph: API_JOURNEYS) 
  SubscriptionsRounded @join__enumValue(graph: API_JOURNEYS) 
  ContactSupportRounded @join__enumValue(graph: API_JOURNEYS) 
  Launch @join__enumValue(graph: API_JOURNEYS) 
  MailOutline @join__enumValue(graph: API_JOURNEYS) 
}

enum IconColor @join__type(graph: API_JOURNEYS)  {
  primary @join__enumValue(graph: API_JOURNEYS) 
  secondary @join__enumValue(graph: API_JOURNEYS) 
  action @join__enumValue(graph: API_JOURNEYS) 
  error @join__enumValue(graph: API_JOURNEYS) 
  disabled @join__enumValue(graph: API_JOURNEYS) 
  inherit @join__enumValue(graph: API_JOURNEYS) 
}

enum IconSize @join__type(graph: API_JOURNEYS)  {
  sm @join__enumValue(graph: API_JOURNEYS) 
  md @join__enumValue(graph: API_JOURNEYS) 
  lg @join__enumValue(graph: API_JOURNEYS) 
  xl @join__enumValue(graph: API_JOURNEYS) 
  inherit @join__enumValue(graph: API_JOURNEYS) 
}

enum TextResponseType @join__type(graph: API_JOURNEYS)  {
  freeForm @join__enumValue(graph: API_JOURNEYS) 
  name @join__enumValue(graph: API_JOURNEYS) 
  email @join__enumValue(graph: API_JOURNEYS) 
}

enum TypographyVariant @join__type(graph: API_JOURNEYS)  {
  h1 @join__enumValue(graph: API_JOURNEYS) 
  h2 @join__enumValue(graph: API_JOURNEYS) 
  h3 @join__enumValue(graph: API_JOURNEYS) 
  h4 @join__enumValue(graph: API_JOURNEYS) 
  h5 @join__enumValue(graph: API_JOURNEYS) 
  h6 @join__enumValue(graph: API_JOURNEYS) 
  subtitle1 @join__enumValue(graph: API_JOURNEYS) 
  subtitle2 @join__enumValue(graph: API_JOURNEYS) 
  body1 @join__enumValue(graph: API_JOURNEYS) 
  body2 @join__enumValue(graph: API_JOURNEYS) 
  caption @join__enumValue(graph: API_JOURNEYS) 
  overline @join__enumValue(graph: API_JOURNEYS) 
}

enum TypographyColor @join__type(graph: API_JOURNEYS)  {
  primary @join__enumValue(graph: API_JOURNEYS) 
  secondary @join__enumValue(graph: API_JOURNEYS) 
  error @join__enumValue(graph: API_JOURNEYS) 
}

enum TypographyAlign @join__type(graph: API_JOURNEYS)  {
  left @join__enumValue(graph: API_JOURNEYS) 
  center @join__enumValue(graph: API_JOURNEYS) 
  right @join__enumValue(graph: API_JOURNEYS) 
}

enum VideoBlockSource @join__type(graph: API_JOURNEYS)  {
  internal @join__enumValue(graph: API_JOURNEYS) 
  youTube @join__enumValue(graph: API_JOURNEYS) 
  cloudflare @join__enumValue(graph: API_JOURNEYS) 
}

enum VideoBlockObjectFit @join__type(graph: API_JOURNEYS)  {
  """
  The video is scaled to maintain its aspect ratio while filling the
   entire VideoBlock. If the video's aspect ratio does not match the
   aspect ratio of the VideoBlock, then the video will be clipped to fit.
  """
  fill @join__enumValue(graph: API_JOURNEYS) 
  """
  The video is scaled to maintain its aspect ratio while fitting within the
   VideoBlock. The entire video is made to fill the VideoBlock, while
   preserving its aspect ratio, so the video will be "letterboxed" if its
   aspect ratio does not match the aspect ratio of the VideoBlock.
  """
  fit @join__enumValue(graph: API_JOURNEYS) 
  """
  12.5% of either side of the video is discarded (this has the effect of
   converting a 16:9 aspect ratio to 4:3). The remaining video is scaled to
   maintain its new aspect ratio while fitting within the VideoBlock.  The
   remaining video is made to fill the VideoBlock, while preserving its new
   aspect ratio, so the video will be "letterboxed" if its new aspect ratio
   does not match the aspect ratio of the VideoBlock.
  """
  zoomed @join__enumValue(graph: API_JOURNEYS) 
}

enum MessagePlatform @join__type(graph: API_JOURNEYS)  {
  facebook @join__enumValue(graph: API_JOURNEYS) 
  telegram @join__enumValue(graph: API_JOURNEYS) 
  whatsApp @join__enumValue(graph: API_JOURNEYS) 
  instagram @join__enumValue(graph: API_JOURNEYS) 
  kakaoTalk @join__enumValue(graph: API_JOURNEYS) 
  viber @join__enumValue(graph: API_JOURNEYS) 
  vk @join__enumValue(graph: API_JOURNEYS) 
  snapchat @join__enumValue(graph: API_JOURNEYS) 
  skype @join__enumValue(graph: API_JOURNEYS) 
  line @join__enumValue(graph: API_JOURNEYS) 
  tikTok @join__enumValue(graph: API_JOURNEYS) 
  custom @join__enumValue(graph: API_JOURNEYS) 
  globe2 @join__enumValue(graph: API_JOURNEYS) 
  globe3 @join__enumValue(graph: API_JOURNEYS) 
  messageText1 @join__enumValue(graph: API_JOURNEYS) 
  messageText2 @join__enumValue(graph: API_JOURNEYS) 
  send1 @join__enumValue(graph: API_JOURNEYS) 
  send2 @join__enumValue(graph: API_JOURNEYS) 
  messageChat2 @join__enumValue(graph: API_JOURNEYS) 
  messageCircle @join__enumValue(graph: API_JOURNEYS) 
  messageNotifyCircle @join__enumValue(graph: API_JOURNEYS) 
  messageNotifySquare @join__enumValue(graph: API_JOURNEYS) 
  messageSquare @join__enumValue(graph: API_JOURNEYS) 
  mail1 @join__enumValue(graph: API_JOURNEYS) 
  linkExternal @join__enumValue(graph: API_JOURNEYS) 
  home3 @join__enumValue(graph: API_JOURNEYS) 
  home4 @join__enumValue(graph: API_JOURNEYS) 
  helpCircleContained @join__enumValue(graph: API_JOURNEYS) 
  helpSquareContained @join__enumValue(graph: API_JOURNEYS) 
  shieldCheck @join__enumValue(graph: API_JOURNEYS) 
  menu1 @join__enumValue(graph: API_JOURNEYS) 
  checkBroken @join__enumValue(graph: API_JOURNEYS) 
  checkContained @join__enumValue(graph: API_JOURNEYS) 
  settings @join__enumValue(graph: API_JOURNEYS) 
}

enum ButtonAction @join__type(graph: API_JOURNEYS)  {
  NavigateToBlockAction @join__enumValue(graph: API_JOURNEYS) 
  LinkAction @join__enumValue(graph: API_JOURNEYS) 
  EmailAction @join__enumValue(graph: API_JOURNEYS) 
}

enum IntegrationType @join__type(graph: API_JOURNEYS)  {
  growthSpaces @join__enumValue(graph: API_JOURNEYS) 
}

enum UserJourneyRole @join__type(graph: API_JOURNEYS)  {
  inviteRequested @join__enumValue(graph: API_JOURNEYS) 
  editor @join__enumValue(graph: API_JOURNEYS) 
  owner @join__enumValue(graph: API_JOURNEYS) 
}

enum UserTeamRole @join__type(graph: API_JOURNEYS)  {
  manager @join__enumValue(graph: API_JOURNEYS) 
  member @join__enumValue(graph: API_JOURNEYS) 
}

enum Role @join__type(graph: API_JOURNEYS)  {
  """
  User can create templates and
  add them to template library
  """
  publisher @join__enumValue(graph: API_JOURNEYS) 
}

enum DeviceType @join__type(graph: API_JOURNEYS)  {
  console @join__enumValue(graph: API_JOURNEYS) 
  mobile @join__enumValue(graph: API_JOURNEYS) 
  tablet @join__enumValue(graph: API_JOURNEYS) 
  smarttv @join__enumValue(graph: API_JOURNEYS) 
  wearable @join__enumValue(graph: API_JOURNEYS) 
  embedded @join__enumValue(graph: API_JOURNEYS) 
}

"""
The status of a visitor according to team members interacting with the
visitor admin interface. This enum should map to an emoji when displayed
(names here match Apple's emoji name)
"""
enum VisitorStatus @join__type(graph: API_JOURNEYS)  {
  star @join__enumValue(graph: API_JOURNEYS) 
  prohibited @join__enumValue(graph: API_JOURNEYS) 
  checkMarkSymbol @join__enumValue(graph: API_JOURNEYS) 
  thumbsUp @join__enumValue(graph: API_JOURNEYS) 
  thumbsDown @join__enumValue(graph: API_JOURNEYS) 
  partyPopper @join__enumValue(graph: API_JOURNEYS) 
  warning @join__enumValue(graph: API_JOURNEYS) 
  robotFace @join__enumValue(graph: API_JOURNEYS) 
  redExclamationMark @join__enumValue(graph: API_JOURNEYS) 
  redQuestionMark @join__enumValue(graph: API_JOURNEYS) 
}

enum LanguageIdType @join__type(graph: API_LANGUAGES)  {
  databaseId @join__enumValue(graph: API_LANGUAGES) 
  bcp47 @join__enumValue(graph: API_LANGUAGES) 
}

enum ImageAspectRatio @join__type(graph: API_MEDIA)  {
  hd @join__enumValue(graph: API_MEDIA) 
  banner @join__enumValue(graph: API_MEDIA) 
}

enum MediaRole @join__type(graph: API_MEDIA)  {
  publisher @join__enumValue(graph: API_MEDIA) 
}

enum SegmindModel @join__type(graph: API_MEDIA)  {
  sdxl1__0_txt2img @join__enumValue(graph: API_MEDIA) 
  kandinsky2__2_txt2img @join__enumValue(graph: API_MEDIA) 
  sd1__5_paragon @join__enumValue(graph: API_MEDIA) 
  tinysd1__5_txt2img @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashPhotoOrientation @join__type(graph: API_MEDIA)  {
  landscape @join__enumValue(graph: API_MEDIA) 
  portrait @join__enumValue(graph: API_MEDIA) 
  squarish @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashOrderBy @join__type(graph: API_MEDIA)  {
  latest @join__enumValue(graph: API_MEDIA) 
  relevant @join__enumValue(graph: API_MEDIA) 
  editorial @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashContentFilter @join__type(graph: API_MEDIA)  {
  low @join__enumValue(graph: API_MEDIA) 
  high @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashColor @join__type(graph: API_MEDIA)  {
  black_and_white @join__enumValue(graph: API_MEDIA) 
  black @join__enumValue(graph: API_MEDIA) 
  white @join__enumValue(graph: API_MEDIA) 
  yellow @join__enumValue(graph: API_MEDIA) 
  orange @join__enumValue(graph: API_MEDIA) 
  red @join__enumValue(graph: API_MEDIA) 
  purple @join__enumValue(graph: API_MEDIA) 
  magenta @join__enumValue(graph: API_MEDIA) 
  green @join__enumValue(graph: API_MEDIA) 
  teal @join__enumValue(graph: API_MEDIA) 
  blue @join__enumValue(graph: API_MEDIA) 
}

enum Service @join__type(graph: API_MEDIA)  {
  apiJourneys @join__enumValue(graph: API_MEDIA) 
  apiLanguages @join__enumValue(graph: API_MEDIA) 
  apiMedia @join__enumValue(graph: API_MEDIA) 
  apiTags @join__enumValue(graph: API_MEDIA) 
  apiUsers @join__enumValue(graph: API_MEDIA) 
  apiVideos @join__enumValue(graph: API_MEDIA) 
}

enum VideoLabel @join__type(graph: API_MEDIA)  {
  collection @join__enumValue(graph: API_MEDIA) 
  episode @join__enumValue(graph: API_MEDIA) 
  featureFilm @join__enumValue(graph: API_MEDIA) 
  segment @join__enumValue(graph: API_MEDIA) 
  series @join__enumValue(graph: API_MEDIA) 
  shortFilm @join__enumValue(graph: API_MEDIA) 
  trailer @join__enumValue(graph: API_MEDIA) 
  behindTheScenes @join__enumValue(graph: API_MEDIA) 
}

enum VideoVariantDownloadQuality @join__type(graph: API_MEDIA)  {
  low @join__enumValue(graph: API_MEDIA) 
  high @join__enumValue(graph: API_MEDIA) 
}

input SiteCreateInput @join__type(graph: API_ANALYTICS)  {
  domain: String!
  goals: [String!]
}

input NavigateToBlockActionInput @join__type(graph: API_JOURNEYS)  {
  gtmEventName: String
  blockId: String!
}

input LinkActionInput @join__type(graph: API_JOURNEYS)  {
  gtmEventName: String
  url: String!
  target: String
}

input EmailActionInput @join__type(graph: API_JOURNEYS)  {
  gtmEventName: String
  email: String!
}

input BlockUpdateActionInput @join__type(graph: API_JOURNEYS)  {
  gtmEventName: String
  email: String
  url: String
  target: String
  blockId: String
}

input BlocksFilter @join__type(graph: API_JOURNEYS)  {
  journeyIds: [ID!]
  typenames: [String!]
}

input BlockDuplicateIdMap @join__type(graph: API_JOURNEYS)  {
  oldId: ID!
  newId: ID!
}

input ButtonBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
}

input ButtonBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
}

input CardBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID
  coverBlockId: ID
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input IconBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  name: IconName
  color: IconColor
  size: IconSize
}

input ImageBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!
  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input ImageBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID
  src: String
  alt: String
  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input RadioOptionBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID
  label: String
}

input RadioQuestionBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

input SignUpBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

input StepBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean
  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int
  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
}

input StepBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  nextBlockId: ID
  locked: Boolean
  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int
  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
  """
  Slug should be unique amongst all blocks
  (server will throw BAD_USER_INPUT error if not)
  If not required will use the current block id
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input StepBlockPositionUpdateInput @join__type(graph: API_JOURNEYS)  {
  id: ID!
  x: Int
  y: Int
}

input TextResponseBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input TextResponseBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID
  label: String
  hint: String
  minRows: Int
  routeId: String
  type: TextResponseType
  integrationId: String
}

input TypographyBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input VideoBlockCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  """
  startAt dictates at which point of time the video should start playing
  """
  startAt: Int
  """
  endAt dictates at which point of time the video should end
  """
  endAt: Int
  duration: Int
  description: String
  muted: Boolean
  autoplay: Boolean
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID
  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource
  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean
  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
  """
  how the video should display within the VideoBlock
  """
  objectFit: VideoBlockObjectFit
}

input VideoBlockUpdateInput @join__type(graph: API_JOURNEYS)  {
  """
  startAt dictates at which point of time the video should start playing
  """
  startAt: Int
  """
  endAt dictates at which point of time the video should end
  """
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  duration: Int
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID
  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource
  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean
  """
  how the video should display within the VideoBlock
  """
  objectFit: VideoBlockObjectFit
}

input ChatButtonCreateInput @join__type(graph: API_JOURNEYS)  {
  link: String
  platform: MessagePlatform
}

input ChatButtonUpdateInput @join__type(graph: API_JOURNEYS)  {
  link: String
  platform: MessagePlatform
}

input CustomDomainCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  teamId: String!
  name: String!
  journeyCollectionId: ID
  routeAllTeamJourneys: Boolean
}

input CustomDomainUpdateInput @join__type(graph: API_JOURNEYS)  {
  journeyCollectionId: ID
  routeAllTeamJourneys: Boolean
}

input ButtonClickEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  label of the button
  """
  value: String
  """
  Action type of the button when it was clicked
  """
  action: ButtonAction
  """
  The label for each corresponding action, mapping below:
  NavigateToBlockAction - StepName (generated in client) of the StepBlock
  LinkAction - url of the link
  """
  actionValue: String
}

input ChatOpenEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  messagePlatform of the link used for chat
  """
  value: MessagePlatform
}

input JourneyViewEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  journeyId: ID!
  """
  title of the journey being viewed
  """
  label: String
  """
  languageId of the journey being viewed
  """
  value: ID
}

input RadioQuestionSubmissionEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  radioOptionBlockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  label of the selected radioOption block
  """
  value: String
}

input SignUpSubmissionEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  name from the signUpBlock form
  """
  name: String!
  """
  email from the signUpBlock form
  """
  email: String!
}

input StepViewEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  """
  Id of the current StepBlock
  """
  blockId: ID!
  """
  stepName of the current stepBlock
  """
  value: String
}

input StepNextEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  """
  Id of the current StepBlock
  """
  blockId: ID!
  """
  id of the next stepBlock
  """
  nextStepId: ID!
  """
  stepName of the current stepBlock
  """
  label: String
  """
  stepName of the next stepBlock
  """
  value: String
}

input StepPreviousEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  """
  Id of the current StepBlock
  """
  blockId: ID!
  """
  id of the previous stepBlock
  """
  previousStepId: ID!
  """
  stepName of the current stepBlock
  """
  label: String
  """
  stepName of the previous stepBlock
  """
  value: String
}

input TextResponseSubmissionEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  response from the TextResponseBlock form
  """
  value: String!
}

input VideoStartEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  duration of the video played when the VideoStartEvent is triggered
  """
  position: Float
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: VideoBlockSource
}

input VideoPlayEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  duration of the video played when the VideoPlayEvent is triggered
  """
  position: Float
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: VideoBlockSource
}

input VideoPauseEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  duration of the video played when the VideoPauseEvent is triggered
  """
  position: Float
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: VideoBlockSource
}

input VideoCompleteEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  duration of the video played when the VideoCompleteEvent is triggered
  """
  position: Float
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: VideoBlockSource
}

input VideoExpandEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  duration of the video played when the VideoExpandEvent is triggered
  """
  position: Float
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: VideoBlockSource
}

input VideoCollapseEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  duration of the video played when the VideoCollapseEvent is triggered
  """
  position: Float
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: VideoBlockSource
}

input VideoProgressEventCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  duration of the video played when the VideoProgressEvent is triggered
  """
  position: Float
  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: VideoBlockSource
}

input HostUpdateInput @join__type(graph: API_JOURNEYS)  {
  """
  title can be undefined as to not update title, but it cannot be null as to clear the value of title
  """
  title: String
  location: String
  src1: String
  src2: String
}

input HostCreateInput @join__type(graph: API_JOURNEYS)  {
  title: String!
  location: String
  src1: String
  src2: String
}

input IntegrationGrowthSpacesCreateInput @join__type(graph: API_JOURNEYS)  {
  accessId: String!
  accessSecret: String!
  teamId: String!
}

input IntegrationGrowthSpacesUpdateInput @join__type(graph: API_JOURNEYS)  {
  accessId: String!
  accessSecret: String!
}

input JourneysFilter @join__type(graph: API_JOURNEYS)  {
  featured: Boolean
  template: Boolean
  ids: [ID!]
  tagIds: [ID!]
  languageIds: [ID!]
  limit: Int
  orderByRecent: Boolean
}

input JourneysQueryOptions @join__type(graph: API_JOURNEYS)  {
  """
  hostname filters journeys to those that belong to a team with a custom domain
  matching the hostname.
  """
  hostname: String
  """
  is this being requested from an embed url
  """
  embedded: Boolean
  """
  limit results to journeys in a journey collection (currently only available when using hostname option)
  """
  journeyCollection: Boolean
}

input JourneyCreateInput @join__type(graph: API_JOURNEYS)  {
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input JourneyUpdateInput @join__type(graph: API_JOURNEYS)  {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  creatorDescription: String
  creatorImageBlockId: ID
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
  hostId: String
  strategySlug: String
  tagIds: [ID!]
  website: Boolean
  showShareButton: Boolean
  showLikeButton: Boolean
  showDislikeButton: Boolean
  displayTitle: String
  showHosts: Boolean
  showChatButtons: Boolean
  showReactionButtons: Boolean
  showLogo: Boolean
  showMenu: Boolean
  showDisplayTitle: Boolean
  menuButtonIcon: JourneyMenuButtonIcon
  menuStepBlockId: ID
  logoImageBlockId: ID
}

input JourneyTemplateInput @join__type(graph: API_JOURNEYS)  {
  template: Boolean
}

input JourneyCollectionCreateInput @join__type(graph: API_JOURNEYS)  {
  id: ID
  teamId: String!
  title: String
  journeyIds: [String!]
}

input JourneyCollectionUpdateInput @join__type(graph: API_JOURNEYS)  {
  title: String
  journeyIds: [String!]
}

input JourneyNotificationUpdateInput @join__type(graph: API_JOURNEYS)  {
  journeyId: ID!
  visitorInteractionEmail: Boolean!
}

input JourneyProfileUpdateInput @join__type(graph: API_JOURNEYS)  {
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

input JourneyVisitorFilter @join__type(graph: API_JOURNEYS)  {
  journeyId: String!
  hasChatStarted: Boolean
  hasPollAnswers: Boolean
  hasTextResponse: Boolean
  hasIcon: Boolean
  hideInactive: Boolean
  countryCode: String
}

input JourneysEmailPreferenceUpdateInput @join__type(graph: API_JOURNEYS)  {
  email: String!
  preference: String!
  value: Boolean!
}

input PlausibleStatsAggregateFilter @join__type(graph: API_JOURNEYS)  {
  """
  See [time periods](https://plausible.io/docs/stats-api#time-periods).
  If not specified, it will default to 30d.
  """
  period: String
  """
  date in the standard ISO-8601 format (YYYY-MM-DD).
  When using a custom range, the date parameter expects two ISO-8601 formatted
  dates joined with a comma e.g `2021-01-01,2021-01-31`. Stats will be returned
  for the whole date range inclusive of the start and end dates.
  """
  date: String
  """
  See [filtering](https://plausible.io/docs/stats-api#filtering)
  section for more details.
  """
  filters: String
  """
  Off by default. You can specify `previous_period` to calculate the percent
  difference with the previous period for each metric. The previous period
  will be of the exact same length as specified in the period parameter.
  """
  interval: String
}

input PlausibleStatsBreakdownFilter @join__type(graph: API_JOURNEYS)  {
  """
  Which [property](https://plausible.io/docs/stats-api#properties)
  to break down the stats by.
  """
  property: String!
  """
  See [time periods](https://plausible.io/docs/stats-api#time-periods).
  If not specified, it will default to 30d.
  """
  period: String
  """
  date in the standard ISO-8601 format (YYYY-MM-DD).
  When using a custom range, the date parameter expects two ISO-8601 formatted
  dates joined with a comma e.g `2021-01-01,2021-01-31`. Stats will be returned
  for the whole date range inclusive of the start and end dates.
  """
  date: String
  """
  Limit the number of results. Maximum value is 1000. Defaults to 100.
  If you want to get more than 1000 results, you can make multiple requests
  and paginate the results by specifying the page parameter (e.g. make the
  same request with page=1, then page=2, etc)
  """
  limit: Int
  """
  Number of the page, used to paginate results.
  Importantly, the page numbers start from 1 not 0.
  """
  page: Int
  """
  See [filtering](https://plausible.io/docs/stats-api#filtering)
  section for more details.
  """
  filters: String
}

input PlausibleStatsTimeseriesFilter @join__type(graph: API_JOURNEYS)  {
  """
  See [time periods](https://plausible.io/docs/stats-api#time-periods).
  If not specified, it will default to 30d.
  """
  period: String
  """
  date in the standard ISO-8601 format (YYYY-MM-DD).
  When using a custom range, the date parameter expects two ISO-8601 formatted
  dates joined with a comma e.g `2021-01-01,2021-01-31`. Stats will be returned
  for the whole date range inclusive of the start and end dates.
  """
  date: String
  """
  See [filtering](https://plausible.io/docs/stats-api#filtering)
  section for more details.
  """
  filters: String
  """
  Choose your reporting interval. Valid options are date (always) and month
  (when specified period is longer than one calendar month). Defaults to month
  for 6mo and 12mo, otherwise falls back to date.
  """
  interval: String
}

input TeamCreateInput @join__type(graph: API_JOURNEYS)  {
  title: String!
  publicTitle: String
}

input TeamUpdateInput @join__type(graph: API_JOURNEYS)  {
  title: String!
  publicTitle: String
}

input UserInviteCreateInput @join__type(graph: API_JOURNEYS)  {
  email: String!
}

input UserTeamUpdateInput @join__type(graph: API_JOURNEYS)  {
  role: UserTeamRole!
}

input UserTeamFilterInput @join__type(graph: API_JOURNEYS)  {
  role: [UserTeamRole!]
}

input UserTeamInviteCreateInput @join__type(graph: API_JOURNEYS)  {
  email: String!
}

"""
A list of fields to update a visitor when calling the visitorUpdate mutation
"""
input VisitorUpdateInput @join__type(graph: API_JOURNEYS)  {
  """
  The email address of the visitor (will prevent
  SignUpEventSubmissionEventCreate mutation from updating this field
  automatically)
  """
  email: String
  """
  ID of the visitor. This could be a phone number, user id or other unique
  identifier provided by the message platform.
  """
  messagePlatformId: String
  """
  Message platform the visitor wishes to be connected to us on (will prevent
  ChatOpenEventCreate mutation from updating this field automatically)
  """
  messagePlatform: MessagePlatform
  """
  The name of the visitor (will prevent SignUpEventSubmissionEventCreate
  mutation from updating this field automatically)
  """
  name: String
  """
  Private notes relating to the visitor. This information is never made public
  and only accessible by team members.
  """
  notes: String
  """
  Status of the visitor.
  """
  status: VisitorStatus
  """
  The country code of the visitor as poulated by visitor ip address detected
  """
  countryCode: String
  """
  The referring url of the visitor
  """
  referrer: String
}

input LanguagesFilter @join__type(graph: API_LANGUAGES)  {
  ids: [ID!]
}

input ImageInput @join__type(graph: API_MEDIA)  {
  aspectRatio: ImageAspectRatio
  videoId: ID
}

input VideoCreateInput @join__type(graph: API_MEDIA)  {
  id: String!
  label: VideoLabel!
  primaryLanguageId: String!
  published: Boolean!
  slug: String!
  noIndex: Boolean!
  childIds: [String!]!
}

input VideoStudyQuestionCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  videoId: String!
  value: String!
  primary: Boolean!
  languageId: String!
  crowdInId: String
  """
  index from 1
  """
  order: Int!
}

input VideoStudyQuestionUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String
  primary: Boolean
  crowdInId: String
  """
  index from 1
  """
  order: Int
}

input VideoSubtitleCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  videoId: String!
  edition: String!
  vttSrc: String
  srtSrc: String
  primary: Boolean!
  languageId: String!
}

input VideoSubtitleUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  edition: String!
  vttSrc: String
  srtSrc: String
  primary: Boolean
  languageId: String
}

input VideoTranslationCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  videoId: String!
  value: String!
  primary: Boolean!
  languageId: String!
}

input VideoTranslationUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String
  primary: Boolean
  languageId: String
}

input VideoUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  label: VideoLabel
  primaryLanguageId: String
  published: Boolean
  slug: String
  noIndex: Boolean
  childIds: [String!]
}

input VideoVariantCreateInput @join__type(graph: API_MEDIA)  {
  id: String!
  videoId: String!
  edition: String!
  hls: String
  dash: String
  share: String
  duration: Int
  languageId: String!
  slug: String!
}

input VideoVariantDownloadCreateInput @join__type(graph: API_MEDIA)  {
  id: String
  videoVariantId: String!
  quality: VideoVariantDownloadQuality!
  size: Float
  height: Int
  width: Int
  url: String!
}

input VideoVariantDownloadUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  videoVariantId: String
  quality: VideoVariantDownloadQuality
  size: Float
  height: Int
  width: Int
  url: String
}

input VideoVariantUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  videoId: String
  edition: String
  hls: String
  dash: String
  share: String
  duration: Int
  languageId: String
  slug: String
}

input VideosFilter @join__type(graph: API_MEDIA)  {
  availableVariantLanguageIds: [ID!]
  title: String
  labels: [VideoLabel!]
  ids: [ID!]
  subtitleLanguageIds: [ID!]
}

input CreateVerificationRequestInput @join__type(graph: API_USERS)  {
  redirect: String
}

input MeInput @join__type(graph: API_USERS)  {
  redirect: String
}
    