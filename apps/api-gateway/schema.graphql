schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

interface Action
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
}

interface Block
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

type Browser
  @join__type(graph: JOURNEYS)
{
  name: String
  version: String
}

type ButtonBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  action: Action
}

input ButtonBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
}

input ButtonBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
}

type ButtonClickEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the button"""
  value: String
}

input ButtonClickEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """label of the button"""
  value: String
}

enum ButtonColor
  @join__type(graph: JOURNEYS)
{
  primary @join__enumValue(graph: JOURNEYS)
  secondary @join__enumValue(graph: JOURNEYS)
  error @join__enumValue(graph: JOURNEYS)
  inherit @join__enumValue(graph: JOURNEYS)
}

enum ButtonSize
  @join__type(graph: JOURNEYS)
{
  small @join__enumValue(graph: JOURNEYS)
  medium @join__enumValue(graph: JOURNEYS)
  large @join__enumValue(graph: JOURNEYS)
}

enum ButtonVariant
  @join__type(graph: JOURNEYS)
{
  text @join__enumValue(graph: JOURNEYS)
  contained @join__enumValue(graph: JOURNEYS)
}

type CardBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean!

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName
}

input CardBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

type ChatOpenEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for ChatOpenEvent"""
  label: String

  """messagePlatform of the link used for chat"""
  value: String

  """
  messagePlatform of the link used for chat (based on the messagePlatform in the value field)
  """
  messagePlatform: MessagePlatform
}

input ChatOpenEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """messagePlatform of the link used for chat"""
  value: MessagePlatform
}

type CloudflareImage
  @join__type(graph: MEDIA)
{
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: String!
}

type Country
  @join__type(graph: LANGUAGES, key: "id")
{
  id: ID!
  name(languageId: ID, primary: Boolean): [Translation!]!
  population: Int!
  continent(languageId: ID, primary: Boolean): [Translation!]!

  """
  slug is a permanent link to the country. It should only be appended, not edited or deleted
  """
  slug(languageId: ID, primary: Boolean): [Translation!]!
  languages: [Language!]!
  latitude: Float!
  longitude: Float!
  image: String
}

scalar DateTime
  @join__type(graph: JOURNEYS)

type Device
  @join__type(graph: JOURNEYS)
{
  model: String
  type: DeviceType
  vendor: String
}

enum DeviceType
  @join__type(graph: JOURNEYS)
{
  console @join__enumValue(graph: JOURNEYS)
  mobile @join__enumValue(graph: JOURNEYS)
  tablet @join__enumValue(graph: JOURNEYS)
  smarttv @join__enumValue(graph: JOURNEYS)
  wearable @join__enumValue(graph: JOURNEYS)
  embedded @join__enumValue(graph: JOURNEYS)
}

interface Event
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  createdAt: DateTime!
  label: String
  value: String
}

enum GridAlignItems
  @join__type(graph: JOURNEYS)
{
  baseline @join__enumValue(graph: JOURNEYS)
  flexStart @join__enumValue(graph: JOURNEYS)
  flexEnd @join__enumValue(graph: JOURNEYS)
  center @join__enumValue(graph: JOURNEYS)
}

type GridContainerBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  spacing: Int!
  direction: GridDirection!
  justifyContent: GridJustifyContent!
  alignItems: GridAlignItems!
}

enum GridDirection
  @join__type(graph: JOURNEYS)
{
  columnReverse @join__enumValue(graph: JOURNEYS)
  column @join__enumValue(graph: JOURNEYS)
  row @join__enumValue(graph: JOURNEYS)
  rowReverse @join__enumValue(graph: JOURNEYS)
}

type GridItemBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  xl: Int!
  lg: Int!
  sm: Int!
}

enum GridJustifyContent
  @join__type(graph: JOURNEYS)
{
  flexStart @join__enumValue(graph: JOURNEYS)
  flexEnd @join__enumValue(graph: JOURNEYS)
  center @join__enumValue(graph: JOURNEYS)
}

type IconBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  name: IconName
  color: IconColor
  size: IconSize
}

enum IconColor
  @join__type(graph: JOURNEYS)
{
  primary @join__enumValue(graph: JOURNEYS)
  secondary @join__enumValue(graph: JOURNEYS)
  action @join__enumValue(graph: JOURNEYS)
  error @join__enumValue(graph: JOURNEYS)
  disabled @join__enumValue(graph: JOURNEYS)
  inherit @join__enumValue(graph: JOURNEYS)
}

"""IconName is equivalent to the icons found in @mui/icons-material"""
enum IconName
  @join__type(graph: JOURNEYS)
{
  PlayArrowRounded @join__enumValue(graph: JOURNEYS)
  TranslateRounded @join__enumValue(graph: JOURNEYS)
  CheckCircleRounded @join__enumValue(graph: JOURNEYS)
  RadioButtonUncheckedRounded @join__enumValue(graph: JOURNEYS)
  FormatQuoteRounded @join__enumValue(graph: JOURNEYS)
  LockOpenRounded @join__enumValue(graph: JOURNEYS)
  ArrowForwardRounded @join__enumValue(graph: JOURNEYS)
  ArrowBackRounded @join__enumValue(graph: JOURNEYS)
  ChatBubbleOutlineRounded @join__enumValue(graph: JOURNEYS)
  LiveTvRounded @join__enumValue(graph: JOURNEYS)
  MenuBookRounded @join__enumValue(graph: JOURNEYS)
  ChevronRightRounded @join__enumValue(graph: JOURNEYS)
  ChevronLeftRounded @join__enumValue(graph: JOURNEYS)
  BeenhereRounded @join__enumValue(graph: JOURNEYS)
  SendRounded @join__enumValue(graph: JOURNEYS)
  SubscriptionsRounded @join__enumValue(graph: JOURNEYS)
  ContactSupportRounded @join__enumValue(graph: JOURNEYS)
}

enum IconSize
  @join__type(graph: JOURNEYS)
{
  sm @join__enumValue(graph: JOURNEYS)
  md @join__enumValue(graph: JOURNEYS)
  lg @join__enumValue(graph: JOURNEYS)
  xl @join__enumValue(graph: JOURNEYS)
  inherit @join__enumValue(graph: JOURNEYS)
}

enum IdType
  @join__type(graph: JOURNEYS)
  @join__type(graph: LANGUAGES)
  @join__type(graph: VIDEOS)
{
  databaseId @join__enumValue(graph: JOURNEYS) @join__enumValue(graph: LANGUAGES) @join__enumValue(graph: VIDEOS)
  slug @join__enumValue(graph: JOURNEYS) @join__enumValue(graph: LANGUAGES) @join__enumValue(graph: VIDEOS)
}

type ImageBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  src: String
  width: Int!
  height: Int!
  alt: String!

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
}

input ImageBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  src: String
  alt: String!

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
}

input ImageBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  src: String
  alt: String
}

scalar join__FieldSet

enum join__Graph {
  JOURNEYS @join__graph(name: "journeys", url: "http://127.0.0.1:4001/graphql")
  LANGUAGES @join__graph(name: "languages", url: "http://127.0.0.1:4003/graphql")
  MEDIA @join__graph(name: "media", url: "http://127.0.0.1:4005/graphql")
  USERS @join__graph(name: "users", url: "http://127.0.0.1:4002/graphql")
  VIDEOS @join__graph(name: "videos", url: "http://127.0.0.1:4004/graphql")
}

type Journey
  @join__type(graph: JOURNEYS, key: "id")
{
  blocks: [Block!]
  primaryImageBlock: ImageBlock
  id: ID!
  title: String!
  language: Language!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  slug: String!
  archivedAt: DateTime
  deletedAt: DateTime
  publishedAt: DateTime
  trashedAt: DateTime
  featuredAt: DateTime
  createdAt: DateTime!
  status: JourneyStatus!
  seoTitle: String
  seoDescription: String
  template: Boolean
  userJourneys: [UserJourney!]
}

input JourneyCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String

  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

type JourneyProfile
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  userId: ID!
  acceptedTermsAt: DateTime
}

input JourneysFilter
  @join__type(graph: JOURNEYS)
{
  featured: Boolean
  template: Boolean
}

enum JourneysReportType
  @join__type(graph: JOURNEYS)
{
  multipleFull @join__enumValue(graph: JOURNEYS)
  multipleSummary @join__enumValue(graph: JOURNEYS)
  singleFull @join__enumValue(graph: JOURNEYS)
  singleSummary @join__enumValue(graph: JOURNEYS)
}

enum JourneyStatus
  @join__type(graph: JOURNEYS)
{
  archived @join__enumValue(graph: JOURNEYS)
  deleted @join__enumValue(graph: JOURNEYS)
  draft @join__enumValue(graph: JOURNEYS)
  published @join__enumValue(graph: JOURNEYS)
  trashed @join__enumValue(graph: JOURNEYS)
}

input JourneyTemplateInput
  @join__type(graph: JOURNEYS)
{
  template: Boolean
}

input JourneyUpdateInput
  @join__type(graph: JOURNEYS)
{
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
}

type JourneyViewEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey being viewed"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: String

  """
  language of the journey being viewed (based on the ID in the value field)
  """
  language: Language
}

input JourneyViewEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  journeyId: ID!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: ID
}

type Language
  @join__type(graph: JOURNEYS, key: "id")
  @join__type(graph: LANGUAGES, key: "id")
  @join__type(graph: VIDEOS, key: "id")
{
  id: ID!
  bcp47: String @join__field(graph: LANGUAGES)
  iso3: String @join__field(graph: LANGUAGES)
  name(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: LANGUAGES)
}

enum LanguageIdType
  @join__type(graph: LANGUAGES)
{
  databaseId @join__enumValue(graph: LANGUAGES)
  bcp47 @join__enumValue(graph: LANGUAGES)
}

type LanguageWithSlug
  @join__type(graph: VIDEOS)
{
  language: Language
  slug: String
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LinkAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
  url: String!
  target: String
}

input LinkActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
  url: String!
  target: String
}

enum MessagePlatform
  @join__type(graph: JOURNEYS)
{
  facebook @join__enumValue(graph: JOURNEYS)
  telegram @join__enumValue(graph: JOURNEYS)
  whatsApp @join__enumValue(graph: JOURNEYS)
  instagram @join__enumValue(graph: JOURNEYS)
  viber @join__enumValue(graph: JOURNEYS)
  vk @join__enumValue(graph: JOURNEYS)
  snapchat @join__enumValue(graph: JOURNEYS)
  skype @join__enumValue(graph: JOURNEYS)
  line @join__enumValue(graph: JOURNEYS)
  tikTok @join__enumValue(graph: JOURNEYS)
}

type Mutation
  @join__type(graph: JOURNEYS)
  @join__type(graph: MEDIA)
{
  blockDeleteAction(id: ID!, journeyId: ID!): Block! @join__field(graph: JOURNEYS)
  blockUpdateNavigateAction(id: ID!, journeyId: ID!, input: NavigateActionInput!): NavigateAction! @join__field(graph: JOURNEYS)
  blockUpdateNavigateToBlockAction(id: ID!, journeyId: ID!, input: NavigateToBlockActionInput!): NavigateToBlockAction! @join__field(graph: JOURNEYS)
  blockUpdateNavigateToJourneyAction(id: ID!, journeyId: ID!, input: NavigateToJourneyActionInput!): NavigateToJourneyAction! @join__field(graph: JOURNEYS)
  blockUpdateLinkAction(id: ID!, journeyId: ID!, input: LinkActionInput!): LinkAction! @join__field(graph: JOURNEYS)

  """blockDelete returns the updated sibling blocks on successful delete"""
  blockDelete(id: ID!, journeyId: ID!, parentBlockId: ID): [Block!]! @join__field(graph: JOURNEYS)

  """
  blockDuplicate returns the updated block, it's children and sibling blocks on successful duplicate
  """
  blockDuplicate(
    id: ID!
    journeyId: ID!

    """
    parentOrder defines the position to add the duplicated block. Negative values defines the position from the end of the array. Positions greater than the length of the array or null parentOrder will add duplicate at end of the array.
    """
    parentOrder: Int
  ): [Block!]! @join__field(graph: JOURNEYS)
  blockOrderUpdate(id: ID!, journeyId: ID!, parentOrder: Int!): [Block!]! @join__field(graph: JOURNEYS)
  buttonBlockCreate(input: ButtonBlockCreateInput!): ButtonBlock! @join__field(graph: JOURNEYS)
  buttonBlockUpdate(id: ID!, journeyId: ID!, input: ButtonBlockUpdateInput!): ButtonBlock @join__field(graph: JOURNEYS)
  cardBlockCreate(input: CardBlockCreateInput!): CardBlock! @join__field(graph: JOURNEYS)
  cardBlockUpdate(id: ID!, journeyId: ID!, input: CardBlockUpdateInput!): CardBlock! @join__field(graph: JOURNEYS)
  iconBlockCreate(input: IconBlockCreateInput!): IconBlock! @join__field(graph: JOURNEYS)
  iconBlockUpdate(id: ID!, journeyId: ID!, input: IconBlockUpdateInput!): IconBlock! @join__field(graph: JOURNEYS)
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock! @join__field(graph: JOURNEYS)
  imageBlockUpdate(id: ID!, journeyId: ID!, input: ImageBlockUpdateInput!): ImageBlock! @join__field(graph: JOURNEYS)
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!): RadioOptionBlock! @join__field(graph: JOURNEYS)
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!): RadioQuestionBlock! @join__field(graph: JOURNEYS)
  radioOptionBlockUpdate(id: ID!, journeyId: ID!, input: RadioOptionBlockUpdateInput!): RadioOptionBlock! @join__field(graph: JOURNEYS)
  radioQuestionBlockUpdate(id: ID!, journeyId: ID!, parentBlockId: ID!): RadioQuestionBlock! @join__field(graph: JOURNEYS)
  signUpBlockCreate(input: SignUpBlockCreateInput!): SignUpBlock! @join__field(graph: JOURNEYS)
  signUpBlockUpdate(id: ID!, journeyId: ID!, input: SignUpBlockUpdateInput!): SignUpBlock @join__field(graph: JOURNEYS)
  stepBlockCreate(input: StepBlockCreateInput!): StepBlock! @join__field(graph: JOURNEYS)
  stepBlockUpdate(id: ID!, journeyId: ID!, input: StepBlockUpdateInput!): StepBlock! @join__field(graph: JOURNEYS)
  textResponseBlockCreate(input: TextResponseBlockCreateInput!): TextResponseBlock! @join__field(graph: JOURNEYS)
  textResponseBlockUpdate(id: ID!, journeyId: ID!, input: TextResponseBlockUpdateInput!): TextResponseBlock @join__field(graph: JOURNEYS)
  typographyBlockCreate(input: TypographyBlockCreateInput!): TypographyBlock! @join__field(graph: JOURNEYS)
  typographyBlockUpdate(id: ID!, journeyId: ID!, input: TypographyBlockUpdateInput!): TypographyBlock! @join__field(graph: JOURNEYS)
  videoBlockCreate(input: VideoBlockCreateInput!): VideoBlock! @join__field(graph: JOURNEYS)
  videoBlockUpdate(id: ID!, journeyId: ID!, input: VideoBlockUpdateInput!): VideoBlock! @join__field(graph: JOURNEYS)
  buttonClickEventCreate(input: ButtonClickEventCreateInput!): ButtonClickEvent! @join__field(graph: JOURNEYS)
  chatOpenEventCreate(input: ChatOpenEventCreateInput!): ChatOpenEvent! @join__field(graph: JOURNEYS)
  journeyViewEventCreate(input: JourneyViewEventCreateInput!): JourneyViewEvent! @join__field(graph: JOURNEYS)
  radioQuestionSubmissionEventCreate(input: RadioQuestionSubmissionEventCreateInput!): RadioQuestionSubmissionEvent! @join__field(graph: JOURNEYS)
  signUpSubmissionEventCreate(input: SignUpSubmissionEventCreateInput!): SignUpSubmissionEvent! @join__field(graph: JOURNEYS)
  stepViewEventCreate(input: StepViewEventCreateInput!): StepViewEvent! @join__field(graph: JOURNEYS)
  stepNextEventCreate(input: StepNextEventCreateInput!): StepNextEvent! @join__field(graph: JOURNEYS)
  textResponseSubmissionEventCreate(input: TextResponseSubmissionEventCreateInput!): TextResponseSubmissionEvent! @join__field(graph: JOURNEYS)
  videoStartEventCreate(input: VideoStartEventCreateInput!): VideoStartEvent! @join__field(graph: JOURNEYS)
  videoPlayEventCreate(input: VideoPlayEventCreateInput!): VideoPlayEvent! @join__field(graph: JOURNEYS)
  videoPauseEventCreate(input: VideoPauseEventCreateInput!): VideoPauseEvent! @join__field(graph: JOURNEYS)
  videoCompleteEventCreate(input: VideoCompleteEventCreateInput!): VideoCompleteEvent! @join__field(graph: JOURNEYS)
  videoExpandEventCreate(input: VideoExpandEventCreateInput!): VideoExpandEvent! @join__field(graph: JOURNEYS)
  videoCollapseEventCreate(input: VideoCollapseEventCreateInput!): VideoCollapseEvent! @join__field(graph: JOURNEYS)
  videoProgressEventCreate(input: VideoProgressEventCreateInput!): VideoProgressEvent! @join__field(graph: JOURNEYS)
  journeyCreate(input: JourneyCreateInput!): Journey! @join__field(graph: JOURNEYS)
  journeyDuplicate(id: ID!): Journey! @join__field(graph: JOURNEYS)
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey! @join__field(graph: JOURNEYS)

  """Sets journey status to published"""
  journeyPublish(id: ID!): Journey @join__field(graph: JOURNEYS)

  """Sets journeys statuses to archived"""
  journeysArchive(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Sets journeys statuses to deleted"""
  journeysDelete(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Sets journeys statuses to trashed"""
  journeysTrash(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Sets journeys statuses to last active status"""
  journeysRestore(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Updates template"""
  journeyTemplate(id: ID!, input: JourneyTemplateInput!): Journey! @join__field(graph: JOURNEYS)
  journeyProfileCreate: JourneyProfile! @join__field(graph: JOURNEYS)
  userInviteCreate(journeyId: ID!, input: UserInviteCreateInput): UserInvite @join__field(graph: JOURNEYS)
  userInviteRemove(id: ID!, journeyId: ID!): UserInvite! @join__field(graph: JOURNEYS)
  userInviteAcceptAll: [UserInvite!]! @join__field(graph: JOURNEYS)
  userJourneyApprove(id: ID!): UserJourney! @join__field(graph: JOURNEYS)
  userJourneyPromote(id: ID!): UserJourney! @join__field(graph: JOURNEYS)
  userJourneyRemove(id: ID!): UserJourney! @join__field(graph: JOURNEYS)

  """Removes all userJourneys associated with a journeyId"""
  userJourneyRemoveAll(id: ID!): [UserJourney!]! @join__field(graph: JOURNEYS)
  userJourneyRequest(journeyId: ID!, idType: IdType): UserJourney! @join__field(graph: JOURNEYS)
  userJourneyOpen(id: ID!): UserJourney! @join__field(graph: JOURNEYS)

  """Update a visitor"""
  visitorUpdate(id: ID!, input: VisitorUpdateInput!): Visitor! @join__field(graph: JOURNEYS)
  createCloudflareUploadByFile: CloudflareImage @join__field(graph: MEDIA)
  createCloudflareUploadByUrl(url: String!): CloudflareImage @join__field(graph: MEDIA)
  deleteCloudflareImage(id: ID!): Boolean @join__field(graph: MEDIA)
  cloudflareUploadComplete(id: ID!): Boolean @join__field(graph: MEDIA)
}

"""
NavigateAction is an Action that navigates to the nextBlockId field set on the
closest ancestor StepBlock.
"""
type NavigateAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
}

input NavigateActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
}

type NavigateToBlockAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
  blockId: String!
}

input NavigateToBlockActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
  blockId: String!
}

type NavigateToJourneyAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
  journeyId: String!
  journey: Journey
}

input NavigateToJourneyActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
  journeyId: String!
}

type OperatingSystem
  @join__type(graph: JOURNEYS)
{
  name: String
  version: String
}

"""Information about pagination in a connection."""
type PageInfo
  @join__type(graph: JOURNEYS)
{
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PowerBiEmbed
  @join__type(graph: JOURNEYS)
{
  """The report ID"""
  reportId: String!

  """The name of the report"""
  reportName: String!

  """The embed URL of the report"""
  embedUrl: String!

  """The embed token"""
  accessToken: String!

  """The date and time (UTC) of token expiration"""
  expiration: String!
}

type Query
  @join__type(graph: JOURNEYS)
  @join__type(graph: LANGUAGES)
  @join__type(graph: MEDIA)
  @join__type(graph: USERS)
  @join__type(graph: VIDEOS)
{
  adminJourneys(status: [JourneyStatus!], template: Boolean): [Journey!]! @join__field(graph: JOURNEYS)
  adminJourneysReport(reportType: JourneysReportType!): PowerBiEmbed @join__field(graph: JOURNEYS)
  adminJourney(id: ID!, idType: IdType): Journey @join__field(graph: JOURNEYS)
  journeys(where: JourneysFilter): [Journey!]! @join__field(graph: JOURNEYS)
  journey(id: ID!, idType: IdType): Journey @join__field(graph: JOURNEYS)
  getJourneyProfile: JourneyProfile @join__field(graph: JOURNEYS)
  userInvites(journeyId: ID!): [UserInvite!] @join__field(graph: JOURNEYS)
  getUserRole: UserRole @join__field(graph: JOURNEYS)

  """A list of visitors that are connected with a specific team."""
  visitorsConnection(
    """Returns the visitor items related to a specific team."""
    teamId: String!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): VisitorsConnection! @join__field(graph: JOURNEYS)

  """Get a single visitor"""
  visitor(id: ID!): Visitor! @join__field(graph: JOURNEYS)
  countries: [Country!]! @join__field(graph: LANGUAGES)
  country(id: ID!, idType: IdType): Country! @join__field(graph: LANGUAGES)
  languages(offset: Int, limit: Int): [Language!]! @join__field(graph: LANGUAGES)
  language(id: ID!, idType: LanguageIdType): Language @join__field(graph: LANGUAGES)
  getMyCloudflareImages: [CloudflareImage] @join__field(graph: MEDIA)
  listUnsplashCollectionPhotos(collectionId: String!, page: Int, perPage: Int, orientation: UnsplashPhotoOrientation): [UnsplashPhoto!]! @join__field(graph: MEDIA)
  searchUnsplashPhotos(query: String!, page: Int, perPage: Int, orderBy: UnsplashOrderBy, collections: [String], contentFilter: UnsplashContentFilter, color: UnsplashColor, orientation: UnsplashPhotoOrientation): UnsplashQueryResponse! @join__field(graph: MEDIA)
  me: User @join__field(graph: USERS)
  videos(where: VideosFilter, offset: Int, limit: Int): [Video!]! @join__field(graph: VIDEOS)
  video(id: ID!, idType: IdType): Video @join__field(graph: VIDEOS)
}

type RadioOptionBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  action: Action
}

input RadioOptionBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  label: String
}

type RadioQuestionBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

input RadioQuestionBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

type RadioQuestionSubmissionEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the radioQuestionBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOptionBlock"""
  value: String
}

input RadioQuestionSubmissionEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  radioOptionBlockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOption block"""
  value: String
}

enum Role
  @join__type(graph: JOURNEYS)
{
  """
  User can create templates and
  add them to template library
  """
  publisher @join__enumValue(graph: JOURNEYS)
}

type SignUpBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

input SignUpBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

type SignUpSubmissionEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the block belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for signUpSubmissionEvent"""
  label: String

  """name from the signUpBlock form"""
  value: String

  """email from the signUpBlock form"""
  email: String
}

input SignUpSubmissionEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """name from the signUpBlock form"""
  name: String!

  """email from the signUpBlock form"""
  email: String!
}

type StepBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!

  """
  nextBlockId contains the preferred block to navigate to when a
  NavigateAction occurs or if the user manually tries to advance to the next
  step. If no nextBlockId is set it will automatically navigate to the next
  step in the journey based on parentOrder.
  """
  nextBlockId: ID

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  parentBlockId: ID
  parentOrder: Int
}

input StepBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean
}

input StepBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  nextBlockId: ID
  locked: Boolean
}

type StepNextEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

input StepNextEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the mext stepBlock"""
  nextStepId: ID!

  """stepName of the stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

type StepViewEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for stepViewEvent"""
  label: String

  """stepName of the stepBlock"""
  value: String
}

input StepViewEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """stepName of the stepBlock"""
  value: String
}

type TextResponseBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  hint: String
  minRows: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

input TextResponseBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  submitLabel: String!
}

input TextResponseBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  label: String
  hint: String
  minRows: Int
  submitIconId: ID
  submitLabel: String
}

type TextResponseSubmissionEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String
}

input TextResponseSubmissionEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String!
}

enum ThemeMode
  @join__type(graph: JOURNEYS)
{
  dark @join__enumValue(graph: JOURNEYS)
  light @join__enumValue(graph: JOURNEYS)
}

enum ThemeName
  @join__type(graph: JOURNEYS)
{
  base @join__enumValue(graph: JOURNEYS)
}

type Translation
  @join__type(graph: LANGUAGES)
  @join__type(graph: VIDEOS)
{
  value: String!
  language: Language!
  primary: Boolean!
}

enum TypographyAlign
  @join__type(graph: JOURNEYS)
{
  left @join__enumValue(graph: JOURNEYS)
  center @join__enumValue(graph: JOURNEYS)
  right @join__enumValue(graph: JOURNEYS)
}

type TypographyBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

enum TypographyColor
  @join__type(graph: JOURNEYS)
{
  primary @join__enumValue(graph: JOURNEYS)
  secondary @join__enumValue(graph: JOURNEYS)
  error @join__enumValue(graph: JOURNEYS)
}

enum TypographyVariant
  @join__type(graph: JOURNEYS)
{
  h1 @join__enumValue(graph: JOURNEYS)
  h2 @join__enumValue(graph: JOURNEYS)
  h3 @join__enumValue(graph: JOURNEYS)
  h4 @join__enumValue(graph: JOURNEYS)
  h5 @join__enumValue(graph: JOURNEYS)
  h6 @join__enumValue(graph: JOURNEYS)
  subtitle1 @join__enumValue(graph: JOURNEYS)
  subtitle2 @join__enumValue(graph: JOURNEYS)
  body1 @join__enumValue(graph: JOURNEYS)
  body2 @join__enumValue(graph: JOURNEYS)
  caption @join__enumValue(graph: JOURNEYS)
  overline @join__enumValue(graph: JOURNEYS)
}

enum UnsplashColor
  @join__type(graph: MEDIA)
{
  black_and_white @join__enumValue(graph: MEDIA)
  black @join__enumValue(graph: MEDIA)
  white @join__enumValue(graph: MEDIA)
  yellow @join__enumValue(graph: MEDIA)
  orange @join__enumValue(graph: MEDIA)
  red @join__enumValue(graph: MEDIA)
  purple @join__enumValue(graph: MEDIA)
  magenta @join__enumValue(graph: MEDIA)
  green @join__enumValue(graph: MEDIA)
  teal @join__enumValue(graph: MEDIA)
  blue @join__enumValue(graph: MEDIA)
}

enum UnsplashContentFilter
  @join__type(graph: MEDIA)
{
  low @join__enumValue(graph: MEDIA)
  high @join__enumValue(graph: MEDIA)
}

enum UnsplashOrderBy
  @join__type(graph: MEDIA)
{
  latest @join__enumValue(graph: MEDIA)
  relevant @join__enumValue(graph: MEDIA)
}

type UnsplashPhoto
  @join__type(graph: MEDIA)
{
  id: String!
  created_at: String!
  updated_at: String
  blur_hash: String!
  width: Int!
  height: Int!
  color: String
  description: String
  alt_description: String
  urls: UnsplashPhotoUrls!
  links: UnsplashPhotoLinks!
  categories: [String!]
  likes: Int!
  liked_by_user: Boolean!
  current_user_collections: [String!]!
  user: UnsplashUser!
}

type UnsplashPhotoLinks
  @join__type(graph: MEDIA)
{
  self: String!
  html: String!
  download: String!
  download_location: String!
}

enum UnsplashPhotoOrientation
  @join__type(graph: MEDIA)
{
  landscape @join__enumValue(graph: MEDIA)
  portrait @join__enumValue(graph: MEDIA)
  squarish @join__enumValue(graph: MEDIA)
}

type UnsplashPhotoUrls
  @join__type(graph: MEDIA)
{
  raw: String!
  full: String!
  regular: String!
  small: String!
  thumb: String!
}

type UnsplashQueryResponse
  @join__type(graph: MEDIA)
{
  total: Int!
  total_pages: Int!
  results: [UnsplashPhoto!]!
}

type UnsplashUser
  @join__type(graph: MEDIA)
{
  id: String!
  updated_at: String
  username: String!
  name: String
  first_name: String
  last_name: String
  twitter_username: String
  portfolio_url: String
  bio: String
  location: String
  links: UnsplashUserLinks!
  profile_image: UnsplashUserImage
  instagram_username: String
  total_collections: Int!
  total_likes: Int!
  total_photos: Int!
  accepted_tos: Boolean!
}

type UnsplashUserImage
  @join__type(graph: MEDIA)
{
  small: String!
  medium: String!
  large: String!
}

type UnsplashUserLinks
  @join__type(graph: MEDIA)
{
  self: String!
  html: String!
  photos: String!
  likes: String!
  portfolio: String!
  following: String!
  followers: String!
}

type User
  @join__type(graph: JOURNEYS, key: "id")
  @join__type(graph: USERS, key: "id")
{
  id: ID!
  firstName: String! @join__field(graph: USERS)
  lastName: String @join__field(graph: USERS)
  email: String! @join__field(graph: USERS)
  imageUrl: String @join__field(graph: USERS)
}

"""These types are a subset provided by the @types/ua-parser-js library."""
type UserAgent
  @join__type(graph: JOURNEYS)
{
  browser: Browser!
  device: Device!
  os: OperatingSystem!
}

type UserInvite
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  journeyId: ID!
  senderId: ID!
  email: String!
  acceptedAt: DateTime
  removedAt: DateTime
}

input UserInviteCreateInput
  @join__type(graph: JOURNEYS)
{
  email: String!
}

type UserJourney
  @join__type(graph: JOURNEYS, key: "id")
{
  journey: Journey
  id: ID!
  userId: ID!
  journeyId: ID!
  role: UserJourneyRole!
  user: User

  """Date time of when the journey was first opened"""
  openedAt: DateTime
}

enum UserJourneyRole
  @join__type(graph: JOURNEYS)
{
  inviteRequested @join__enumValue(graph: JOURNEYS)
  editor @join__enumValue(graph: JOURNEYS)
  owner @join__enumValue(graph: JOURNEYS)
}

type UserRole
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  userId: ID!
  roles: [Role!]
}

type Video
  @join__type(graph: JOURNEYS, key: "id primaryLanguageId")
  @join__type(graph: VIDEOS, key: "id primaryLanguageId")
{
  id: ID!
  primaryLanguageId: ID!
  label: VideoLabel! @join__field(graph: VIDEOS)
  title(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  seoTitle(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  snippet(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  description(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  studyQuestions(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  image: String @join__field(graph: VIDEOS)
  imageAlt(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  variantLanguages: [Language!]! @join__field(graph: VIDEOS)
  variantLanguagesCount: Int! @join__field(graph: VIDEOS)

  """slug is a permanent link to the video."""
  slug: String! @join__field(graph: VIDEOS)
  noIndex: Boolean @join__field(graph: VIDEOS)
  children: [Video!]! @join__field(graph: VIDEOS)

  """the number value of the amount of children on a video"""
  childrenCount: Int! @join__field(graph: VIDEOS)
  variantLanguagesWithSlug: [LanguageWithSlug!]! @join__field(graph: VIDEOS)
  variant(languageId: ID): VideoVariant @join__field(graph: VIDEOS)
}

type VideoBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """
  internal source videos: video is only populated when videoID and
  videoVariantLanguageId are present
  """
  video: Video

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId, videoVariantLanguageId, and video present
  youTube source: videoId, title, description, and duration present
  """
  source: VideoBlockSource!

  """
  internal source videos: this field is not populated and instead only present
  in the video field.
  For other sources this is automatically populated.
  """
  title: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  description: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  image: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  duration in seconds.
  """
  duration: Int

  """action that should be performed when the video ends"""
  action: Action

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

input VideoBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  description: String
  muted: Boolean
  autoplay: Boolean

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

enum VideoBlockObjectFit
  @join__type(graph: JOURNEYS)
{
  """
  The video is scaled to maintain its aspect ratio while filling the
   entire VideoBlock. If the video's aspect ratio does not match the
   aspect ratio of the VideoBlock, then the video will be clipped to fit.
  """
  fill @join__enumValue(graph: JOURNEYS)

  """
  The video is scaled to maintain its aspect ratio while fitting within the
   VideoBlock. The entire video is made to fill the VideoBlock, while
   preserving its aspect ratio, so the video will be "letterboxed" if its
   aspect ratio does not match the aspect ratio of the VideoBlock.
  """
  fit @join__enumValue(graph: JOURNEYS)

  """
  12.5% of either side of the video is discarded (this has the effect of
   converting a 16:9 aspect ratio to 4:3). The remaining video is scaled to
   maintain its new aspect ratio while fitting within the VideoBlock.  The
   remaining video is made to fill the VideoBlock, while preserving its new
   aspect ratio, so the video will be "letterboxed" if its new aspect ratio
   does not match the aspect ratio of the VideoBlock.
  """
  zoomed @join__enumValue(graph: JOURNEYS)
}

enum VideoBlockSource
  @join__type(graph: JOURNEYS)
{
  internal @join__enumValue(graph: JOURNEYS)
  youTube @join__enumValue(graph: JOURNEYS)
}

input VideoBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

type VideoCollapseEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCollapseEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoCompleteEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCompleteEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoExpandEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoExpandEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

enum VideoLabel
  @join__type(graph: VIDEOS)
{
  collection @join__enumValue(graph: VIDEOS)
  episode @join__enumValue(graph: VIDEOS)
  featureFilm @join__enumValue(graph: VIDEOS)
  segment @join__enumValue(graph: VIDEOS)
  series @join__enumValue(graph: VIDEOS)
  shortFilm @join__enumValue(graph: VIDEOS)
}

type VideoPauseEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPauseEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoPlayEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPlayEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoProgressEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!
}

input VideoProgressEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

input VideosFilter
  @join__type(graph: VIDEOS)
{
  availableVariantLanguageIds: [ID!]
  title: String
  labels: [VideoLabel!]
  ids: [ID!]
  subtitleLanguageIds: [ID!]
}

type VideoStartEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoStartEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

"""
VideoTriggerBlock is a block that indicates the video to navigate
to the next block at the designated time.
"""
type VideoTriggerBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int!
  action: Action!
}

type VideoVariant
  @join__type(graph: VIDEOS)
{
  id: String!
  hls: String
  downloads: [VideoVariantDownload!]!
  duration: Int!
  language: Language!
  subtitle(languageId: ID, primary: Boolean): [Translation!]!
  subtitleCount: Int!

  """slug is a permanent link to the video variant."""
  slug: String!
}

type VideoVariantDownload
  @join__type(graph: VIDEOS)
{
  quality: VideoVariantDownloadQuality!
  size: Float!
  url: String!
}

enum VideoVariantDownloadQuality
  @join__type(graph: VIDEOS)
{
  low @join__enumValue(graph: VIDEOS)
  high @join__enumValue(graph: VIDEOS)
}

"""A visitor with attributes connected to a team."""
type Visitor
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!

  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!

  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime

  """
  The user agent of the visitor as poulated by the visitor's user-agent string
  detected in the JourneyViewEventCreate mutation. This field is enriched
  by data from the ua-parser-js library. If this field is empty it is likely
  that the JourneyViewEventCreate mutation was not called by the visitor.
  """
  userAgent: UserAgent

  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String

  """
  The name of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  name: String

  """
  The email address of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  email: String

  """Status of the visitor as populated by VisitorUpdate mutation."""
  status: VisitorStatus

  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform

  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  messagePlatformId: String

  """Private notes of the visitor as set by VisitorUpdate mutation."""
  notes: String
  events: [Event!]!
}

"""An edge in a connection."""
type VisitorEdge
  @join__type(graph: JOURNEYS)
{
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Visitor!
}

"""A list of visitors connected with a team."""
type VisitorsConnection
  @join__type(graph: JOURNEYS)
{
  """A list of edges."""
  edges: [VisitorEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""
The status of a visitor according to team members interacting with the
visitor admin interface. This enum should map to an emoji when displayed
(names here match Apple's emoji name)
"""
enum VisitorStatus
  @join__type(graph: JOURNEYS)
{
  star @join__enumValue(graph: JOURNEYS)
  prohibited @join__enumValue(graph: JOURNEYS)
  checkMarkSymbol @join__enumValue(graph: JOURNEYS)
  thumbsUp @join__enumValue(graph: JOURNEYS)
  thumbsDown @join__enumValue(graph: JOURNEYS)
  partyPopper @join__enumValue(graph: JOURNEYS)
  warning @join__enumValue(graph: JOURNEYS)
  robotFace @join__enumValue(graph: JOURNEYS)
  redExclamationMark @join__enumValue(graph: JOURNEYS)
  redQuestionMark @join__enumValue(graph: JOURNEYS)
}

"""
A list of fields to update a visitor when calling the visitorUpdate mutation
"""
input VisitorUpdateInput
  @join__type(graph: JOURNEYS)
{
  """
  The email address of the visitor (will prevent
  SignUpEventSubmissionEventCreate mutation from updating this field
  automatically)
  """
  email: String

  """
  ID of the visitor. This could be a phone number, user id or other unique
  identifier provided by the message platform.
  """
  messagePlatformId: String

  """
  Message platform the visitor wishes to be connected to us on (will prevent
  ChatOpenEventCreate mutation from updating this field automatically)
  """
  messagePlatform: MessagePlatform

  """
  The name of the visitor (will prevent SignUpEventSubmissionEventCreate
  mutation from updating this field automatically)
  """
  name: String

  """
  Private notes relating to the visitor. This information is never made public
  and only accessible by team members.
  """
  notes: String

  """Status of the visitor."""
  status: VisitorStatus
}