schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

interface Action
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
}

input AddResourceFromGoogleDriveInput
  @join__type(graph: NEXUS)
{
  accessToken: String!
  fileId: String!
  nexusId: String!
}

type Batch
  @join__type(graph: NEXUS, key: "id")
{
  id: ID!
  nexusId: String!
  name: String!
  status: BatchStatus!
  tasks: [BatchTask!]!
  progress: Float
  createdAt: DateTime!
}

input BatchFilter
  @join__type(graph: NEXUS)
{
  ids: [ID!]
  name: String
  nexusId: String
  status: BatchStatus
  limit: Int
}

input BatchJobBatch
  @join__type(graph: NEXUS)
{
  id: ID!
  batchName: String!
}

input BatchJobInput
  @join__type(graph: NEXUS)
{
  batch: BatchJobBatch!
  resources: [BatchJobResource]!
}

input BatchJobResource
  @join__type(graph: NEXUS)
{
  resource: ID!
  channel: ID!
}

enum BatchStatus
  @join__type(graph: NEXUS)
{
  pending @join__enumValue(graph: NEXUS)
  running @join__enumValue(graph: NEXUS)
  completed @join__enumValue(graph: NEXUS)
  failed @join__enumValue(graph: NEXUS)
  cancelled @join__enumValue(graph: NEXUS)
  paused @join__enumValue(graph: NEXUS)
  error @join__enumValue(graph: NEXUS)
  warning @join__enumValue(graph: NEXUS)
  scheduled @join__enumValue(graph: NEXUS)
}

type BatchTask
  @join__type(graph: NEXUS, key: "id")
{
  id: ID!
  batchId: String!
  type: BatchTaskType!
  status: TaskStatus!
  progress: Float
  metadata: Object
  error: String
}

enum BatchTaskType
  @join__type(graph: NEXUS)
{
  video_upload @join__enumValue(graph: NEXUS)
  caption_processing @join__enumValue(graph: NEXUS)
  localization @join__enumValue(graph: NEXUS)
}

interface Block
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

input BlocksFilter
  @join__type(graph: JOURNEYS)
{
  journeyIds: [ID!]
  typenames: [String!]
}

type Browser
  @join__type(graph: JOURNEYS)
{
  name: String
  version: String
}

enum ButtonAction
  @join__type(graph: JOURNEYS)
{
  NavigateAction @join__enumValue(graph: JOURNEYS)
  NavigateToBlockAction @join__enumValue(graph: JOURNEYS)
  NavigateToJourneyAction @join__enumValue(graph: JOURNEYS)
  LinkAction @join__enumValue(graph: JOURNEYS)
  EmailAction @join__enumValue(graph: JOURNEYS)
}

type ButtonBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  action: Action
}

input ButtonBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
}

input ButtonBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
}

type ButtonClickEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the button"""
  value: String

  """Action type of the button when it was clicked"""
  action: ButtonAction

  """
  The label for each corresponding action, mapping below:
  NavigateAction - null
  NavigateToBlockAction - StepName (generated in client) of the StepBlock
  NavigateToJourneyAction - slug of the journey
  LinkAction - url of the link
  """
  actionValue: String
}

input ButtonClickEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """label of the button"""
  value: String

  """Action type of the button when it was clicked"""
  action: ButtonAction

  """
  The label for each corresponding action, mapping below:
  NavigateAction - undefined
  NavigateToBlockAction - StepName (generated in client) of the StepBlock
  NavigateToJourneyAction - slug of the journey
  LinkAction - url of the link
  """
  actionValue: String
}

enum ButtonColor
  @join__type(graph: JOURNEYS)
{
  primary @join__enumValue(graph: JOURNEYS)
  secondary @join__enumValue(graph: JOURNEYS)
  error @join__enumValue(graph: JOURNEYS)
  inherit @join__enumValue(graph: JOURNEYS)
}

enum ButtonSize
  @join__type(graph: JOURNEYS)
{
  small @join__enumValue(graph: JOURNEYS)
  medium @join__enumValue(graph: JOURNEYS)
  large @join__enumValue(graph: JOURNEYS)
}

enum ButtonVariant
  @join__type(graph: JOURNEYS)
{
  text @join__enumValue(graph: JOURNEYS)
  contained @join__enumValue(graph: JOURNEYS)
}

enum CacheControlScope
  @join__type(graph: LANGUAGES)
  @join__type(graph: VIDEOS)
{
  PUBLIC @join__enumValue(graph: LANGUAGES) @join__enumValue(graph: VIDEOS)
  PRIVATE @join__enumValue(graph: LANGUAGES) @join__enumValue(graph: VIDEOS)
}

type CardBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean!

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName
}

input CardBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

type Channel
  @join__type(graph: NEXUS, key: "id")
{
  id: ID!
  nexusId: String!
  name: String!
  platform: String
  connected: Boolean
  youtube: ChannelYoutube
  status: ChannelStatus!
  createdAt: DateTime!
}

input ChannelCreateInput
  @join__type(graph: NEXUS)
{
  nexusId: String!
  name: String!
  platform: String!
}

input ChannelFilter
  @join__type(graph: NEXUS)
{
  ids: [ID!]
  name: String
  nexusId: String
  limit: Int
  connected: Boolean
  status: ChannelStatus
}

enum ChannelStatus
  @join__type(graph: NEXUS)
{
  deleted @join__enumValue(graph: NEXUS)
  published @join__enumValue(graph: NEXUS)
}

input ChannelUpdateInput
  @join__type(graph: NEXUS)
{
  name: String
  nexusId: String
  platform: String
}

type ChannelYoutube
  @join__type(graph: NEXUS)
{
  id: ID!
  channelId: String
  channel: Channel
  title: String
  description: String
  youtubeId: String
  imageUrl: String
  refreshToken: String
}

type ChatButton
  @join__type(graph: JOURNEYS)
{
  id: ID!
  link: String
  platform: ChatPlatform
}

input ChatButtonCreateInput
  @join__type(graph: JOURNEYS)
{
  link: String
  platform: ChatPlatform
}

input ChatButtonUpdateInput
  @join__type(graph: JOURNEYS)
{
  link: String
  platform: ChatPlatform
}

type ChatOpenEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for ChatOpenEvent"""
  label: String

  """messagePlatform of the link used for chat"""
  value: String

  """
  messagePlatform of the link used for chat (based on the messagePlatform in the value field)
  """
  messagePlatform: MessagePlatform
}

input ChatOpenEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """messagePlatform of the link used for chat"""
  value: MessagePlatform
}

enum ChatPlatform
  @join__type(graph: JOURNEYS)
{
  facebook @join__enumValue(graph: JOURNEYS)
  telegram @join__enumValue(graph: JOURNEYS)
  whatsApp @join__enumValue(graph: JOURNEYS)
  instagram @join__enumValue(graph: JOURNEYS)
  viber @join__enumValue(graph: JOURNEYS)
  vk @join__enumValue(graph: JOURNEYS)
  snapchat @join__enumValue(graph: JOURNEYS)
  skype @join__enumValue(graph: JOURNEYS)
  line @join__enumValue(graph: JOURNEYS)
  tikTok @join__enumValue(graph: JOURNEYS)
  custom @join__enumValue(graph: JOURNEYS)
}

type CloudflareImage
  @join__type(graph: MEDIA)
{
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: String!
}

type CloudflareVideo
  @join__type(graph: MEDIA)
{
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: String!
  readyToStream: Boolean!
}

input ConnectYoutubeChannelInput
  @join__type(graph: NEXUS)
{
  channelId: String!
  authCode: String!
  redirectUri: String!
}

input CreateVerificationRequestInput
  @join__type(graph: USERS)
{
  redirect: String
}

type CustomDomain
  @join__type(graph: JOURNEYS)
{
  id: ID!
  team: Team!
  name: String!
  apexName: String!
  journeyCollection: JourneyCollection
  verification: CustomDomainVerification
  configuration: VercelDomainConfiguration
  routeAllTeamJourneys: Boolean!
}

input CustomDomainCreateInput
  @join__type(graph: JOURNEYS)
{
  teamId: String!
  name: String!
  journeyCollectionId: String
  routeAllTeamJourneys: Boolean
}

input CustomDomainUpdateInput
  @join__type(graph: JOURNEYS)
{
  id: ID!
  name: String
  journeyCollectionId: String
  routeAllTeamJourneys: Boolean
}

type CustomDomainVerification
  @join__type(graph: JOURNEYS)
{
  verified: Boolean!
  verification: [VercelDomainVerification]
}

scalar DateTime
  @join__type(graph: JOURNEYS)
  @join__type(graph: NEXUS)

type Device
  @join__type(graph: JOURNEYS)
{
  model: String
  type: DeviceType
  vendor: String
}

enum DeviceType
  @join__type(graph: JOURNEYS)
{
  console @join__enumValue(graph: JOURNEYS)
  mobile @join__enumValue(graph: JOURNEYS)
  tablet @join__enumValue(graph: JOURNEYS)
  smarttv @join__enumValue(graph: JOURNEYS)
  wearable @join__enumValue(graph: JOURNEYS)
  embedded @join__enumValue(graph: JOURNEYS)
}

type EmailAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
  email: String!
}

input EmailActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
  email: String!
}

interface Event
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  createdAt: DateTime!
  label: String
  value: String
}

type FormBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  action: Action
  form: Json
  projects: [FormiumProject!]!
  projectId: String
  forms: [FormiumForm!]!
  formSlug: String
  apiTokenExists: Boolean!
}

input FormBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

input FormBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  projectId: String
  apiToken: String
  formSlug: String
}

type FormiumForm
  @join__type(graph: JOURNEYS)
{
  """The formSlug of the form"""
  slug: String!

  """The name of the form"""
  name: String!
}

type FormiumProject
  @join__type(graph: JOURNEYS)
{
  """The projectId of the project"""
  id: String!

  """The name of the project"""
  name: String!
}

input GoogleAuthInput
  @join__type(graph: NEXUS)
{
  authCode: String!
  url: String!
}

type GoogleAuthResponse
  @join__type(graph: NEXUS)
{
  id: ID!
  accessToken: String!
}

enum GridAlignItems
  @join__type(graph: JOURNEYS)
{
  baseline @join__enumValue(graph: JOURNEYS)
  flexStart @join__enumValue(graph: JOURNEYS)
  flexEnd @join__enumValue(graph: JOURNEYS)
  center @join__enumValue(graph: JOURNEYS)
}

type GridContainerBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  spacing: Int!
  direction: GridDirection!
  justifyContent: GridJustifyContent!
  alignItems: GridAlignItems!
}

enum GridDirection
  @join__type(graph: JOURNEYS)
{
  columnReverse @join__enumValue(graph: JOURNEYS)
  column @join__enumValue(graph: JOURNEYS)
  row @join__enumValue(graph: JOURNEYS)
  rowReverse @join__enumValue(graph: JOURNEYS)
}

type GridItemBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  xl: Int!
  lg: Int!
  sm: Int!
}

enum GridJustifyContent
  @join__type(graph: JOURNEYS)
{
  flexStart @join__enumValue(graph: JOURNEYS)
  flexEnd @join__enumValue(graph: JOURNEYS)
  center @join__enumValue(graph: JOURNEYS)
}

type Host
  @join__type(graph: JOURNEYS)
{
  id: ID!
  teamId: ID!
  title: String!
  location: String
  src1: String
  src2: String
}

input HostCreateInput
  @join__type(graph: JOURNEYS)
{
  title: String!
  location: String
  src1: String
  src2: String
}

input HostUpdateInput
  @join__type(graph: JOURNEYS)
{
  """
  title can be undefined as to not update title, but it cannot be null as to clear the value of title
  """
  title: String
  location: String
  src1: String
  src2: String
}

type IconBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  name: IconName
  color: IconColor
  size: IconSize
}

enum IconColor
  @join__type(graph: JOURNEYS)
{
  primary @join__enumValue(graph: JOURNEYS)
  secondary @join__enumValue(graph: JOURNEYS)
  action @join__enumValue(graph: JOURNEYS)
  error @join__enumValue(graph: JOURNEYS)
  disabled @join__enumValue(graph: JOURNEYS)
  inherit @join__enumValue(graph: JOURNEYS)
}

"""IconName is equivalent to the icons found in @mui/icons-material"""
enum IconName
  @join__type(graph: JOURNEYS)
{
  PlayArrowRounded @join__enumValue(graph: JOURNEYS)
  TranslateRounded @join__enumValue(graph: JOURNEYS)
  CheckCircleRounded @join__enumValue(graph: JOURNEYS)
  RadioButtonUncheckedRounded @join__enumValue(graph: JOURNEYS)
  FormatQuoteRounded @join__enumValue(graph: JOURNEYS)
  LockOpenRounded @join__enumValue(graph: JOURNEYS)
  ArrowForwardRounded @join__enumValue(graph: JOURNEYS)
  ArrowBackRounded @join__enumValue(graph: JOURNEYS)
  ChatBubbleOutlineRounded @join__enumValue(graph: JOURNEYS)
  LiveTvRounded @join__enumValue(graph: JOURNEYS)
  MenuBookRounded @join__enumValue(graph: JOURNEYS)
  ChevronRightRounded @join__enumValue(graph: JOURNEYS)
  ChevronLeftRounded @join__enumValue(graph: JOURNEYS)
  BeenhereRounded @join__enumValue(graph: JOURNEYS)
  SendRounded @join__enumValue(graph: JOURNEYS)
  SubscriptionsRounded @join__enumValue(graph: JOURNEYS)
  ContactSupportRounded @join__enumValue(graph: JOURNEYS)
}

enum IconSize
  @join__type(graph: JOURNEYS)
{
  sm @join__enumValue(graph: JOURNEYS)
  md @join__enumValue(graph: JOURNEYS)
  lg @join__enumValue(graph: JOURNEYS)
  xl @join__enumValue(graph: JOURNEYS)
  inherit @join__enumValue(graph: JOURNEYS)
}

enum IdType
  @join__type(graph: JOURNEYS)
  @join__type(graph: VIDEOS)
{
  databaseId @join__enumValue(graph: JOURNEYS) @join__enumValue(graph: VIDEOS)
  slug @join__enumValue(graph: JOURNEYS) @join__enumValue(graph: VIDEOS)
}

type ImageBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  src: String
  width: Int!
  height: Int!
  alt: String!

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
}

input ImageBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
}

input ImageBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  src: String
  alt: String

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
}

scalar join__FieldSet

enum join__Graph {
  JOURNEYS @join__graph(name: "journeys", url: "http://127.0.0.1:4001/graphql")
  LANGUAGES @join__graph(name: "languages", url: "http://127.0.0.1:4003/graphql")
  MEDIA @join__graph(name: "media", url: "http://127.0.0.1:4005/graphql")
  NEXUS @join__graph(name: "nexus", url: "http://127.0.0.1:4007/graphql")
  TAGS @join__graph(name: "tags", url: "http://127.0.0.1:4006/graphql")
  USERS @join__graph(name: "users", url: "http://127.0.0.1:4002/graphql")
  VIDEOS @join__graph(name: "videos", url: "http://127.0.0.1:4004/graphql")
}

type Journey
  @join__type(graph: JOURNEYS, key: "id")
{
  blocks: [Block!]
  primaryImageBlock: ImageBlock
  creatorImageBlock: ImageBlock
  chatButtons: [ChatButton!]!
  id: ID!
  title: String!
  language: Language!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  creatorDescription: String
  slug: String!
  archivedAt: DateTime
  deletedAt: DateTime
  publishedAt: DateTime
  trashedAt: DateTime
  featuredAt: DateTime
  createdAt: DateTime!
  status: JourneyStatus!
  seoTitle: String
  seoDescription: String
  template: Boolean
  host: Host
  team: Team
  strategySlug: String
  tags: [Tag!]!
  journeyCollections: [JourneyCollection!]!
  userJourneys: [UserJourney!]
}

type JourneyCollection
  @join__type(graph: JOURNEYS)
{
  id: ID!
  team: Team!
  title: String
  customDomains: [CustomDomain!]
  journeys: [Journey!]
}

input JourneyCollectionCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  teamId: String!
  title: String
  journeyIds: [String!]
  customDomain: CustomDomainCreateInput
}

input JourneyCollectionUpdateInput
  @join__type(graph: JOURNEYS)
{
  id: ID!
  title: String
  journeyIds: [String!]
}

input JourneyCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String

  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

type JourneyProfile
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  userId: ID!
  acceptedTermsAt: DateTime
  lastActiveTeamId: String
  onboardingFormCompletedAt: DateTime
}

input JourneyProfileUpdateInput
  @join__type(graph: JOURNEYS)
{
  lastActiveTeamId: String
}

type JourneysEmailPreference
  @join__type(graph: JOURNEYS)
{
  email: String!
  unsubscribeAll: Boolean!
  accountNotifications: Boolean!
}

input JourneysEmailPreferenceUpdateInput
  @join__type(graph: JOURNEYS)
{
  email: String!
  preference: String!
  value: Boolean!
}

input JourneysFilter
  @join__type(graph: JOURNEYS)
{
  featured: Boolean
  template: Boolean
  ids: [ID!]
  tagIds: [ID!]
  languageIds: [ID!]
  limit: Int
  orderByRecent: Boolean
}

input JourneysQueryOptions
  @join__type(graph: JOURNEYS)
{
  """
  hostname filters journeys to those that belong to a team with a custom domain
  matching the hostname.
  """
  hostname: String

  """is this being requested from an embed url"""
  embedded: Boolean

  """
  limit results to journeys in a journey collection (currently only available when using hostname option)
  """
  journeyCollection: Boolean
}

enum JourneysReportType
  @join__type(graph: JOURNEYS)
{
  multipleFull @join__enumValue(graph: JOURNEYS)
  multipleSummary @join__enumValue(graph: JOURNEYS)
  singleFull @join__enumValue(graph: JOURNEYS)
  singleSummary @join__enumValue(graph: JOURNEYS)
}

enum JourneyStatus
  @join__type(graph: JOURNEYS)
{
  archived @join__enumValue(graph: JOURNEYS)
  deleted @join__enumValue(graph: JOURNEYS)
  draft @join__enumValue(graph: JOURNEYS)
  published @join__enumValue(graph: JOURNEYS)
  trashed @join__enumValue(graph: JOURNEYS)
}

input JourneyTemplateInput
  @join__type(graph: JOURNEYS)
{
  template: Boolean
}

input JourneyUpdateInput
  @join__type(graph: JOURNEYS)
{
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  creatorDescription: String
  creatorImageBlockId: ID
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
  hostId: String
  strategySlug: String
  tagIds: [ID!]
}

type JourneyViewEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey being viewed"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: String

  """
  language of the journey being viewed (based on the ID in the value field)
  """
  language: Language
}

input JourneyViewEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  journeyId: ID!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: ID
}

type JourneyVisitor
  @join__type(graph: JOURNEYS, key: "visitorId journeyId")
{
  visitorId: ID!
  journeyId: ID!

  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!

  """Duration between createdAt and lastStepViewedAt in seconds"""
  duration: Int

  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime

  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform

  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String

  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform

  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  notes: String

  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime

  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String

  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String

  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String

  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String
  events: [Event!]!
  visitor: Visitor!
}

type JourneyVisitorEdge
  @join__type(graph: JOURNEYS)
{
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: JourneyVisitor!
}

input JourneyVisitorFilter
  @join__type(graph: JOURNEYS)
{
  journeyId: String!
  hasChatStarted: Boolean
  hasPollAnswers: Boolean
  hasTextResponse: Boolean
  hasIcon: Boolean
  hideInactive: Boolean
  countryCode: String
}

type JourneyVisitorsConnection
  @join__type(graph: JOURNEYS)
{
  """A list of edges."""
  edges: [JourneyVisitorEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

enum JourneyVisitorSort
  @join__type(graph: JOURNEYS)
{
  date @join__enumValue(graph: JOURNEYS)
  duration @join__enumValue(graph: JOURNEYS)
  activity @join__enumValue(graph: JOURNEYS)
}

scalar Json
  @join__type(graph: JOURNEYS)

type Language
  @join__type(graph: JOURNEYS, key: "id")
  @join__type(graph: LANGUAGES, key: "id")
  @join__type(graph: MEDIA, key: "id")
  @join__type(graph: TAGS, key: "id")
  @join__type(graph: USERS, key: "id")
  @join__type(graph: VIDEOS, key: "id")
{
  id: ID!
  bcp47: String @join__field(graph: LANGUAGES)
  iso3: String @join__field(graph: LANGUAGES)
  name(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: LANGUAGES)
}

enum LanguageIdType
  @join__type(graph: LANGUAGES)
{
  databaseId @join__enumValue(graph: LANGUAGES)
  bcp47 @join__enumValue(graph: LANGUAGES)
}

input LanguagesFilter
  @join__type(graph: LANGUAGES)
{
  ids: [ID!]
}

type LanguageWithSlug
  @join__type(graph: VIDEOS)
{
  language: Language
  slug: String
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LinkAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
  url: String!
  target: String
}

input LinkActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
  url: String!
  target: String
}

input MeInput
  @join__type(graph: USERS)
{
  redirect: String
}

enum MessagePlatform
  @join__type(graph: JOURNEYS)
{
  facebook @join__enumValue(graph: JOURNEYS)
  telegram @join__enumValue(graph: JOURNEYS)
  whatsApp @join__enumValue(graph: JOURNEYS)
  instagram @join__enumValue(graph: JOURNEYS)
  viber @join__enumValue(graph: JOURNEYS)
  vk @join__enumValue(graph: JOURNEYS)
  snapchat @join__enumValue(graph: JOURNEYS)
  skype @join__enumValue(graph: JOURNEYS)
  line @join__enumValue(graph: JOURNEYS)
  tikTok @join__enumValue(graph: JOURNEYS)
  custom @join__enumValue(graph: JOURNEYS)
}

type Mutation
  @join__type(graph: JOURNEYS)
  @join__type(graph: MEDIA)
  @join__type(graph: NEXUS)
  @join__type(graph: USERS)
{
  blockDeleteAction(id: ID!, journeyId: ID!): Block! @join__field(graph: JOURNEYS)
  blockUpdateNavigateAction(id: ID!, journeyId: ID!, input: NavigateActionInput!): NavigateAction! @join__field(graph: JOURNEYS)
  blockUpdateNavigateToBlockAction(id: ID!, journeyId: ID!, input: NavigateToBlockActionInput!): NavigateToBlockAction! @join__field(graph: JOURNEYS)
  blockUpdateNavigateToJourneyAction(id: ID!, journeyId: ID!, input: NavigateToJourneyActionInput!): NavigateToJourneyAction! @join__field(graph: JOURNEYS)
  blockUpdateLinkAction(id: ID!, journeyId: ID!, input: LinkActionInput!): LinkAction! @join__field(graph: JOURNEYS)
  blockUpdateEmailAction(id: ID!, journeyId: ID!, input: EmailActionInput!): EmailAction! @join__field(graph: JOURNEYS)

  """blockDelete returns the updated sibling blocks on successful delete"""
  blockDelete(
    id: ID!

    """drop this parameter after merging teams"""
    journeyId: ID

    """drop this parameter after merging teams"""
    parentBlockId: ID
  ): [Block!]! @join__field(graph: JOURNEYS)

  """
  blockDuplicate returns the updated block, it's children and sibling blocks on successful duplicate
  """
  blockDuplicate(
    id: ID!

    """
    parentOrder defines the position to add the duplicated block. Negative values defines the position from the end of the array. Positions greater than the length of the array or null parentOrder will add duplicate at end of the array.
    """
    parentOrder: Int

    """drop this parameter after merging teams"""
    journeyId: ID
  ): [Block!]! @join__field(graph: JOURNEYS)
  blockOrderUpdate(
    id: ID!
    parentOrder: Int!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): [Block!]! @join__field(graph: JOURNEYS)
  buttonBlockCreate(input: ButtonBlockCreateInput!): ButtonBlock! @join__field(graph: JOURNEYS)
  buttonBlockUpdate(
    id: ID!
    input: ButtonBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ButtonBlock @join__field(graph: JOURNEYS)
  cardBlockCreate(input: CardBlockCreateInput!): CardBlock! @join__field(graph: JOURNEYS)
  cardBlockUpdate(
    id: ID!
    input: CardBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): CardBlock! @join__field(graph: JOURNEYS)
  formBlockCreate(input: FormBlockCreateInput!): FormBlock! @join__field(graph: JOURNEYS)
  formBlockUpdate(id: ID!, input: FormBlockUpdateInput!): FormBlock @join__field(graph: JOURNEYS)
  iconBlockCreate(input: IconBlockCreateInput!): IconBlock! @join__field(graph: JOURNEYS)
  iconBlockUpdate(
    id: ID!
    input: IconBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): IconBlock! @join__field(graph: JOURNEYS)
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock! @join__field(graph: JOURNEYS)
  imageBlockUpdate(
    id: ID!
    input: ImageBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ImageBlock! @join__field(graph: JOURNEYS)
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!): RadioOptionBlock! @join__field(graph: JOURNEYS)
  radioOptionBlockUpdate(
    id: ID!
    input: RadioOptionBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): RadioOptionBlock! @join__field(graph: JOURNEYS)
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!): RadioQuestionBlock! @join__field(graph: JOURNEYS)
  radioQuestionBlockUpdate(
    id: ID!
    parentBlockId: ID!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): RadioQuestionBlock! @join__field(graph: JOURNEYS)
  signUpBlockCreate(input: SignUpBlockCreateInput!): SignUpBlock! @join__field(graph: JOURNEYS)
  signUpBlockUpdate(
    id: ID!
    input: SignUpBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): SignUpBlock @join__field(graph: JOURNEYS)
  stepBlockCreate(input: StepBlockCreateInput!): StepBlock! @join__field(graph: JOURNEYS)
  stepBlockUpdate(
    id: ID!
    input: StepBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): StepBlock! @join__field(graph: JOURNEYS)
  textResponseBlockCreate(input: TextResponseBlockCreateInput!): TextResponseBlock! @join__field(graph: JOURNEYS)
  textResponseBlockUpdate(
    id: ID!
    input: TextResponseBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TextResponseBlock @join__field(graph: JOURNEYS)
  typographyBlockCreate(input: TypographyBlockCreateInput!): TypographyBlock! @join__field(graph: JOURNEYS)
  typographyBlockUpdate(
    id: ID!
    input: TypographyBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TypographyBlock! @join__field(graph: JOURNEYS)
  videoBlockCreate(input: VideoBlockCreateInput!): VideoBlock! @join__field(graph: JOURNEYS)
  videoBlockUpdate(
    id: ID!
    input: VideoBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): VideoBlock! @join__field(graph: JOURNEYS)
  chatButtonCreate(journeyId: ID!, input: ChatButtonCreateInput): ChatButton! @join__field(graph: JOURNEYS)
  chatButtonUpdate(id: ID!, journeyId: ID!, input: ChatButtonUpdateInput!): ChatButton! @join__field(graph: JOURNEYS)
  chatButtonRemove(id: ID!): ChatButton! @join__field(graph: JOURNEYS)
  customDomainCreate(input: CustomDomainCreateInput!): CustomDomain! @join__field(graph: JOURNEYS)
  customDomainUpdate(input: CustomDomainUpdateInput!): CustomDomain! @join__field(graph: JOURNEYS)
  customDomainDelete(id: ID!): CustomDomain! @join__field(graph: JOURNEYS)
  buttonClickEventCreate(input: ButtonClickEventCreateInput!): ButtonClickEvent! @join__field(graph: JOURNEYS)
  chatOpenEventCreate(input: ChatOpenEventCreateInput!): ChatOpenEvent! @join__field(graph: JOURNEYS)
  journeyViewEventCreate(input: JourneyViewEventCreateInput!): JourneyViewEvent! @join__field(graph: JOURNEYS)
  radioQuestionSubmissionEventCreate(input: RadioQuestionSubmissionEventCreateInput!): RadioQuestionSubmissionEvent! @join__field(graph: JOURNEYS)
  signUpSubmissionEventCreate(input: SignUpSubmissionEventCreateInput!): SignUpSubmissionEvent! @join__field(graph: JOURNEYS)
  stepViewEventCreate(input: StepViewEventCreateInput!): StepViewEvent! @join__field(graph: JOURNEYS)
  stepNextEventCreate(input: StepNextEventCreateInput!): StepNextEvent! @join__field(graph: JOURNEYS)
  stepPreviousEventCreate(input: StepPreviousEventCreateInput!): StepPreviousEvent! @join__field(graph: JOURNEYS)
  textResponseSubmissionEventCreate(input: TextResponseSubmissionEventCreateInput!): TextResponseSubmissionEvent! @join__field(graph: JOURNEYS)
  videoStartEventCreate(input: VideoStartEventCreateInput!): VideoStartEvent! @join__field(graph: JOURNEYS)
  videoPlayEventCreate(input: VideoPlayEventCreateInput!): VideoPlayEvent! @join__field(graph: JOURNEYS)
  videoPauseEventCreate(input: VideoPauseEventCreateInput!): VideoPauseEvent! @join__field(graph: JOURNEYS)
  videoCompleteEventCreate(input: VideoCompleteEventCreateInput!): VideoCompleteEvent! @join__field(graph: JOURNEYS)
  videoExpandEventCreate(input: VideoExpandEventCreateInput!): VideoExpandEvent! @join__field(graph: JOURNEYS)
  videoCollapseEventCreate(input: VideoCollapseEventCreateInput!): VideoCollapseEvent! @join__field(graph: JOURNEYS)
  videoProgressEventCreate(input: VideoProgressEventCreateInput!): VideoProgressEvent! @join__field(graph: JOURNEYS)
  hostCreate(teamId: ID!, input: HostCreateInput!): Host! @join__field(graph: JOURNEYS)
  hostUpdate(id: ID!, teamId: ID!, input: HostUpdateInput): Host! @join__field(graph: JOURNEYS)
  hostDelete(id: ID!, teamId: ID!): Host! @join__field(graph: JOURNEYS)
  journeyCreate(input: JourneyCreateInput!, teamId: ID!): Journey! @join__field(graph: JOURNEYS)
  journeyDuplicate(id: ID!, teamId: ID!): Journey! @join__field(graph: JOURNEYS)
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey! @join__field(graph: JOURNEYS)

  """Sets journey status to published"""
  journeyPublish(id: ID!): Journey @join__field(graph: JOURNEYS)

  """Sets journey status to featured"""
  journeyFeature(id: ID!, feature: Boolean!): Journey @join__field(graph: JOURNEYS)

  """Sets journeys statuses to archived"""
  journeysArchive(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Sets journeys statuses to deleted"""
  journeysDelete(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Sets journeys statuses to trashed"""
  journeysTrash(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Sets journeys statuses to last active status"""
  journeysRestore(ids: [ID!]!): [Journey] @join__field(graph: JOURNEYS)

  """Updates template"""
  journeyTemplate(id: ID!, input: JourneyTemplateInput!): Journey! @join__field(graph: JOURNEYS)
  journeyCollectionCreate(input: JourneyCollectionCreateInput!): JourneyCollection! @join__field(graph: JOURNEYS)
  journeyCollectionUpdate(input: JourneyCollectionUpdateInput!): JourneyCollection! @join__field(graph: JOURNEYS)
  journeyCollectionDelete(id: ID!): JourneyCollection! @join__field(graph: JOURNEYS)
  journeyProfileCreate: JourneyProfile! @join__field(graph: JOURNEYS)
  journeyProfileUpdate(input: JourneyProfileUpdateInput!): JourneyProfile! @join__field(graph: JOURNEYS)
  journeyProfileOnboardingFormComplete: JourneyProfile! @join__field(graph: JOURNEYS)
  updateJourneysEmailPreference(input: JourneysEmailPreferenceUpdateInput!): JourneysEmailPreference @join__field(graph: JOURNEYS)
  teamCreate(input: TeamCreateInput): Team! @join__field(graph: JOURNEYS)
  teamUpdate(id: ID!, input: TeamUpdateInput): Team! @join__field(graph: JOURNEYS)
  userInviteCreate(journeyId: ID!, input: UserInviteCreateInput): UserInvite @join__field(graph: JOURNEYS)
  userInviteRemove(id: ID!, journeyId: ID!): UserInvite! @join__field(graph: JOURNEYS)
  userInviteAcceptAll: [UserInvite!]! @join__field(graph: JOURNEYS)
  userJourneyApprove(id: ID!): UserJourney! @join__field(graph: JOURNEYS)
  userJourneyPromote(id: ID!): UserJourney! @join__field(graph: JOURNEYS)
  userJourneyRemove(id: ID!): UserJourney! @join__field(graph: JOURNEYS)

  """Removes all userJourneys associated with a journeyId"""
  userJourneyRemoveAll(id: ID!): [UserJourney!]! @join__field(graph: JOURNEYS)
  userJourneyRequest(
    journeyId: ID!

    """drop this parameter after merging teams"""
    idType: IdType
  ): UserJourney! @join__field(graph: JOURNEYS)
  userJourneyOpen(id: ID!): UserJourney @join__field(graph: JOURNEYS)
  userTeamUpdate(id: ID!, input: UserTeamUpdateInput): UserTeam! @join__field(graph: JOURNEYS)
  userTeamDelete(id: ID!): UserTeam! @join__field(graph: JOURNEYS)
  userTeamInviteCreate(teamId: ID!, input: UserTeamInviteCreateInput): UserTeamInvite @join__field(graph: JOURNEYS)
  userTeamInviteRemove(id: ID!): UserTeamInvite! @join__field(graph: JOURNEYS)
  userTeamInviteAcceptAll: [UserTeamInvite!]! @join__field(graph: JOURNEYS)

  """Update a visitor"""
  visitorUpdate(id: ID!, input: VisitorUpdateInput!): Visitor! @join__field(graph: JOURNEYS)

  """
  Allow current user to update specific allowable fields of their visitor record
  """
  visitorUpdateForCurrentUser(input: VisitorUpdateInput!): Visitor! @join__field(graph: JOURNEYS)
  createCloudflareUploadByFile: CloudflareImage @join__field(graph: MEDIA)
  createCloudflareUploadByUrl(url: String!): CloudflareImage @join__field(graph: MEDIA)
  deleteCloudflareImage(id: ID!): Boolean @join__field(graph: MEDIA)
  cloudflareUploadComplete(id: ID!): Boolean @join__field(graph: MEDIA)
  createCloudflareVideoUploadByFile(uploadLength: Int!, name: String!): CloudflareVideo @join__field(graph: MEDIA)
  createCloudflareVideoUploadByUrl(url: String!): CloudflareVideo @join__field(graph: MEDIA)
  deleteCloudflareVideo(id: ID!): Boolean @join__field(graph: MEDIA)
  createImageBySegmindPrompt(prompt: String!, model: SegmindModel!): CloudflareImage @join__field(graph: MEDIA)
  triggerUnsplashDownload(url: String!): Boolean @join__field(graph: MEDIA)
  channelCreate(input: ChannelCreateInput!): Channel! @join__field(graph: NEXUS)
  channelUpdate(id: ID!, input: ChannelUpdateInput!): Channel! @join__field(graph: NEXUS)
  channelDelete(id: ID!): Channel! @join__field(graph: NEXUS)
  connectYoutubeChannel(input: ConnectYoutubeChannelInput!): Channel! @join__field(graph: NEXUS)
  nexusCreate(input: NexusCreateInput!): Nexus! @join__field(graph: NEXUS)
  nexusUpdate(id: ID!, input: NexusUpdateInput!): Nexus! @join__field(graph: NEXUS)
  nexusDelete(id: ID!): Boolean! @join__field(graph: NEXUS)
  resourceCreate(input: ResourceCreateInput!): Resource! @join__field(graph: NEXUS)
  resourceUpdate(id: ID!, input: ResourceUpdateInput!): Resource! @join__field(graph: NEXUS)
  resourceDelete(id: ID!): Resource! @join__field(graph: NEXUS)
  resourceFromGoogleDrive(input: ResourceFromGoogleDriveInput!): [Resource!] @join__field(graph: NEXUS)
  resourceFromTemplate(nexusId: String!, tokenId: String!, spreadsheetId: String!, drivefolderId: String!): [Resource!] @join__field(graph: NEXUS)
  getGoogleAccessToken(input: GoogleAuthInput!): GoogleAuthResponse! @join__field(graph: NEXUS)
  uploadToYoutube(channelId: String!, resourceId: String!): Boolean @join__field(graph: NEXUS)
  resourceBatchJob(input: BatchJobInput!): String @join__field(graph: NEXUS)
  userImpersonate(email: String!): String @join__field(graph: USERS)
  createVerificationRequest(input: CreateVerificationRequestInput): Boolean @join__field(graph: USERS)
  validateEmail(email: String!, token: String!): User @join__field(graph: USERS)
}

"""
NavigateAction is an Action that navigates to the nextBlockId field set on the
closest ancestor StepBlock.
"""
type NavigateAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
}

input NavigateActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
}

type NavigateToBlockAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
  blockId: String!
}

input NavigateToBlockActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
  blockId: String!
}

type NavigateToJourneyAction implements Action
  @join__implements(graph: JOURNEYS, interface: "Action")
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID!
  gtmEventName: String
  journeyId: String!
  journey: Journey
}

input NavigateToJourneyActionInput
  @join__type(graph: JOURNEYS)
{
  gtmEventName: String
  journeyId: String!
}

type Nexus
  @join__type(graph: NEXUS, key: "id")
{
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  deletedAt: DateTime
  status: NexusStatus!
}

input NexusCreateInput
  @join__type(graph: NEXUS)
{
  name: String!
  description: String
}

input NexusFilter
  @join__type(graph: NEXUS)
{
  ids: [ID!]
  name: String
  description: String
  createdAt: DateTime
  limit: Int
  orderByRecent: Boolean
}

enum NexusStatus
  @join__type(graph: NEXUS)
{
  deleted @join__enumValue(graph: NEXUS)
  published @join__enumValue(graph: NEXUS)
}

input NexusUpdateInput
  @join__type(graph: NEXUS)
{
  name: String
  description: String
}

scalar Object
  @join__type(graph: NEXUS)

type OperatingSystem
  @join__type(graph: JOURNEYS)
{
  name: String
  version: String
}

"""Information about pagination in a connection."""
type PageInfo
  @join__type(graph: JOURNEYS)
{
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PowerBiEmbed
  @join__type(graph: JOURNEYS)
{
  """The report ID"""
  reportId: String!

  """The name of the report"""
  reportName: String!

  """The embed URL of the report"""
  embedUrl: String!

  """The embed token"""
  accessToken: String!

  """The date and time (UTC) of token expiration"""
  expiration: String!
}

enum PrivacyStatus
  @join__type(graph: NEXUS)
{
  public @join__enumValue(graph: NEXUS)
  unlisted @join__enumValue(graph: NEXUS)
  private @join__enumValue(graph: NEXUS)
}

type Query
  @join__type(graph: JOURNEYS)
  @join__type(graph: LANGUAGES)
  @join__type(graph: MEDIA)
  @join__type(graph: NEXUS)
  @join__type(graph: TAGS)
  @join__type(graph: USERS)
  @join__type(graph: VIDEOS)
{
  blocks(where: BlocksFilter): [Block!]! @join__field(graph: JOURNEYS)
  block(id: ID!): Block! @join__field(graph: JOURNEYS)
  customDomain(id: ID!): CustomDomain! @join__field(graph: JOURNEYS)
  customDomains(teamId: ID!): [CustomDomain!]! @join__field(graph: JOURNEYS)
  hosts(teamId: ID!): [Host!]! @join__field(graph: JOURNEYS)

  """
  returns all journeys that match the provided filters
  If no team id is provided and template is not true then only returns journeys
  where the user is not a member of a team but is an editor or owner of the
  journey
  """
  adminJourneys(
    status: [JourneyStatus!]
    template: Boolean
    teamId: ID

    """Use Last Active Team Id from JourneyProfile (if null will error)"""
    useLastActiveTeamId: Boolean
  ): [Journey!]! @join__field(graph: JOURNEYS)
  adminJourneysReport(reportType: JourneysReportType!): PowerBiEmbed @join__field(graph: JOURNEYS)
  adminJourney(id: ID!, idType: IdType): Journey! @join__field(graph: JOURNEYS)
  journeys(where: JourneysFilter, options: JourneysQueryOptions): [Journey!]! @join__field(graph: JOURNEYS)
  journey(id: ID!, idType: IdType, options: JourneysQueryOptions): Journey! @join__field(graph: JOURNEYS)
  journeyCollection(id: ID!): JourneyCollection! @join__field(graph: JOURNEYS)
  journeyCollections(teamId: ID!): [JourneyCollection]! @join__field(graph: JOURNEYS)
  getJourneyProfile: JourneyProfile @join__field(graph: JOURNEYS)

  """Get a list of Visitor Information by Journey"""
  journeyVisitorsConnection(
    """Returns the elements in the list that match the specified filter."""
    filter: JourneyVisitorFilter!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Specifies the sort field for the list."""
    sort: JourneyVisitorSort
  ): JourneyVisitorsConnection! @join__field(graph: JOURNEYS)

  """Get a JourneyVisitor count by JourneyVisitorFilter"""
  journeyVisitorCount(filter: JourneyVisitorFilter!): Int! @join__field(graph: JOURNEYS)
  journeysEmailPreference(email: String!): JourneysEmailPreference @join__field(graph: JOURNEYS)
  teams: [Team!]! @join__field(graph: JOURNEYS)
  team(id: ID!): Team! @join__field(graph: JOURNEYS)
  userInvites(journeyId: ID!): [UserInvite!] @join__field(graph: JOURNEYS)
  getUserRole: UserRole @join__field(graph: JOURNEYS)
  userTeams(teamId: ID!, where: UserTeamFilterInput): [UserTeam!]! @join__field(graph: JOURNEYS)
  userTeam(id: ID!): UserTeam! @join__field(graph: JOURNEYS)
  userTeamInvites(teamId: ID!): [UserTeamInvite!]! @join__field(graph: JOURNEYS)

  """A list of visitors that are connected with a specific team."""
  visitorsConnection(
    """Returns the visitor items related to a specific team."""
    teamId: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): VisitorsConnection! @join__field(graph: JOURNEYS)

  """Get a single visitor"""
  visitor(id: ID!): Visitor! @join__field(graph: JOURNEYS)
  languages(offset: Int, limit: Int, where: LanguagesFilter): [Language!]! @join__field(graph: LANGUAGES)
  language(id: ID!, idType: LanguageIdType): Language @join__field(graph: LANGUAGES)
  getMyCloudflareImages: [CloudflareImage] @join__field(graph: MEDIA)
  getMyCloudflareVideos: [CloudflareVideo] @join__field(graph: MEDIA)
  getMyCloudflareVideo(id: ID!): CloudflareVideo @join__field(graph: MEDIA)
  listUnsplashCollectionPhotos(collectionId: String!, page: Int, perPage: Int, orientation: UnsplashPhotoOrientation): [UnsplashPhoto!]! @join__field(graph: MEDIA)
  searchUnsplashPhotos(query: String!, page: Int, perPage: Int, orderBy: UnsplashOrderBy, collections: [String], contentFilter: UnsplashContentFilter, color: UnsplashColor, orientation: UnsplashPhotoOrientation): UnsplashQueryResponse! @join__field(graph: MEDIA)
  batches(where: BatchFilter): [Batch!] @join__field(graph: NEXUS)
  batch(id: ID!): Batch! @join__field(graph: NEXUS)
  channels(where: ChannelFilter): [Channel!] @join__field(graph: NEXUS)
  channel(id: ID!): Channel! @join__field(graph: NEXUS)
  nexuses(where: NexusFilter): [Nexus!]! @join__field(graph: NEXUS)
  nexus(id: ID!): Nexus! @join__field(graph: NEXUS)
  resources(where: ResourceFilter): [Resource!] @join__field(graph: NEXUS)
  resource(id: ID!): Resource! @join__field(graph: NEXUS)
  tags: [Tag!]! @join__field(graph: TAGS)
  me(input: MeInput): User @join__field(graph: USERS)
  user(id: ID!): User @join__field(graph: USERS)
  userByEmail(email: String!): User @join__field(graph: USERS)
  videos(where: VideosFilter, offset: Int, limit: Int): [Video!]! @join__field(graph: VIDEOS)
  video(id: ID!, idType: IdType): Video @join__field(graph: VIDEOS)
}

type RadioOptionBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  action: Action
}

input RadioOptionBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  label: String
}

type RadioQuestionBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

input RadioQuestionBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

type RadioQuestionSubmissionEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the radioQuestionBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOptionBlock"""
  value: String
}

input RadioQuestionSubmissionEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  radioOptionBlockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOption block"""
  value: String
}

type Resource
  @join__type(graph: NEXUS, key: "id")
{
  id: ID!
  nexusId: String!
  nexus: Nexus!
  name: String!
  status: ResourceStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  googleDriveLink: String
  category: String!
  privacy: PrivacyStatus!
  sourceType: SourceType!
  localizations: [ResourceLocalization]!
}

input ResourceCreateInput
  @join__type(graph: NEXUS)
{
  nexusId: String!
  name: String!
}

input ResourceFilter
  @join__type(graph: NEXUS)
{
  ids: [ID!]
  name: String
  nexusId: String
  status: ResourceStatus
  limit: Int
}

input ResourceFromGoogleDriveInput
  @join__type(graph: NEXUS)
{
  fileIds: [String!]!
  authCode: String!
  nexusId: String!
}

input ResourceFromSpreadsheetInput
  @join__type(graph: NEXUS)
{
  file: Upload
  nexusId: String!
}

type ResourceLocalization
  @join__type(graph: NEXUS, key: "id")
{
  id: ID!
  resourceId: String!
  title: String!
  description: String!
  keywords: String!
  language: String!
}

enum ResourceStatus
  @join__type(graph: NEXUS)
{
  deleted @join__enumValue(graph: NEXUS)
  published @join__enumValue(graph: NEXUS)
  processing @join__enumValue(graph: NEXUS)
  error @join__enumValue(graph: NEXUS)
  uploaded @join__enumValue(graph: NEXUS)
}

input ResourceUpdateInput
  @join__type(graph: NEXUS)
{
  name: String
}

enum Role
  @join__type(graph: JOURNEYS)
{
  """
  User can create templates and
  add them to template library
  """
  publisher @join__enumValue(graph: JOURNEYS)
}

enum SegmindModel
  @join__type(graph: MEDIA)
{
  sdxl1__0_txt2img @join__enumValue(graph: MEDIA)
  kandinsky2__2_txt2img @join__enumValue(graph: MEDIA)
  sd1__5_paragon @join__enumValue(graph: MEDIA)
  tinysd1__5_txt2img @join__enumValue(graph: MEDIA)
}

enum Service
  @join__type(graph: TAGS)
{
  apiJourneys @join__enumValue(graph: TAGS)
  apiLanguages @join__enumValue(graph: TAGS)
  apiMedia @join__enumValue(graph: TAGS)
  apiTags @join__enumValue(graph: TAGS)
  apiUsers @join__enumValue(graph: TAGS)
  apiVideos @join__enumValue(graph: TAGS)
}

type SignUpBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

input SignUpBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

type SignUpSubmissionEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the block belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for signUpSubmissionEvent"""
  label: String

  """name from the signUpBlock form"""
  value: String

  """email from the signUpBlock form"""
  email: String
}

input SignUpSubmissionEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """name from the signUpBlock form"""
  name: String!

  """email from the signUpBlock form"""
  email: String!
}

enum SourceType
  @join__type(graph: NEXUS)
{
  googleDrive @join__enumValue(graph: NEXUS)
  template @join__enumValue(graph: NEXUS)
  archlight @join__enumValue(graph: NEXUS)
  other @join__enumValue(graph: NEXUS)
}

type StepBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!

  """
  nextBlockId contains the preferred block to navigate to when a
  NavigateAction occurs or if the user manually tries to advance to the next
  step. If no nextBlockId is set it will automatically navigate to the next
  step in the journey based on parentOrder.
  """
  nextBlockId: ID

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  parentBlockId: ID
  parentOrder: Int

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
}

input StepBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
}

input StepBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
}

type StepNextEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

input StepNextEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """id of the next stepBlock"""
  nextStepId: ID!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

type StepPreviousEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the previous stepBlock"""
  value: String
}

input StepPreviousEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """id of the previous stepBlock"""
  previousStepId: ID!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the previous stepBlock"""
  value: String
}

type StepViewEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for stepViewEvent"""
  label: String

  """stepName of the stepBlock"""
  value: String
}

input StepViewEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """stepName of the current stepBlock"""
  value: String
}

type Tag
  @join__type(graph: JOURNEYS, key: "id")
  @join__type(graph: TAGS, key: "id")
{
  id: ID!
  name: [Translation!]! @join__field(graph: TAGS)
  parentId: ID @join__field(graph: TAGS)
  service: Service @join__field(graph: TAGS)
}

enum TaskStatus
  @join__type(graph: NEXUS)
{
  pending @join__enumValue(graph: NEXUS)
  processing @join__enumValue(graph: NEXUS)
  completed @join__enumValue(graph: NEXUS)
  failed @join__enumValue(graph: NEXUS)
}

type Team
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  title: String!
  publicTitle: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userTeams: [UserTeam!]!
  customDomains: [CustomDomain!]!
}

input TeamCreateInput
  @join__type(graph: JOURNEYS)
{
  title: String!
  publicTitle: String
}

input TeamUpdateInput
  @join__type(graph: JOURNEYS)
{
  title: String!
  publicTitle: String
}

type TextResponseBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  hint: String
  minRows: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

input TextResponseBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  submitLabel: String!
}

input TextResponseBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  label: String
  hint: String
  minRows: Int
  submitIconId: ID
  submitLabel: String
}

type TextResponseSubmissionEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String
}

input TextResponseSubmissionEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String!
}

enum ThemeMode
  @join__type(graph: JOURNEYS)
{
  dark @join__enumValue(graph: JOURNEYS)
  light @join__enumValue(graph: JOURNEYS)
}

enum ThemeName
  @join__type(graph: JOURNEYS)
{
  base @join__enumValue(graph: JOURNEYS)
}

type Translation
  @join__type(graph: JOURNEYS)
  @join__type(graph: LANGUAGES)
  @join__type(graph: MEDIA)
  @join__type(graph: TAGS)
  @join__type(graph: USERS)
  @join__type(graph: VIDEOS)
{
  value: String!
  language: Language!
  primary: Boolean!
}

enum TypographyAlign
  @join__type(graph: JOURNEYS)
{
  left @join__enumValue(graph: JOURNEYS)
  center @join__enumValue(graph: JOURNEYS)
  right @join__enumValue(graph: JOURNEYS)
}

type TypographyBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

enum TypographyColor
  @join__type(graph: JOURNEYS)
{
  primary @join__enumValue(graph: JOURNEYS)
  secondary @join__enumValue(graph: JOURNEYS)
  error @join__enumValue(graph: JOURNEYS)
}

enum TypographyVariant
  @join__type(graph: JOURNEYS)
{
  h1 @join__enumValue(graph: JOURNEYS)
  h2 @join__enumValue(graph: JOURNEYS)
  h3 @join__enumValue(graph: JOURNEYS)
  h4 @join__enumValue(graph: JOURNEYS)
  h5 @join__enumValue(graph: JOURNEYS)
  h6 @join__enumValue(graph: JOURNEYS)
  subtitle1 @join__enumValue(graph: JOURNEYS)
  subtitle2 @join__enumValue(graph: JOURNEYS)
  body1 @join__enumValue(graph: JOURNEYS)
  body2 @join__enumValue(graph: JOURNEYS)
  caption @join__enumValue(graph: JOURNEYS)
  overline @join__enumValue(graph: JOURNEYS)
}

enum UnsplashColor
  @join__type(graph: MEDIA)
{
  black_and_white @join__enumValue(graph: MEDIA)
  black @join__enumValue(graph: MEDIA)
  white @join__enumValue(graph: MEDIA)
  yellow @join__enumValue(graph: MEDIA)
  orange @join__enumValue(graph: MEDIA)
  red @join__enumValue(graph: MEDIA)
  purple @join__enumValue(graph: MEDIA)
  magenta @join__enumValue(graph: MEDIA)
  green @join__enumValue(graph: MEDIA)
  teal @join__enumValue(graph: MEDIA)
  blue @join__enumValue(graph: MEDIA)
}

enum UnsplashContentFilter
  @join__type(graph: MEDIA)
{
  low @join__enumValue(graph: MEDIA)
  high @join__enumValue(graph: MEDIA)
}

enum UnsplashOrderBy
  @join__type(graph: MEDIA)
{
  latest @join__enumValue(graph: MEDIA)
  relevant @join__enumValue(graph: MEDIA)
}

type UnsplashPhoto
  @join__type(graph: MEDIA)
{
  id: String!
  created_at: String!
  updated_at: String
  blur_hash: String!
  width: Int!
  height: Int!
  color: String
  description: String
  alt_description: String
  urls: UnsplashPhotoUrls!
  links: UnsplashPhotoLinks!
  categories: [String!]
  likes: Int!
  liked_by_user: Boolean!
  current_user_collections: [String!]!
  user: UnsplashUser!
}

type UnsplashPhotoLinks
  @join__type(graph: MEDIA)
{
  self: String!
  html: String!
  download: String!
  download_location: String!
}

enum UnsplashPhotoOrientation
  @join__type(graph: MEDIA)
{
  landscape @join__enumValue(graph: MEDIA)
  portrait @join__enumValue(graph: MEDIA)
  squarish @join__enumValue(graph: MEDIA)
}

type UnsplashPhotoUrls
  @join__type(graph: MEDIA)
{
  raw: String!
  full: String!
  regular: String!
  small: String!
  thumb: String!
}

type UnsplashQueryResponse
  @join__type(graph: MEDIA)
{
  total: Int!
  total_pages: Int!
  results: [UnsplashPhoto!]!
}

type UnsplashUser
  @join__type(graph: MEDIA)
{
  id: String!
  updated_at: String
  username: String!
  name: String
  first_name: String
  last_name: String
  twitter_username: String
  portfolio_url: String
  bio: String
  location: String
  links: UnsplashUserLinks!
  profile_image: UnsplashUserImage
  instagram_username: String
  total_collections: Int!
  total_likes: Int!
  total_photos: Int!
  accepted_tos: Boolean!
}

type UnsplashUserImage
  @join__type(graph: MEDIA)
{
  small: String!
  medium: String!
  large: String!
}

type UnsplashUserLinks
  @join__type(graph: MEDIA)
{
  self: String!
  html: String!
  photos: String!
  likes: String!
  portfolio: String!
  following: String!
  followers: String!
}

scalar Upload
  @join__type(graph: NEXUS)

type User
  @join__type(graph: JOURNEYS, key: "id")
  @join__type(graph: USERS, key: "id")
{
  id: ID!
  firstName: String! @join__field(graph: USERS)
  lastName: String @join__field(graph: USERS)
  email: String! @join__field(graph: USERS)
  imageUrl: String @join__field(graph: USERS)
  superAdmin: Boolean @join__field(graph: USERS)
  emailVerified: Boolean! @join__field(graph: USERS)
}

"""These types are a subset provided by the @types/ua-parser-js library."""
type UserAgent
  @join__type(graph: JOURNEYS)
{
  browser: Browser!
  device: Device!
  os: OperatingSystem!
}

type UserInvite
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  journeyId: ID!
  senderId: ID!
  email: String!
  acceptedAt: DateTime
  removedAt: DateTime
}

input UserInviteCreateInput
  @join__type(graph: JOURNEYS)
{
  email: String!
}

type UserJourney
  @join__type(graph: JOURNEYS, key: "id")
{
  journey: Journey
  id: ID!
  userId: ID!
  journeyId: ID!
  role: UserJourneyRole!
  user: User

  """Date time of when the journey was first opened"""
  openedAt: DateTime
}

enum UserJourneyRole
  @join__type(graph: JOURNEYS)
{
  inviteRequested @join__enumValue(graph: JOURNEYS)
  editor @join__enumValue(graph: JOURNEYS)
  owner @join__enumValue(graph: JOURNEYS)
}

type UserRole
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  userId: ID!
  roles: [Role!]
}

type UserTeam
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!
  user: User!
  role: UserTeamRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserTeamFilterInput
  @join__type(graph: JOURNEYS)
{
  role: [UserTeamRole!]
}

type UserTeamInvite
  @join__type(graph: JOURNEYS)
{
  id: ID!
  teamId: ID!
  email: String!
}

input UserTeamInviteCreateInput
  @join__type(graph: JOURNEYS)
{
  email: String!
}

enum UserTeamRole
  @join__type(graph: JOURNEYS)
{
  manager @join__enumValue(graph: JOURNEYS)
  member @join__enumValue(graph: JOURNEYS)
}

input UserTeamUpdateInput
  @join__type(graph: JOURNEYS)
{
  role: UserTeamRole!
}

type VercelDomainConfiguration
  @join__type(graph: JOURNEYS)
{
  acceptedChallenges: [String]
  configuredBy: String
  misconfigured: Boolean
}

type VercelDomainVerification
  @join__type(graph: JOURNEYS)
{
  type: String
  domain: String
  value: String
  reason: String
}

type Video
  @join__type(graph: JOURNEYS, key: "id primaryLanguageId")
  @join__type(graph: VIDEOS, key: "id primaryLanguageId")
{
  id: ID!
  primaryLanguageId: ID!
  label: VideoLabel! @join__field(graph: VIDEOS)
  title(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  seoTitle(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  snippet(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  description(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  studyQuestions(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  image: String @join__field(graph: VIDEOS)
  imageAlt(languageId: ID, primary: Boolean): [Translation!]! @join__field(graph: VIDEOS)
  variantLanguages: [Language!]! @join__field(graph: VIDEOS)
  variantLanguagesCount: Int! @join__field(graph: VIDEOS)

  """slug is a permanent link to the video."""
  slug: String! @join__field(graph: VIDEOS)
  noIndex: Boolean @join__field(graph: VIDEOS)
  children: [Video!]! @join__field(graph: VIDEOS)

  """the number value of the amount of children on a video"""
  childrenCount: Int! @join__field(graph: VIDEOS)
  variantLanguagesWithSlug: [LanguageWithSlug!]! @join__field(graph: VIDEOS)
  variant(languageId: ID): VideoVariant @join__field(graph: VIDEOS)
}

type VideoBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """
  internal source videos: video is only populated when videoID and
  videoVariantLanguageId are present
  """
  video: Video

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId, videoVariantLanguageId, and video present
  youTube source: videoId, title, description, and duration present
  """
  source: VideoBlockSource!

  """
  internal source videos: this field is not populated and instead only present
  in the video field.
  For other sources this is automatically populated.
  """
  title: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  description: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  image: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  duration in seconds.
  """
  duration: Int

  """action that should be performed when the video ends"""
  action: Action

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

input VideoBlockCreateInput
  @join__type(graph: JOURNEYS)
{
  id: ID
  journeyId: ID!
  parentBlockId: ID!

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  duration: Int
  description: String
  muted: Boolean
  autoplay: Boolean

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

enum VideoBlockObjectFit
  @join__type(graph: JOURNEYS)
{
  """
  The video is scaled to maintain its aspect ratio while filling the
   entire VideoBlock. If the video's aspect ratio does not match the
   aspect ratio of the VideoBlock, then the video will be clipped to fit.
  """
  fill @join__enumValue(graph: JOURNEYS)

  """
  The video is scaled to maintain its aspect ratio while fitting within the
   VideoBlock. The entire video is made to fill the VideoBlock, while
   preserving its aspect ratio, so the video will be "letterboxed" if its
   aspect ratio does not match the aspect ratio of the VideoBlock.
  """
  fit @join__enumValue(graph: JOURNEYS)

  """
  12.5% of either side of the video is discarded (this has the effect of
   converting a 16:9 aspect ratio to 4:3). The remaining video is scaled to
   maintain its new aspect ratio while fitting within the VideoBlock.  The
   remaining video is made to fill the VideoBlock, while preserving its new
   aspect ratio, so the video will be "letterboxed" if its new aspect ratio
   does not match the aspect ratio of the VideoBlock.
  """
  zoomed @join__enumValue(graph: JOURNEYS)
}

enum VideoBlockSource
  @join__type(graph: JOURNEYS)
{
  internal @join__enumValue(graph: JOURNEYS)
  youTube @join__enumValue(graph: JOURNEYS)
  cloudflare @join__enumValue(graph: JOURNEYS)
}

input VideoBlockUpdateInput
  @join__type(graph: JOURNEYS)
{
  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  duration: Int

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

type VideoCollapseEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCollapseEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoCompleteEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCompleteEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoExpandEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoExpandEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

enum VideoLabel
  @join__type(graph: VIDEOS)
{
  collection @join__enumValue(graph: VIDEOS)
  episode @join__enumValue(graph: VIDEOS)
  featureFilm @join__enumValue(graph: VIDEOS)
  segment @join__enumValue(graph: VIDEOS)
  series @join__enumValue(graph: VIDEOS)
  shortFilm @join__enumValue(graph: VIDEOS)
}

type VideoPauseEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPauseEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoPlayEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPlayEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoProgressEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!
}

input VideoProgressEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

input VideosFilter
  @join__type(graph: VIDEOS)
{
  availableVariantLanguageIds: [ID!]
  title: String
  labels: [VideoLabel!]
  ids: [ID!]
  subtitleLanguageIds: [ID!]
}

type VideoStartEvent implements Event
  @join__implements(graph: JOURNEYS, interface: "Event")
  @join__type(graph: JOURNEYS)
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoStartEventCreateInput
  @join__type(graph: JOURNEYS)
{
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

"""
VideoTriggerBlock is a block that indicates the video to navigate
to the next block at the designated time.
"""
type VideoTriggerBlock implements Block
  @join__implements(graph: JOURNEYS, interface: "Block")
  @join__type(graph: JOURNEYS)
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int!
  action: Action!
}

type VideoVariant
  @join__type(graph: VIDEOS)
{
  id: String!
  hls: String
  downloads: [VideoVariantDownload!]!
  duration: Int!
  language: Language!
  subtitle(languageId: ID, primary: Boolean): [Translation!]!
  subtitleCount: Int!

  """slug is a permanent link to the video variant."""
  slug: String!
}

type VideoVariantDownload
  @join__type(graph: VIDEOS)
{
  quality: VideoVariantDownloadQuality!
  size: Float!
  url: String!
}

enum VideoVariantDownloadQuality
  @join__type(graph: VIDEOS)
{
  low @join__enumValue(graph: VIDEOS)
  high @join__enumValue(graph: VIDEOS)
}

"""A visitor with attributes connected to a team."""
type Visitor
  @join__type(graph: JOURNEYS, key: "id")
{
  id: ID!

  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!

  """Duration between createdAt and lastStepViewedAt in seconds"""
  duration: Int

  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime

  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform

  """
  The user agent of the visitor as poulated by the visitor's user-agent string
  detected in the JourneyViewEventCreate mutation. This field is enriched
  by data from the ua-parser-js library. If this field is empty it is likely
  that the JourneyViewEventCreate mutation was not called by the visitor.
  """
  userAgent: UserAgent

  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String

  """
  The name of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  name: String

  """
  The email address of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  email: String

  """Status of the visitor as populated by VisitorUpdate mutation."""
  status: VisitorStatus

  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform

  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  messagePlatformId: String

  """Private notes of the visitor as set by VisitorUpdate mutation."""
  notes: String

  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime

  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String

  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String

  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String

  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String

  """The url visitor was referred from"""
  referrer: String
  events: [Event!]!
}

"""An edge in a connection."""
type VisitorEdge
  @join__type(graph: JOURNEYS)
{
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Visitor!
}

"""A list of visitors connected with a team."""
type VisitorsConnection
  @join__type(graph: JOURNEYS)
{
  """A list of edges."""
  edges: [VisitorEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""
The status of a visitor according to team members interacting with the
visitor admin interface. This enum should map to an emoji when displayed
(names here match Apple's emoji name)
"""
enum VisitorStatus
  @join__type(graph: JOURNEYS)
{
  star @join__enumValue(graph: JOURNEYS)
  prohibited @join__enumValue(graph: JOURNEYS)
  checkMarkSymbol @join__enumValue(graph: JOURNEYS)
  thumbsUp @join__enumValue(graph: JOURNEYS)
  thumbsDown @join__enumValue(graph: JOURNEYS)
  partyPopper @join__enumValue(graph: JOURNEYS)
  warning @join__enumValue(graph: JOURNEYS)
  robotFace @join__enumValue(graph: JOURNEYS)
  redExclamationMark @join__enumValue(graph: JOURNEYS)
  redQuestionMark @join__enumValue(graph: JOURNEYS)
}

"""
A list of fields to update a visitor when calling the visitorUpdate mutation
"""
input VisitorUpdateInput
  @join__type(graph: JOURNEYS)
{
  """
  The email address of the visitor (will prevent
  SignUpEventSubmissionEventCreate mutation from updating this field
  automatically)
  """
  email: String

  """
  ID of the visitor. This could be a phone number, user id or other unique
  identifier provided by the message platform.
  """
  messagePlatformId: String

  """
  Message platform the visitor wishes to be connected to us on (will prevent
  ChatOpenEventCreate mutation from updating this field automatically)
  """
  messagePlatform: MessagePlatform

  """
  The name of the visitor (will prevent SignUpEventSubmissionEventCreate
  mutation from updating this field automatically)
  """
  name: String

  """
  Private notes relating to the visitor. This information is never made public
  and only accessible by team members.
  """
  notes: String

  """Status of the visitor."""
  status: VisitorStatus

  """
  The country code of the visitor as poulated by visitor ip address detected
  """
  countryCode: String

  """The referring url of the visitor"""
  referrer: String
}
