schema
  @core(feature: "https://specs.apollo.dev/core/v0.1"),
  @core(feature: "https://specs.apollo.dev/join/v0.1")
{
  query: Query
  mutation: Mutation
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

interface Action {
  gtmEventName: String
}

interface Block {
  id: ID!
  parentBlockId: ID
}

type ButtonBlock implements Block {
  action: Action
  color: ButtonColor
  endIcon: Icon
  id: ID!
  label: String!
  parentBlockId: ID
  size: ButtonSize
  startIcon: Icon
  variant: ButtonVariant
}

enum ButtonColor {
  error
  inherit
  primary
  secondary
}

enum ButtonSize {
  large
  medium
  small
}

enum ButtonVariant {
  contained
  text
}

type CardBlock implements Block {
  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean!
  id: ID!
  parentBlockId: ID

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName
}

type Icon {
  color: IconColor
  name: IconName!
  size: IconSize
}

enum IconColor {
  action
  disabled
  error
  inherit
  primary
  secondary
}

"""IconName is equivalent to the icons found in @mui/icons-material"""
enum IconName {
  ArrowForward
  ChatBubbleOutline
  CheckCircle
  FormatQuote
  LiveTv
  LockOpen
  MenuBook
  PlayArrow
  RadioButtonUnchecked
  Translate
}

enum IconSize {
  inherit
  lg
  md
  sm
  xl
}

type ImageBlock implements Block {
  alt: String!

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
  height: Int!
  id: ID!
  parentBlockId: ID
  src: String!
  width: Int!
}

input ImageBlockCreateInput {
  alt: String!

  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  journeyId: ID!
  parentBlockId: ID
  src: String!
}

scalar join__FieldSet

enum join__Graph {
  JOURNEYS @join__graph(name: "journeys" url: "http://127.0.0.1:4001/graphql")
}

type Journey
  @join__owner(graph: JOURNEYS)
  @join__type(graph: JOURNEYS, key: "id")
{
  blocks: [Block!] @join__field(graph: JOURNEYS)
  id: ID! @join__field(graph: JOURNEYS)
  locale: String! @join__field(graph: JOURNEYS)
  published: Boolean! @join__field(graph: JOURNEYS)
  themeMode: ThemeMode! @join__field(graph: JOURNEYS)
  themeName: ThemeName! @join__field(graph: JOURNEYS)
  title: String! @join__field(graph: JOURNEYS)
}

input JourneyCreateInput {
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  locale: String
  themeMode: ThemeMode
  themeName: ThemeName
  title: String!
}

type LinkAction implements Action {
  gtmEventName: String
  target: String
  url: String!
}

type Mutation {
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock! @join__field(graph: JOURNEYS)
  journeyCreate(input: JourneyCreateInput!): Journey! @join__field(graph: JOURNEYS)
  journeyPublish(id: ID!): Journey @join__field(graph: JOURNEYS)
  radioQuestionResponseCreate(input: RadioQuestionResponseCreateInput!): RadioQuestionResponse! @join__field(graph: JOURNEYS)
  signUpResponseCreate(input: SignUpResponseCreateInput!): SignUpResponse! @join__field(graph: JOURNEYS)
  videoResponseCreate(input: VideoResponseCreateInput!): VideoResponse! @join__field(graph: JOURNEYS)
}

"""
NavigateAction is an Action that navigates to the nextBlockId field set on the
closest ancestor StepBlock.
"""
type NavigateAction implements Action {
  gtmEventName: String
}

type NavigateToBlockAction implements Action {
  blockId: String!
  gtmEventName: String
}

type NavigateToJourneyAction implements Action {
  gtmEventName: String
  journeyId: String!
}

type Query {
  journey(id: ID!): Journey @join__field(graph: JOURNEYS)
  journeys: [Journey!]! @join__field(graph: JOURNEYS)
}

type RadioOptionBlock implements Block {
  action: Action
  id: ID!
  label: String!
  parentBlockId: ID
}

type RadioQuestionBlock implements Block {
  description: String
  id: ID!
  label: String!
  parentBlockId: ID
}

type RadioQuestionResponse implements Response {
  block: RadioQuestionBlock
  id: ID!
  radioOptionBlockId: ID!
  userId: ID!
}

input RadioQuestionResponseCreateInput {
  blockId: ID!

  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  radioOptionBlockId: ID!
}

interface Response {
  id: ID!
  userId: ID!
}

type SignUpBlock implements Block {
  action: Action
  id: ID!
  parentBlockId: ID
  submitIcon: Icon
  submitLabel: String
}

type SignUpResponse implements Response {
  block: SignUpBlock
  email: String!
  id: ID!
  name: String!
  userId: ID!
}

input SignUpResponseCreateInput {
  blockId: ID!
  email: String!

  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  name: String!
}

type StepBlock implements Block {
  id: ID!

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!

  """
  nextBlockId contains the preferred block to navigate to when a
  NavigateAction occurs or if the user manually tries to advance to the next
  step. If no nextBlockId is set it can be assumed that this step represents
  the end of the current journey.
  """
  nextBlockId: ID
  parentBlockId: ID
}

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

enum TypographyAlign {
  center
  left
  right
}

type TypographyBlock implements Block {
  align: TypographyAlign
  color: TypographyColor
  content: String!
  id: ID!
  parentBlockId: ID
  variant: TypographyVariant
}

enum TypographyColor {
  error
  primary
  secondary
}

enum TypographyVariant {
  body1
  body2
  caption
  h1
  h2
  h3
  h4
  h5
  h6
  overline
  subtitle1
  subtitle2
}

type VideoBlock implements Block {
  autoplay: Boolean
  description: String
  id: ID!
  parentBlockId: ID
  src: String!
  title: String!
  volume: Int
}

type VideoResponse implements Response {
  block: VideoBlock
  id: ID!
  state: VideoResponseStateEnum!
  userId: ID!
}

input VideoResponseCreateInput {
  blockId: ID!

  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  state: VideoResponseStateEnum!
}

enum VideoResponseStateEnum {
  FINISHED
  PAUSED
  PLAYING
}
