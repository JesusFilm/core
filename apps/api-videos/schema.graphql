type VideoTag {
  id: ID!
  title(languageId: ID, primary: Boolean): [Translation!]!
}

type Translation {
  value: String!
  language: Language!
  primary: Boolean!
}

enum IdType {
  databaseId
  slug
}

enum VideoType {
  episode
  standalone
  playlist
}

type Video @key(fields: "id primaryLanguageId") {
  id: ID!
  type: VideoType!
  primaryLanguageId: ID!
  title(languageId: ID, primary: Boolean): [Translation!]!
  seoTitle(languageId: ID, primary: Boolean): [Translation!]!
  snippet(languageId: ID, primary: Boolean): [Translation!]!
  description(languageId: ID, primary: Boolean): [Translation!]!
  studyQuestions(languageId: ID, primary: Boolean): [Translation!]!
  image: String
  imageAlt(languageId: ID, primary: Boolean): [Translation!]!
  variantLanguages: [Language!]!
  permalink: String!
  noIndex: Boolean

  """Episodes are child videos, currently only found in a playlist type"""
  episodeIds: [ID!]!
  episodes: [Video!]!
  variant(languageId: ID): VideoVariant
}

input VideosFilter {
  availableVariantLanguageIds: [ID!]
  title: String
  tagId: String
  types: [VideoType!]
}

enum VideoVariantDownloadQuality {
  low
  high
}

type VideoVariantDownload {
  quality: VideoVariantDownloadQuality!
  size: Float!
  url: String!
}

type VideoVariant {
  id: String!
  hls: String
  downloads: [VideoVariantDownload!]!
  duration: Int!
  language: Language!
  subtitle(languageId: ID, primary: Boolean): [Translation!]!
}

extend type Query {
  videoTags: [VideoTag!]
  videoTag(id: ID!): VideoTag
  episodes(playlistId: ID!, idType: IdType, where: VideosFilter, offset: Int, limit: Int): [Video!]!
  videos(where: VideosFilter, offset: Int, limit: Int): [Video!]!
  video(id: ID!, idType: IdType): Video!
}

extend type Language @key(fields: "id") {
  id: ID! @external
}
