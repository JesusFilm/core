// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  output          = env("PRISMA_LOCATION_VIDEOS")
}

generator erd {
  provider    = "prisma-erd-generator"
  ignoreEnums = true
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL_VIDEOS")
}

enum IdType {
  databaseId
  slug
}

enum VideoLabel {
  collection
  episode
  featureFilm
  segment
  series
  shortFilm
}

model Video {
  id                String         @id @default(uuid())
  label             VideoLabel
  primaryLanguageId String
  title             VideoTitle[]
  seoTitle          Json[]
  snippet           Json[]
  description       Json[]
  studyQuestions    Json[]
  image             String?
  imageAlt          Json[]
  slug              String?        @unique
  noIndex           Boolean?
  childIds          String[] // needed for child sort order
  children          Video[]        @relation("ParentChild")
  parent            Video[]        @relation("ParentChild")
  variants          VideoVariant[]

  @@index(label)
  @@index(childIds)
}

model VideoTitle {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Gin))
  @@index(primary)
  @@index(languageId)
}

enum VideoVariantDownloadQuality {
  low
  high
}

model VideoVariantDownload {
  id             String                      @id @default(uuid())
  quality        VideoVariantDownloadQuality
  size           Float?
  url            String
  videoVariantId String?
  videoVariant   VideoVariant?               @relation(fields: [videoVariantId], references: [id], onDelete: Cascade)

  @@unique([quality, videoVariantId])
}

model VideoVariant {
  id         String                 @id
  hls        String?
  downloads  VideoVariantDownload[]
  duration   Int?
  languageId String
  subtitle   VideoVariantSubtitle[]
  slug       String                 @unique
  video      Video?                 @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    String?

  @@unique([languageId, videoId])
  @@index(languageId)
  @@index(videoId)
}

model VideoVariantSubtitle {
  id             String  @id @default(uuid())
  value          String
  primary        Boolean
  languageId     String
  videoVariantId String

  variant VideoVariant @relation(fields: [videoVariantId], references: [id], onDelete: Cascade)

  @@unique([videoVariantId, languageId])
  @@index(languageId)
  @@index(videoVariantId)
}
