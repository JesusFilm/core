// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  output          = env("PRISMA_LOCATION_VIDEOS")
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

generator erd {
  provider    = "prisma-erd-generator"
  ignoreEnums = true
  disabled    = true
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL_VIDEOS")
}

enum IdType {
  databaseId
  slug
}

enum VideoLabel {
  collection
  episode
  featureFilm
  segment
  series
  shortFilm
  trailer
  behindTheScenes
}

model Video {
  id                String               @id @default(uuid())
  label             VideoLabel
  primaryLanguageId String
  title             VideoTitle[]
  snippet           VideoSnippet[]
  description       VideoDescription[]
  studyQuestions    VideoStudyQuestion[]
  image             String?
  imageAlt          VideoImageAlt[]
  slug              String?              @unique
  noIndex           Boolean?
  childIds          String[] // needed for child sort order
  subtitles         VideoSubtitle[]
  children          Video[]              @relation("ParentChild")
  parent            Video[]              @relation("ParentChild")
  variants          VideoVariant[]
  bibleCitation     BibleCitation[]
  keywords          VideoKeyword[]

  @@index(label)
  @@index(childIds)
}

model VideoTitle {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

enum VideoVariantDownloadQuality {
  low
  high
}

model VideoVariantDownload {
  id             String                      @id @default(uuid())
  quality        VideoVariantDownloadQuality
  size           Float?
  url            String
  videoVariantId String?
  videoVariant   VideoVariant?               @relation(fields: [videoVariantId], references: [id], onDelete: Cascade)

  @@unique([quality, videoVariantId])
}

model VideoVariant {
  id         String                 @id
  hls        String?
  downloads  VideoVariantDownload[]
  duration   Int?
  languageId String
  subtitle   VideoVariantSubtitle[]
  editionId  String?
  slug       String                 @unique
  video      Video?                 @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    String?

  @@unique([languageId, videoId])
  @@index(languageId)
  @@index(videoId)
}

model VideoSubtitle {
  id         String  @id @default(uuid())
  videoId    String
  edition    String?
  vttSrc     String
  srtSrc     String
  primary    Boolean
  languageId String
  Video      Video   @relation(fields: [videoId], references: [id])

  @@unique([videoId, edition, languageId])
  @@index(languageId(type: Hash))
  @@index(edition(type: Hash))
  @@index(primary(type: Hash))
  @@index(videoId(type: Hash))
}

model VideoVariantSubtitle {
  id             String  @id @default(uuid())
  value          String
  primary        Boolean
  languageId     String
  videoVariantId String

  variant VideoVariant @relation(fields: [videoVariantId], references: [id], onDelete: Cascade)

  @@unique([videoVariantId, languageId])
  @@index(languageId)
  @@index(videoVariantId)
}

model VideoSnippet {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model VideoDescription {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model VideoImageAlt {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model VideoStudyQuestion {
  id         String  @id @default(uuid())
  value      String
  languageId String
  order      Int
  primary    Boolean
  crowdInId  String?
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId, order])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
  @@index(order)
}

enum BibleCitationType {
  keyword
  citation
}

model BibleCitation {
  id                 String            @id @default(uuid())
  type               BibleCitationType
  bibleBookId        String
  chapStart          Int
  chapEnd            Int?
  verseStart         Int
  verseEnd           Int?
  verseGroupParentId Int
  videoId            String
  video              Video             @relation(fields: [videoId], references: [id])
  bibleBook          BibleBook         @relation(fields: [bibleBookId], references: [id])
}

model BibleBook {
  id                   String          @id @default(uuid())
  osisId               String
  name                 BibleBookName[]
  alternateNames       String
  paratextAbbreviation String
  isNewTestament       Boolean
  orderNumber          Int
  bibleCitation        BibleCitation[]
}

model BibleBookName {
  id          String    @id @default(uuid())
  value       String
  languageId  String
  primary     Boolean
  bibleBookId String
  bibleBook   BibleBook @relation(fields: [bibleBookId], references: [id])

  @@unique([bibleBookId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model Keyword {
  id         String         @id @default(uuid())
  value      String
  languageId String
  keywords   VideoKeyword[]
}

model VideoKeyword {
  videoId    String
  value      String
  languageId String
  keywordId  String

  video   Video   @relation(fields: [videoId], references: [id])
  keyword Keyword @relation(fields: [keywordId], references: [id])

  @@id([videoId, keywordId])
  @@index([value], name: "value_idx")
  @@index([languageId], name: "languageId_idx")
}
