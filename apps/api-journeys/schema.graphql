interface Action {
  gtmEventName: String
}

interface Block {
  id: ID!
  parentBlockId: ID
}

type Journey @key(fields: "id") {
  id: ID!
  published: Boolean!
  title: String!
  blocks: [Block!]
}

type LinkAction implements Action {
  gtmEventName: String
  url: String!
  target: String
}

extend type Mutation {
  journeyCreate(title: String!): Journey!
  journeyPublish(id: ID!): Journey
  signupBlockResponseCreate(input: SignupBlockResponseInput!): ID!
  videoBlockResponseCreate(input: VideoBlockResponseInput!): ID!
  radioQuestionBlockResponseCreate(input: RadioQuestionBlockResponseInput!): ID!
  userSessionCreate(journeyId: ID!): ID!
}

"""
NavigateAction is an Action that navigates to the nextBlockId field set on the
closest ancestor StepBlock.
"""
type NavigateAction implements Action {
  gtmEventName: String
}

type NavigateToBlockAction implements Action {
  gtmEventName: String
  blockId: String!
}

type NavigateToJourneyAction implements Action {
  gtmEventName: String
  journeyId: String!
}

extend type Query {
  journeys: [Journey!]!
  journey(id: ID!): Journey
}

type RadioOptionBlock implements Block {
  id: ID!
  parentBlockId: ID
  label: String!
  action: Action
}

type RadioQuestionBlock implements Block {
  id: ID!
  parentBlockId: ID
  label: String!
  description: String
  variant: RadioQuestionVariant
}

input RadioQuestionBlockResponseInput {
  userSessionId: ID!
  blockId: ID!
  selectedResponseBlockId: ID!
}

enum RadioQuestionVariant {
  LIGHT
  DARK
}

input SignupBlockResponseInput {
  userSessionId: ID!
  blockId: ID!
  name: String!
  email: String!
}

type StepBlock implements Block {
  id: ID!

  """
  nextBlockId contains the preferred block to navigate to when a
  NavigateAction occurs or if the user manually tries to advance to the next
  step. If no nextBlockId is set it can be assumed that this step represents
  the end of the current journey.
  """
  nextBlockId: ID

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  parentBlockId: ID
}

type VideoBlock implements Block {
  id: ID!
  parentBlockId: ID
  src: String!
  title: String!
  description: String
  provider: VideoProviderEnum!
}

input VideoBlockResponseInput {
  userSessionId: ID!
  blockId: ID!
  position: Float!
  state: VideoBlockResponseStateEnum!
}

enum VideoBlockResponseStateEnum {
  PLAYING
  PAUSED
  FINISHED
}

enum VideoProviderEnum {
  YOUTUBE
  VIMEO
  ARCLIGHT
}
