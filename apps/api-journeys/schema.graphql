directive @key(fields: _FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @external(reason: String) on OBJECT | FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @extends on OBJECT | INTERFACE

scalar DateTime

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

interface Action {
  parentBlockId: ID!
  gtmEventName: String
}

"""
NavigateAction is an Action that navigates to the nextBlockId field set on the
closest ancestor StepBlock.
"""
type NavigateAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
}

type NavigateToBlockAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
  blockId: String!
}

type NavigateToJourneyAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
  journeyId: String!
  journey: Journey
}

type LinkAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
  url: String!
  target: String
}

type EmailAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
  email: String!
}

input NavigateActionInput {
  gtmEventName: String
}

input NavigateToBlockActionInput {
  gtmEventName: String
  blockId: String!
}

input NavigateToJourneyActionInput {
  gtmEventName: String
  journeyId: String!
}

input LinkActionInput {
  gtmEventName: String
  url: String!
  target: String
}

input EmailActionInput {
  gtmEventName: String
  email: String!
}

extend type Mutation {
  blockDeleteAction(id: ID!, journeyId: ID!): Block!
  blockUpdateNavigateAction(id: ID!, journeyId: ID!, input: NavigateActionInput!): NavigateAction!
  blockUpdateNavigateToBlockAction(id: ID!, journeyId: ID!, input: NavigateToBlockActionInput!): NavigateToBlockAction!
  blockUpdateNavigateToJourneyAction(id: ID!, journeyId: ID!, input: NavigateToJourneyActionInput!): NavigateToJourneyAction!
  blockUpdateLinkAction(id: ID!, journeyId: ID!, input: LinkActionInput!): LinkAction!
  blockUpdateEmailAction(id: ID!, journeyId: ID!, input: EmailActionInput!): EmailAction!

  """blockDelete returns the updated sibling blocks on successful delete"""
  blockDelete(
    id: ID!

    """drop this parameter after merging teams"""
    journeyId: ID

    """drop this parameter after merging teams"""
    parentBlockId: ID
  ): [Block!]!

  """
  blockDuplicate returns the updated block, it's children and sibling blocks on successful duplicate
  """
  blockDuplicate(
    id: ID!

    """
    parentOrder defines the position to add the duplicated block. Negative values defines the position from the end of the array. Positions greater than the length of the array or null parentOrder will add duplicate at end of the array.
    """
    parentOrder: Int

    """drop this parameter after merging teams"""
    journeyId: ID
  ): [Block!]!
  blockOrderUpdate(
    id: ID!
    parentOrder: Int!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): [Block!]!
  buttonBlockCreate(input: ButtonBlockCreateInput!): ButtonBlock!
  buttonBlockUpdate(
    id: ID!
    input: ButtonBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ButtonBlock
  cardBlockCreate(input: CardBlockCreateInput!): CardBlock!
  cardBlockUpdate(
    id: ID!
    input: CardBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): CardBlock!
  formBlockCreate(input: FormBlockCreateInput!): FormBlock!
  formBlockUpdate(
    id: ID!
    input: FormBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): FormBlock
  iconBlockCreate(input: IconBlockCreateInput!): IconBlock!
  iconBlockUpdate(
    id: ID!
    input: IconBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): IconBlock!
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock!
  imageBlockUpdate(
    id: ID!
    input: ImageBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ImageBlock!
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!): RadioOptionBlock!
  radioOptionBlockUpdate(
    id: ID!
    input: RadioOptionBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): RadioOptionBlock!
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!): RadioQuestionBlock!
  radioQuestionBlockUpdate(
    id: ID!
    parentBlockId: ID!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): RadioQuestionBlock!
  signUpBlockCreate(input: SignUpBlockCreateInput!): SignUpBlock!
  signUpBlockUpdate(
    id: ID!
    input: SignUpBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): SignUpBlock
  stepBlockCreate(input: StepBlockCreateInput!): StepBlock!
  stepBlockUpdate(
    id: ID!
    input: StepBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): StepBlock!
  textResponseBlockCreate(input: TextResponseBlockCreateInput!): TextResponseBlock!
  textResponseBlockUpdate(
    id: ID!
    input: TextResponseBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TextResponseBlock
  typographyBlockCreate(input: TypographyBlockCreateInput!): TypographyBlock!
  typographyBlockUpdate(
    id: ID!
    input: TypographyBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TypographyBlock!
  videoBlockCreate(input: VideoBlockCreateInput!): VideoBlock!
  videoBlockUpdate(
    id: ID!
    input: VideoBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): VideoBlock!
  chatButtonCreate(journeyId: ID!, input: ChatButtonCreateInput): ChatButton!
  chatButtonUpdate(id: ID!, journeyId: ID!, input: ChatButtonUpdateInput!): ChatButton!
  chatButtonRemove(id: ID!): ChatButton!
  buttonClickEventCreate(input: ButtonClickEventCreateInput!): ButtonClickEvent!
  chatOpenEventCreate(input: ChatOpenEventCreateInput!): ChatOpenEvent!
  journeyViewEventCreate(input: JourneyViewEventCreateInput!): JourneyViewEvent!
  radioQuestionSubmissionEventCreate(input: RadioQuestionSubmissionEventCreateInput!): RadioQuestionSubmissionEvent!
  signUpSubmissionEventCreate(input: SignUpSubmissionEventCreateInput!): SignUpSubmissionEvent!
  stepViewEventCreate(input: StepViewEventCreateInput!): StepViewEvent!
  stepNextEventCreate(input: StepNextEventCreateInput!): StepNextEvent!
  stepPreviousEventCreate(input: StepPreviousEventCreateInput!): StepPreviousEvent!
  textResponseSubmissionEventCreate(input: TextResponseSubmissionEventCreateInput!): TextResponseSubmissionEvent!
  videoStartEventCreate(input: VideoStartEventCreateInput!): VideoStartEvent!
  videoPlayEventCreate(input: VideoPlayEventCreateInput!): VideoPlayEvent!
  videoPauseEventCreate(input: VideoPauseEventCreateInput!): VideoPauseEvent!
  videoCompleteEventCreate(input: VideoCompleteEventCreateInput!): VideoCompleteEvent!
  videoExpandEventCreate(input: VideoExpandEventCreateInput!): VideoExpandEvent!
  videoCollapseEventCreate(input: VideoCollapseEventCreateInput!): VideoCollapseEvent!
  videoProgressEventCreate(input: VideoProgressEventCreateInput!): VideoProgressEvent!
  hostCreate(teamId: ID!, input: HostCreateInput!): Host!
  hostUpdate(id: ID!, teamId: ID!, input: HostUpdateInput): Host!
  hostDelete(id: ID!, teamId: ID!): Host!
  journeyCreate(input: JourneyCreateInput!, teamId: ID!): Journey!
  journeyDuplicate(id: ID!, teamId: ID!): Journey!
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey!

  """Sets journey status to published"""
  journeyPublish(id: ID!): Journey

  """Sets journey status to featured"""
  journeyFeature(id: ID!, feature: Boolean!): Journey

  """Sets journeys statuses to archived"""
  journeysArchive(ids: [ID!]!): [Journey]

  """Sets journeys statuses to deleted"""
  journeysDelete(ids: [ID!]!): [Journey]

  """Sets journeys statuses to trashed"""
  journeysTrash(ids: [ID!]!): [Journey]

  """Sets journeys statuses to last active status"""
  journeysRestore(ids: [ID!]!): [Journey]

  """Updates template"""
  journeyTemplate(id: ID!, input: JourneyTemplateInput!): Journey!
  journeyProfileCreate: JourneyProfile!
  journeyProfileUpdate(input: JourneyProfileUpdateInput!): JourneyProfile!
  journeyProfileOnboardingFormComplete: JourneyProfile!
  teamCreate(input: TeamCreateInput): Team!
  teamUpdate(id: ID!, input: TeamUpdateInput): Team!
  userInviteCreate(journeyId: ID!, input: UserInviteCreateInput): UserInvite
  userInviteRemove(id: ID!, journeyId: ID!): UserInvite!
  userInviteAcceptAll: [UserInvite!]!
  userJourneyApprove(id: ID!): UserJourney!
  userJourneyPromote(id: ID!): UserJourney!
  userJourneyRemove(id: ID!): UserJourney!

  """Removes all userJourneys associated with a journeyId"""
  userJourneyRemoveAll(id: ID!): [UserJourney!]!
  userJourneyRequest(
    journeyId: ID!

    """drop this parameter after merging teams"""
    idType: IdType
  ): UserJourney!
  userJourneyOpen(id: ID!): UserJourney
  userTeamUpdate(id: ID!, input: UserTeamUpdateInput): UserTeam!
  userTeamDelete(id: ID!): UserTeam!
  userTeamInviteCreate(teamId: ID!, input: UserTeamInviteCreateInput): UserTeamInvite
  userTeamInviteRemove(id: ID!): UserTeamInvite!
  userTeamInviteAcceptAll: [UserTeamInvite!]!

  """Update a visitor"""
  visitorUpdate(id: ID!, input: VisitorUpdateInput!): Visitor!

  """
  Allow current user to update specific allowable fields of their visitor record
  """
  visitorUpdateForCurrentUser(input: VisitorUpdateInput!): Visitor!
}

interface Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

type Journey
  @key(fields: "id")
{
  blocks: [Block!]
  primaryImageBlock: ImageBlock
  creatorImageBlock: ImageBlock
  chatButtons: [ChatButton!]!
  id: ID!
  title: String!
  language: Language!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  creatorDescription: String
  slug: String!
  archivedAt: DateTime
  deletedAt: DateTime
  publishedAt: DateTime
  trashedAt: DateTime
  featuredAt: DateTime
  createdAt: DateTime!
  status: JourneyStatus!
  seoTitle: String
  seoDescription: String
  template: Boolean
  host: Host
  team: Team
  strategySlug: String
  tags: [Tag!]!
  userJourneys: [UserJourney!]
}

enum ButtonVariant {
  text
  contained
}

enum ButtonColor {
  primary
  secondary
  error
  inherit
}

enum ButtonSize {
  small
  medium
  large
}

type ButtonBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  action: Action
}

input ButtonBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
}

input ButtonBlockUpdateInput {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
}

type CardBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean!

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName
}

input CardBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput {
  parentBlockId: ID
  backgroundColor: String
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

type FormBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  action: Action
  projectId: String
  apiToken: String
  formSlug: String
}

input FormBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

input FormBlockUpdateInput {
  projectId: String
  apiToken: String
  formSlug: String
}

enum GridDirection {
  columnReverse
  column
  row
  rowReverse
}

enum GridJustifyContent {
  flexStart
  flexEnd
  center
}

enum GridAlignItems {
  baseline
  flexStart
  flexEnd
  center
}

type GridContainerBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  spacing: Int!
  direction: GridDirection!
  justifyContent: GridJustifyContent!
  alignItems: GridAlignItems!
}

type GridItemBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  xl: Int!
  lg: Int!
  sm: Int!
}

"""IconName is equivalent to the icons found in @mui/icons-material"""
enum IconName {
  PlayArrowRounded
  TranslateRounded
  CheckCircleRounded
  RadioButtonUncheckedRounded
  FormatQuoteRounded
  LockOpenRounded
  ArrowForwardRounded
  ArrowBackRounded
  ChatBubbleOutlineRounded
  LiveTvRounded
  MenuBookRounded
  ChevronRightRounded
  ChevronLeftRounded
  BeenhereRounded
  SendRounded
  SubscriptionsRounded
  ContactSupportRounded
}

enum IconColor {
  primary
  secondary
  action
  error
  disabled
  inherit
}

enum IconSize {
  sm
  md
  lg
  xl
  inherit
}

type IconBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput {
  name: IconName
  color: IconColor
  size: IconSize
}

type ImageBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  src: String
  width: Int!
  height: Int!
  alt: String!

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
}

input ImageBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
}

input ImageBlockUpdateInput {
  parentBlockId: ID
  src: String
  alt: String

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
}

type RadioOptionBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  action: Action
}

input RadioOptionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput {
  parentBlockId: ID
  label: String
}

type RadioQuestionBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

input RadioQuestionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

type SignUpBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

input SignUpBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput {
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

type StepBlock implements Block {
  id: ID!
  journeyId: ID!

  """
  nextBlockId contains the preferred block to navigate to when a
  NavigateAction occurs or if the user manually tries to advance to the next
  step. If no nextBlockId is set it will automatically navigate to the next
  step in the journey based on parentOrder.
  """
  nextBlockId: ID

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  parentBlockId: ID
  parentOrder: Int
}

input StepBlockCreateInput {
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean
}

input StepBlockUpdateInput {
  nextBlockId: ID
  locked: Boolean
}

type TextResponseBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  hint: String
  minRows: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

input TextResponseBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  submitLabel: String!
}

input TextResponseBlockUpdateInput {
  parentBlockId: ID
  label: String
  hint: String
  minRows: Int
  submitIconId: ID
  submitLabel: String
}

enum TypographyVariant {
  h1
  h2
  h3
  h4
  h5
  h6
  subtitle1
  subtitle2
  body1
  body2
  caption
  overline
}

enum TypographyColor {
  primary
  secondary
  error
}

enum TypographyAlign {
  left
  center
  right
}

type TypographyBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockUpdateInput {
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

extend type Video
  @key(fields: "id primaryLanguageId")
{
  id: ID! @external
  primaryLanguageId: ID! @external
}

enum VideoBlockSource {
  internal
  youTube
  cloudflare
}

enum VideoBlockObjectFit {
  """
  The video is scaled to maintain its aspect ratio while filling the
   entire VideoBlock. If the video's aspect ratio does not match the
   aspect ratio of the VideoBlock, then the video will be clipped to fit.
  """
  fill

  """
  The video is scaled to maintain its aspect ratio while fitting within the
   VideoBlock. The entire video is made to fill the VideoBlock, while
   preserving its aspect ratio, so the video will be "letterboxed" if its
   aspect ratio does not match the aspect ratio of the VideoBlock.
  """
  fit

  """
  12.5% of either side of the video is discarded (this has the effect of
   converting a 16:9 aspect ratio to 4:3). The remaining video is scaled to
   maintain its new aspect ratio while fitting within the VideoBlock.  The
   remaining video is made to fill the VideoBlock, while preserving its new
   aspect ratio, so the video will be "letterboxed" if its new aspect ratio
   does not match the aspect ratio of the VideoBlock.
  """
  zoomed
}

type VideoBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """
  internal source videos: video is only populated when videoID and
  videoVariantLanguageId are present
  """
  video: Video

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId, videoVariantLanguageId, and video present
  youTube source: videoId, title, description, and duration present
  """
  source: VideoBlockSource!

  """
  internal source videos: this field is not populated and instead only present
  in the video field.
  For other sources this is automatically populated.
  """
  title: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  description: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  image: String

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  duration in seconds.
  """
  duration: Int

  """action that should be performed when the video ends"""
  action: Action

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

input VideoBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  duration: Int
  description: String
  muted: Boolean
  autoplay: Boolean

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

input VideoBlockUpdateInput {
  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  duration: Int

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID

  """
  internal source: videoId and videoVariantLanguageId required
  youTube source: videoId required
  """
  source: VideoBlockSource

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit
}

"""
VideoTriggerBlock is a block that indicates the video to navigate
to the next block at the designated time.
"""
type VideoTriggerBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int!
  action: Action!
}

type ChatButton {
  id: ID!
  link: String
  platform: ChatPlatform
}

enum ChatPlatform {
  facebook
  telegram
  whatsApp
  instagram
  viber
  vk
  snapchat
  skype
  line
  tikTok
  custom
}

input ChatButtonCreateInput {
  link: String
  platform: ChatPlatform
}

input ChatButtonUpdateInput {
  link: String
  platform: ChatPlatform
}

enum ButtonAction {
  NavigateAction
  NavigateToBlockAction
  NavigateToJourneyAction
  LinkAction
  EmailAction
}

input ButtonClickEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """label of the button"""
  value: String

  """Action type of the button when it was clicked"""
  action: ButtonAction

  """
  The label for each corresponding action, mapping below:
  NavigateAction - undefined
  NavigateToBlockAction - StepName (generated in client) of the StepBlock
  NavigateToJourneyAction - slug of the journey
  LinkAction - url of the link
  """
  actionValue: String
}

type ButtonClickEvent implements Event {
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the button"""
  value: String

  """Action type of the button when it was clicked"""
  action: ButtonAction

  """
  The label for each corresponding action, mapping below:
  NavigateAction - null
  NavigateToBlockAction - StepName (generated in client) of the StepBlock
  NavigateToJourneyAction - slug of the journey
  LinkAction - url of the link
  """
  actionValue: String
}

enum MessagePlatform {
  facebook
  telegram
  whatsApp
  instagram
  viber
  vk
  snapchat
  skype
  line
  tikTok
  custom
}

input ChatOpenEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """messagePlatform of the link used for chat"""
  value: MessagePlatform
}

type ChatOpenEvent implements Event {
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for ChatOpenEvent"""
  label: String

  """messagePlatform of the link used for chat"""
  value: String

  """
  messagePlatform of the link used for chat (based on the messagePlatform in the value field)
  """
  messagePlatform: MessagePlatform
}

interface Event {
  id: ID!
  journeyId: ID!
  createdAt: DateTime!
  label: String
  value: String
}

input JourneyViewEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  journeyId: ID!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: ID
}

extend type Language
  @key(fields: "id")
{
  id: ID! @external
}

type JourneyViewEvent implements Event {
  id: ID!

  """ID of the journey being viewed"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: String

  """
  language of the journey being viewed (based on the ID in the value field)
  """
  language: Language
}

input RadioQuestionSubmissionEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  radioOptionBlockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOption block"""
  value: String
}

type RadioQuestionSubmissionEvent implements Event {
  id: ID!

  """ID of the journey that the radioQuestionBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOptionBlock"""
  value: String
}

input SignUpSubmissionEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """name from the signUpBlock form"""
  name: String!

  """email from the signUpBlock form"""
  email: String!
}

type SignUpSubmissionEvent implements Event {
  id: ID!

  """ID of the journey that the block belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for signUpSubmissionEvent"""
  label: String

  """name from the signUpBlock form"""
  value: String

  """email from the signUpBlock form"""
  email: String
}

input StepViewEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """stepName of the current stepBlock"""
  value: String
}

type StepViewEvent implements Event {
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for stepViewEvent"""
  label: String

  """stepName of the stepBlock"""
  value: String
}

input StepNextEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """id of the next stepBlock"""
  nextStepId: ID!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

type StepNextEvent implements Event {
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

input StepPreviousEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """id of the previous stepBlock"""
  previousStepId: ID!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the previous stepBlock"""
  value: String
}

type StepPreviousEvent implements Event {
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the previous stepBlock"""
  value: String
}

input TextResponseSubmissionEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String!
}

type TextResponseSubmissionEvent implements Event {
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String
}

input VideoStartEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoStartEvent implements Event {
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPlayEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoPlayEvent implements Event {
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPauseEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoPauseEvent implements Event {
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCompleteEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoCompleteEvent implements Event {
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoExpandEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoExpandEvent implements Event {
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCollapseEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoCollapseEvent implements Event {
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoProgressEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoProgressEvent implements Event {
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!
}

type Host {
  id: ID!
  teamId: ID!
  title: String!
  location: String
  src1: String
  src2: String
}

input HostUpdateInput {
  """
  title can be undefined as to not update title, but it cannot be null as to clear the value of title
  """
  title: String
  location: String
  src1: String
  src2: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

extend type Query {
  hosts(teamId: ID!): [Host!]!

  """
  returns all journeys that match the provided filters
  If no team id is provided and template is not true then only returns journeys
  where the user is not a member of a team but is an editor or owner of the
  journey
  """
  adminJourneys(
    status: [JourneyStatus!]
    template: Boolean
    teamId: ID

    """Use Last Active Team Id from JourneyProfile (if null will error)"""
    useLastActiveTeamId: Boolean
  ): [Journey!]!
  adminJourneysReport(reportType: JourneysReportType!): PowerBiEmbed
  adminJourney(id: ID!, idType: IdType): Journey!
  journeys(where: JourneysFilter): [Journey!]!
  journey(id: ID!, idType: IdType): Journey!
  getJourneyProfile: JourneyProfile

  """Get a list of Visitor Information by Journey"""
  journeyVisitorsConnection(
    """Returns the elements in the list that match the specified filter."""
    filter: JourneyVisitorFilter!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Specifies the sort field for the list."""
    sort: JourneyVisitorSort
  ): JourneyVisitorsConnection!

  """Get a JourneyVisitor count by JourneyVisitorFilter"""
  journeyVisitorCount(filter: JourneyVisitorFilter!): Int!
  teams: [Team!]!
  team(id: ID!): Team!
  userInvites(journeyId: ID!): [UserInvite!]
  getUserRole: UserRole
  userTeams(teamId: ID!, where: UserTeamFilterInput): [UserTeam!]!
  userTeam(id: ID!): UserTeam!
  userTeamInvites(teamId: ID!): [UserTeamInvite!]!

  """A list of visitors that are connected with a specific team."""
  visitorsConnection(
    """Returns the visitor items related to a specific team."""
    teamId: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): VisitorsConnection!

  """Get a single visitor"""
  visitor(id: ID!): Visitor!
}

input HostCreateInput {
  title: String!
  location: String
  src1: String
  src2: String
}

extend type Tag
  @key(fields: "id")
{
  id: ID! @external
}

enum IdType {
  databaseId
  slug
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

input JourneysFilter {
  featured: Boolean
  template: Boolean
  ids: [ID!]
  tagIds: [ID!]
  languageIds: [ID!]
  limit: Int
  orderByRecent: Boolean
}

enum JourneysReportType {
  multipleFull
  multipleSummary
  singleFull
  singleSummary
}

type PowerBiEmbed {
  """The report ID"""
  reportId: String!

  """The name of the report"""
  reportName: String!

  """The embed URL of the report"""
  embedUrl: String!

  """The embed token"""
  accessToken: String!

  """The date and time (UTC) of token expiration"""
  expiration: String!
}

input JourneyCreateInput {
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String

  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input JourneyUpdateInput {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  creatorDescription: String
  creatorImageBlockId: ID
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
  hostId: String
  strategySlug: String
  tagIds: [ID!]
}

type UserJourney
  @key(fields: "id")
{
  journey: Journey
  id: ID!
  userId: ID!
  journeyId: ID!
  role: UserJourneyRole!
  user: User

  """Date time of when the journey was first opened"""
  openedAt: DateTime
}

input JourneyTemplateInput {
  template: Boolean
}

type JourneyProfile
  @key(fields: "id")
{
  id: ID!
  userId: ID!
  acceptedTermsAt: DateTime
  lastActiveTeamId: String
  onboardingFormCompletedAt: DateTime
}

input JourneyProfileUpdateInput {
  lastActiveTeamId: String
}

type JourneyVisitor
  @key(fields: "visitorId journeyId")
{
  visitorId: ID!
  journeyId: ID!

  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!

  """Duration between createdAt and lastStepViewedAt in seconds"""
  duration: Int

  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime

  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform

  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String

  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform

  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  notes: String

  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime

  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String

  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String

  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String

  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String
  events: [Event!]!
  visitor: Visitor!
}

type JourneyVisitorEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: JourneyVisitor!
}

type JourneyVisitorsConnection {
  """A list of edges."""
  edges: [JourneyVisitorEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input JourneyVisitorFilter {
  journeyId: String!
  hasChatStarted: Boolean
  hasPollAnswers: Boolean
  hasTextResponse: Boolean
  hasIcon: Boolean
  hideInactive: Boolean
  countryCode: String
}

enum JourneyVisitorSort {
  date
  duration
  activity
}

type Team
  @key(fields: "id")
{
  id: ID!
  title: String!
  publicTitle: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userTeams: [UserTeam!]!
}

input TeamCreateInput {
  title: String!
  publicTitle: String
}

input TeamUpdateInput {
  title: String!
  publicTitle: String
}

type UserInvite
  @key(fields: "id")
{
  id: ID!
  journeyId: ID!
  senderId: ID!
  email: String!
  acceptedAt: DateTime
  removedAt: DateTime
}

input UserInviteCreateInput {
  email: String!
}

enum UserJourneyRole {
  inviteRequested
  editor
  owner
}

extend type User
  @key(fields: "id")
{
  id: ID! @external
}

type UserRole
  @key(fields: "id")
{
  id: ID!
  userId: ID!
  roles: [Role!]
}

enum Role {
  """
  User can create templates and
  add them to template library
  """
  publisher
}

enum UserTeamRole {
  manager
  member
}

type UserTeam
  @key(fields: "id")
{
  id: ID!
  user: User!
  role: UserTeamRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserTeamUpdateInput {
  role: UserTeamRole!
}

input UserTeamFilterInput {
  role: [UserTeamRole!]
}

type UserTeamInvite {
  id: ID!
  teamId: ID!
  email: String!
}

input UserTeamInviteCreateInput {
  email: String!
}

type Browser {
  name: String
  version: String
}

enum DeviceType {
  console
  mobile
  tablet
  smarttv
  wearable
  embedded
}

type Device {
  model: String
  type: DeviceType
  vendor: String
}

type OperatingSystem {
  name: String
  version: String
}

"""These types are a subset provided by the @types/ua-parser-js library."""
type UserAgent {
  browser: Browser!
  device: Device!
  os: OperatingSystem!
}

"""
The status of a visitor according to team members interacting with the
visitor admin interface. This enum should map to an emoji when displayed
(names here match Apple's emoji name)
"""
enum VisitorStatus {
  star
  prohibited
  checkMarkSymbol
  thumbsUp
  thumbsDown
  partyPopper
  warning
  robotFace
  redExclamationMark
  redQuestionMark
}

"""A visitor with attributes connected to a team."""
type Visitor
  @key(fields: "id")
{
  id: ID!

  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!

  """Duration between createdAt and lastStepViewedAt in seconds"""
  duration: Int

  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime

  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform

  """
  The user agent of the visitor as poulated by the visitor's user-agent string
  detected in the JourneyViewEventCreate mutation. This field is enriched
  by data from the ua-parser-js library. If this field is empty it is likely
  that the JourneyViewEventCreate mutation was not called by the visitor.
  """
  userAgent: UserAgent

  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String

  """
  The name of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  name: String

  """
  The email address of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  email: String

  """Status of the visitor as populated by VisitorUpdate mutation."""
  status: VisitorStatus

  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform

  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  messagePlatformId: String

  """Private notes of the visitor as set by VisitorUpdate mutation."""
  notes: String

  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime

  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String

  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String

  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String

  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String

  """The url visitor was referred from"""
  referrer: String
  events: [Event!]!
}

"""An edge in a connection."""
type VisitorEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Visitor!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A list of visitors connected with a team."""
type VisitorsConnection {
  """A list of edges."""
  edges: [VisitorEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""
A list of fields to update a visitor when calling the visitorUpdate mutation
"""
input VisitorUpdateInput {
  """
  The email address of the visitor (will prevent
  SignUpEventSubmissionEventCreate mutation from updating this field
  automatically)
  """
  email: String

  """
  ID of the visitor. This could be a phone number, user id or other unique
  identifier provided by the message platform.
  """
  messagePlatformId: String

  """
  Message platform the visitor wishes to be connected to us on (will prevent
  ChatOpenEventCreate mutation from updating this field automatically)
  """
  messagePlatform: MessagePlatform

  """
  The name of the visitor (will prevent SignUpEventSubmissionEventCreate
  mutation from updating this field automatically)
  """
  name: String

  """
  Private notes relating to the visitor. This information is never made public
  and only accessible by team members.
  """
  notes: String

  """Status of the visitor."""
  status: VisitorStatus

  """
  The country code of the visitor as poulated by visitor ip address detected
  """
  countryCode: String

  """The referring url of the visitor"""
  referrer: String
}

type Translation {
  value: String!
  language: Language!
  primary: Boolean!
}

scalar _FieldSet

scalar _Any

type _Service {
  sdl: String
}

union _Entity = Journey | JourneyProfile | JourneyVisitor | Language | Tag | Team | User | UserInvite | UserJourney | UserRole | UserTeam | Video | Visitor
