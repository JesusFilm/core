interface Action {
  gtmEventName: String
}

interface Block {
  id: ID!
  parentBlockId: ID
}

enum ButtonAlignment {
  LEFT
  CENTER
  RIGHT
}

type ButtonBlock implements Block {
  id: ID!
  parentBlockId: ID
  label: String!
  variant: ButtonBlockVariant
  color: ButtonColor
  size: ButtonSize
  startIcon: Icon
  endIcon: Icon
  action: Action
}

enum ButtonBlockVariant {
  CONTAINED
  OUTLINED
  TEXT
}

enum ButtonColor {
  PRIMARY
  SECONDARY
}

enum ButtonSize {
  LARGE
  MEDIUM
  SMALL
}

type Icon {
  name: IconName!
  color: IconColor
  size: IconSize
}

enum IconColor {
  NORMAL
  DISABLED
}

enum IconName {
  PLAY_ARROW
  TRANSLATE
  CHECK_CIRCLE
  RADIO_BUTTON_UNCHECKED
  FORMAT_QUOTE
  LOCK_OPEN
  ARROW_FORWARD
  CHAT_BUBBLE_ONLINE
  LIVE_TV
  MENU_BOOK
}

enum IconSize {
  SMALL
  MEDIUM_SMALL
  MEDIUM_LARGE
  LARGE
}

type Journey @key(fields: "id") {
  id: ID!
  published: Boolean!
  title: String!
  blocks: [Block!]
}

type LinkAction implements Action {
  gtmEventName: String
  url: String!
  target: String
}

extend type Mutation {
  journeyCreate(title: String!): Journey!
  journeyPublish(id: ID!): Journey
}

type NavigateAction implements Action {
  gtmEventName: String
  blockId: String!
}

type NavigateToJourneyAction implements Action {
  gtmEventName: String
  journeyId: String!
}

extend type Query {
  journeys: [Journey!]!
  journey(id: ID!): Journey
}

type RadioOptionBlock implements Block {
  id: ID!
  parentBlockId: ID
  label: String!
  action: Action
}

type RadioQuestionBlock implements Block {
  id: ID!
  parentBlockId: ID
  label: String!
  description: String
  variant: RadioQuestionVariant
}

enum RadioQuestionVariant {
  LIGHT
  DARK
}

type StepBlock implements Block {
  id: ID!
  parentBlockId: ID
}

type VideoBlock implements Block {
  id: ID!
  parentBlockId: ID
  src: String!
  title: String!
  description: String
  provider: VideoProviderEnum!
}

enum VideoProviderEnum {
  YOUTUBE
  VIMEO
  ARCLIGHT
}
