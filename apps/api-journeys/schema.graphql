"""DateTime custom scalar"""
scalar DateTime

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

interface Action {
  parentBlockId: ID!
  gtmEventName: String
}

"""
NavigateAction is an Action that navigates to the nextBlockId field set on the
closest ancestor StepBlock.
"""
type NavigateAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
}

type NavigateToBlockAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
  blockId: String!
}

type NavigateToJourneyAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
  journeyId: String!
  journey: Journey
}

type LinkAction implements Action {
  parentBlockId: ID!
  gtmEventName: String
  url: String!
  target: String
}

input NavigateActionInput {
  gtmEventName: String
}

input NavigateToBlockActionInput {
  gtmEventName: String
  blockId: String!
}

input NavigateToJourneyActionInput {
  gtmEventName: String
  journeyId: String!
}

input LinkActionInput {
  gtmEventName: String
  url: String!
  target: String
}

interface Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

type Journey @key(fields: "id") {
  blocks: [Block!]
  primaryImageBlock: ImageBlock
  id: ID!
  title: String!
  language: Language!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  slug: String!
  publishedAt: DateTime
  featuredAt: DateTime
  createdAt: DateTime!
  status: JourneyStatus!
  seoTitle: String
  seoDescription: String
  userJourneys: [UserJourney!]
}

enum ButtonVariant {
  text
  contained
}

enum ButtonColor {
  primary
  secondary
  error
  inherit
}

enum ButtonSize {
  small
  medium
  large
}

type ButtonBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  action: Action
}

input ButtonBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
}

input ButtonBlockUpdateInput {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
}

type CardBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean!

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName
}

input CardBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  backgroundColor: String
  coverBlockId: ID @deprecated(reason: "coverBlockId will be updated on Image and Video Cover block creation")
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput {
  parentBlockId: ID
  backgroundColor: String
  coverBlockId: ID @deprecated(reason: "coverBlockId will be updated on Image and Video Cover block creation")
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

enum GridDirection {
  columnReverse
  column
  row
  rowReverse
}

enum GridJustifyContent {
  flexStart
  flexEnd
  center
}

enum GridAlignItems {
  baseline
  flexStart
  flexEnd
  center
}

type GridContainerBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  spacing: Int!
  direction: GridDirection!
  justifyContent: GridJustifyContent!
  alignItems: GridAlignItems!
}

type GridItemBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  xl: Int!
  lg: Int!
  sm: Int!
}

"""IconName is equivalent to the icons found in @mui/icons-material"""
enum IconName {
  PlayArrowRounded
  TranslateRounded
  CheckCircleRounded
  RadioButtonUncheckedRounded
  FormatQuoteRounded
  LockOpenRounded
  ArrowForwardRounded
  ChatBubbleOutlineRounded
  LiveTvRounded
  MenuBookRounded
  ChevronRightRounded
  BeenhereRounded
  SendRounded
  SubscriptionsRounded
  ContactSupportRounded
}

enum IconColor {
  primary
  secondary
  action
  error
  disabled
  inherit
}

enum IconSize {
  sm
  md
  lg
  xl
  inherit
}

type IconBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput {
  name: IconName
  color: IconColor
  size: IconSize
}

type ImageBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  src: String
  width: Int!
  height: Int!
  alt: String!

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
}

input ImageBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  src: String
  alt: String!
  blurhash: String

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
}

input ImageBlockUpdateInput {
  parentBlockId: ID
  src: String
  alt: String
}

type RadioOptionBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  action: Action
}

type RadioQuestionBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  description: String
}

input RadioOptionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioQuestionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput {
  parentBlockId: ID
  label: String
}

input RadioQuestionBlockUpdateInput {
  parentBlockId: ID
  label: String
  description: String
}

type SignUpBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  action: Action
  submitIconId: ID
  submitLabel: String
}

input SignUpBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput {
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

type StepBlock implements Block {
  id: ID!
  journeyId: ID!

  """
  nextBlockId contains the preferred block to navigate to when a
  NavigateAction occurs or if the user manually tries to advance to the next
  step. If no nextBlockId is set it can be assumed that this step represents
  the end of the current journey.
  """
  nextBlockId: ID

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  parentBlockId: ID
  parentOrder: Int
}

input StepBlockCreateInput {
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean
}

input StepBlockUpdateInput {
  nextBlockId: ID
  locked: Boolean
}

enum TypographyVariant {
  h1
  h2
  h3
  h4
  h5
  h6
  subtitle1
  subtitle2
  body1
  body2
  caption
  overline
}

enum TypographyColor {
  primary
  secondary
  error
}

enum TypographyAlign {
  left
  center
  right
}

type TypographyBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

input TypographyBlockUpdateInput {
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
}

type VideoBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean
  video: Video

  """
  videoId and videoVariantLanguageId both need to be set to select a video
  """
  videoId: ID

  """
  videoId and videoVariantLanguageId both need to be set to select a video
  """
  videoVariantLanguageId: ID

  """action that should be performed when the video ends"""
  action: Action
}

input VideoBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  description: String
  muted: Boolean
  autoplay: Boolean

  """
  videoId and videoVariantLanguageId both need to be set to select a video
  """
  videoId: ID

  """
  videoId and videoVariantLanguageId both need to be set to select a video
  """
  videoVariantLanguageId: ID

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
}

input VideoBlockUpdateInput {
  """startAt dictates at which point of time the video should start playing"""
  startAt: Int

  """endAt dictates at which point of time the video should end"""
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  videoId: ID
  videoVariantLanguageId: ID

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean
}

"""
VideoTriggerBlock is a block that indicates the video to navigate
to the next block at the designated time.
"""
type VideoTriggerBlock implements Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int!
  action: Action!
}

enum IdType {
  databaseId
  slug
}

enum JourneyStatus {
  draft
  published
}

input JourneysFilter {
  featured: Boolean
}

input JourneyCreateInput {
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String

  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input JourneyUpdateInput {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
}

type UserJourney @key(fields: "id") {
  journey: Journey
  id: ID!
  userId: ID!
  journeyId: ID!
  role: UserJourneyRole!
  user: User
}

input RadioQuestionResponseCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  radioOptionBlockId: ID!
}

type RadioQuestionResponse implements Response {
  id: ID!
  userId: ID!
  radioOptionBlockId: ID!
  block: RadioQuestionBlock
}

interface Response {
  id: ID!
  userId: ID!
}

input SignUpResponseCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  name: String!
  email: String!
}

type SignUpResponse implements Response {
  id: ID!
  userId: ID!
  name: String!
  email: String!
  block: SignUpBlock
}

input StepResponseCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
}

type StepResponse implements Response {
  id: ID!
  userId: ID!
  block: StepBlock
}

enum VideoResponseStateEnum {
  PLAYING
  PAUSED
  FINISHED
}

input VideoResponseCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  state: VideoResponseStateEnum!
  position: Float
}

type VideoResponse implements Response {
  id: ID!
  userId: ID!
  state: VideoResponseStateEnum!
  position: Int
  block: VideoBlock
}

enum UserJourneyRole {
  inviteRequested
  editor
  owner
}

extend type Mutation {
  blockDeleteAction(id: ID!, journeyId: ID!): Block!
  blockUpdateNavigateAction(id: ID!, journeyId: ID!, input: NavigateActionInput!): NavigateAction!
  blockUpdateNavigateToBlockAction(id: ID!, journeyId: ID!, input: NavigateToBlockActionInput!): NavigateToBlockAction!
  blockUpdateNavigateToJourneyAction(id: ID!, journeyId: ID!, input: NavigateToJourneyActionInput!): NavigateToJourneyAction!
  blockUpdateLinkAction(id: ID!, journeyId: ID!, input: LinkActionInput!): LinkAction!

  """blockDelete returns the updated sibling blocks on successful delete"""
  blockDelete(id: ID!, journeyId: ID!, parentBlockId: ID): [Block!]!
  blockOrderUpdate(id: ID!, journeyId: ID!, parentOrder: Int!): [Block!]!
  buttonBlockCreate(input: ButtonBlockCreateInput!): ButtonBlock!
  buttonBlockUpdate(id: ID!, journeyId: ID!, input: ButtonBlockUpdateInput!): ButtonBlock
  cardBlockCreate(input: CardBlockCreateInput!): CardBlock!
  cardBlockUpdate(id: ID!, journeyId: ID!, input: CardBlockUpdateInput!): CardBlock!
  iconBlockCreate(input: IconBlockCreateInput!): IconBlock!
  iconBlockUpdate(id: ID!, journeyId: ID!, input: IconBlockUpdateInput!): IconBlock!
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock!
  imageBlockUpdate(id: ID!, journeyId: ID!, input: ImageBlockUpdateInput!): ImageBlock!
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!): RadioOptionBlock!
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!): RadioQuestionBlock!
  radioOptionBlockUpdate(id: ID!, journeyId: ID!, input: RadioOptionBlockUpdateInput!): RadioOptionBlock!
  radioQuestionBlockUpdate(id: ID!, journeyId: ID!, input: RadioQuestionBlockUpdateInput!): RadioQuestionBlock!
  signUpBlockCreate(input: SignUpBlockCreateInput!): SignUpBlock!
  signUpBlockUpdate(id: ID!, journeyId: ID!, input: SignUpBlockUpdateInput!): SignUpBlock
  stepBlockCreate(input: StepBlockCreateInput!): StepBlock!
  stepBlockUpdate(id: ID!, journeyId: ID!, input: StepBlockUpdateInput!): StepBlock!
  typographyBlockCreate(input: TypographyBlockCreateInput!): TypographyBlock!
  typographyBlockUpdate(id: ID!, journeyId: ID!, input: TypographyBlockUpdateInput!): TypographyBlock!
  videoBlockCreate(input: VideoBlockCreateInput!): VideoBlock!
  videoBlockUpdate(id: ID!, journeyId: ID!, input: VideoBlockUpdateInput!): VideoBlock!
  journeyCreate(input: JourneyCreateInput!): Journey!
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey!
  journeyPublish(id: ID!): Journey
  radioQuestionResponseCreate(input: RadioQuestionResponseCreateInput!): RadioQuestionResponse!
  signUpResponseCreate(input: SignUpResponseCreateInput!): SignUpResponse!
  stepResponseCreate(input: StepResponseCreateInput!): SignUpResponse!
  videoResponseCreate(input: VideoResponseCreateInput!): VideoResponse!
  userJourneyApprove(id: ID!): UserJourney!
  userJourneyPromote(id: ID!): UserJourney!
  userJourneyRemove(id: ID!): UserJourney!
  userJourneyRequest(journeyId: ID!, idType: IdType): UserJourney!
}

extend type Video @key(fields: "id primaryLanguageId") {
  id: ID! @external
  primaryLanguageId: ID! @external
}

extend type Language @key(fields: "id") {
  id: ID! @external
}

extend type Query {
  adminJourneys: [Journey!]!
  adminJourney(id: ID!, idType: IdType): Journey
  journeys(where: JourneysFilter): [Journey!]!
  journey(id: ID!, idType: IdType): Journey
}

extend type User @key(fields: "id") {
  id: ID! @external
}
