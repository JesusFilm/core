# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

interface Action {
  gtmEventName: String!
}

interface VideoContent {
  src: String!
}

interface Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
}

type Icon {
  name: IconName!
  color: IconColor!
  size: IconSize!
}

enum IconName {
  ArrowForwardRounded
  BeenhereRounded
  ChatBubbleOutlineRounded
  CheckCircleRounded
  ChevronRightRounded
  ContactSupportRounded
  FormatQuoteRounded
  LiveTvRounded
  LockOpenRounded
  MenuBookRounded
  PlayArrowRounded
  RadioButtonUncheckedRounded
  SendRounded
  SubscriptionsRounded
  TranslateRounded
}

enum IconColor {
  action
  disabled
  error
  inherit
  primary
  secondary
}

enum IconSize {
  inherit
  lg
  md
  sm
  xl
}

type ButtonBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  label: String!
  variant: ButtonVariant!
  color: ButtonColor!
  size: ButtonSize!
  startIcon: Icon!
  endIcon: Icon!
  action: Action!
}

enum ButtonVariant {
  contained
  text
}

enum ButtonColor {
  error
  inherit
  primary
  secondary
}

enum ButtonSize {
  large
  medium
  small
}

type CardBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String!

  """
  coverBlockId is present if a child block should be used as a cover.
      This child block should not be rendered normally, instead it should be used
      as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: String!

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
      is set to true the coverBlock Image should be displayed as a blur in the
      background.
  """
  fullscreen: Boolean!

  """
  themeMode can override journey themeMode. If nothing is set then use
      themeMode from journey
  """
  themeMode: ThemeMode!

  """
  themeName can override journey themeName. If nothing is set then use
      themeName from journey
  """
  themeName: ThemeName!
}

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

type GridContainerBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  spacing: Int!
  direction: GridDirection!
  justifyContent: GridJustifyContent!
  alignItems: GridAlignItems!
}

enum GridDirection {
  columnReverse
  column
  row
  rowReverse
}

enum GridJustifyContent {
  flexStart
  flexEnd
  center
}

enum GridAlignItems {
  baseline
  flexStart
  flexEnd
  center
}

type GridItemBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  xl: Int!
  lg: Int!
  sm: Int!
}

type ImageBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  src: String!
  width: Int!
  height: Int!
  alt: String!

  """
  blurhash is a compact representation of a placeholder for an image.
    Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
}

type RadioOptionBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  label: String!
  action: Action!
}

type RadioQuestionBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  label: String!
  description: String!
}

type SignUpBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  action: Action!
  submitIcon: Icon!
  submitLabel: String!
}

type StepBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!

  """
  
    nextBlockId contains the preferred block to navigate to when a
    NavigateAction occurs or if the user manually tries to advance to the next
    step. If no nextBlockId is set it can be assumed that this step represents
    the end of the current journey.
  """
  nextBlockId: ID!

  """
  locked will be set to true if the user should not be able to manually
    advance to the next step.
  """
  locked: Boolean!
}

type TypographyBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  content: String!
  variant: TypographyVariant!
  color: TypographyColor!
  align: TypographyAlign!
}

enum TypographyVariant {
  h1
  h2
  h3
  h4
  h5
  h6
  subtitle1
  subtitle2
  body1
  body2
  caption
  overline
}

enum TypographyColor {
  primary
  secondary
  error
}

enum TypographyAlign {
  left
  center
  right
}

type VideoBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!
  title: String!

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int!

  """endAt dictates at which point of time the video should end"""
  endAt: Int!
  description: String!
  muted: Boolean!
  autoplay: Boolean!
  videoContent: VideoContent!

  """
  posterBlockId is present if a child block should be used as a poster.
    This child block should not be rendered normally, instead it should be used
    as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID!
}

"""
VideoTriggerBlock is a block that indicates the video to navigate
to the next block at the designated time.
"""
type VideoTriggerBlock implements Block {
  id: ID!
  parentBlockId: ID!
  journey: Journey!

  """
  triggerStart sets the time as to when a video navigates to the next block,
    this is the number of seconds since the start of the video
  """
  triggerStart: Int!
  action: Action!
}

type Journey {
  id: ID!
  published: Boolean!
  title: String!
  locale: String!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  slug: String!
  blocks: [Block!]!
  primaryImageBlock: ImageBlock!
}

type Query {
  journeys: [Journey!]!
  journey(idType: String!, id: ID!): Journey!
}

type Mutation {
  createJourney(journey: JourneyInput!): Journey!
}

input JourneyInput {
  published: Boolean!
  title: String!
  locale: String!
  themeMode: String!
  themeName: String!
  description: String

  """
  Slug should be unique amongst all journeys (server will throw BAD_USER_INPUT error if not)
  """
  slug: String!
}
