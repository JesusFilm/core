interface Action {
  gtmEventName: String
}

interface Block {
  id: ID!
  parentBlockId: ID
}

type Journey @key(fields: "id") {
  id: ID!
  published: Boolean!
  title: String!
  blocks: [Block!]
}

type LinkAction implements Action {
  gtmEventName: String
  url: String!
  target: String
}

extend type Mutation {
  journeyCreate(title: String!): Journey!
  journeyPublish(id: ID!): Journey
  signupResponseCreate(input: SignupResponseCreateInput!): SignupResponse!
  radioQuestionResponseCreate(input: RadioQuestionResponseCreateInput!): RadioQuestionResponse!
  videoResponseCreate(input: VideoResponseCreateInput!): VideoResponse!
}

"""
NavigateAction is an Action that navigates to the nextBlockId field set on the
closest ancestor StepBlock.
"""
type NavigateAction implements Action {
  gtmEventName: String
}

type NavigateToBlockAction implements Action {
  gtmEventName: String
  blockId: String!
}

type NavigateToJourneyAction implements Action {
  gtmEventName: String
  journeyId: String!
}

extend type Query {
  journeys: [Journey!]!
  journey(id: ID!): Journey
}

type RadioOptionBlock implements Block {
  id: ID!
  parentBlockId: ID
  label: String!
  action: Action
}

type RadioQuestionBlock implements Block {
  id: ID!
  parentBlockId: ID
  label: String!
  description: String
  variant: RadioQuestionVariant
}

type RadioQuestionResponse implements Response {
  id: ID!
  userId: ID!
  radioOptionBlockId: ID!
  block: RadioQuestionBlock!
}

input RadioQuestionResponseCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  radioOptionBlockId: ID!
}

enum RadioQuestionVariant {
  LIGHT
  DARK
}

interface Response {
  id: ID!
  userId: ID!
}

type SignupBlock implements Block {
  id: ID!
  parentBlockId: ID
}

type SignupResponse implements Response {
  id: ID!
  userId: ID!
  name: String!
  email: String!
  block: SignupBlock!
}

input SignupResponseCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  name: String!
  email: String!
}

type StepBlock implements Block {
  id: ID!

  """
  nextBlockId contains the preferred block to navigate to when a
  NavigateAction occurs or if the user manually tries to advance to the next
  step. If no nextBlockId is set it can be assumed that this step represents
  the end of the current journey.
  """
  nextBlockId: ID

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  parentBlockId: ID
}

type VideoBlock implements Block {
  id: ID!
  parentBlockId: ID
  src: String!
  title: String!
  description: String
  volume: Int
  autoplay: Boolean
}

type VideoResponse implements Response {
  id: ID!
  userId: ID!
  state: VideoResponseStateEnum!
  block: VideoBlock!
}

input VideoResponseCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  state: VideoResponseStateEnum!
}

enum VideoResponseStateEnum {
  PLAYING
  PAUSED
  FINISHED
}
