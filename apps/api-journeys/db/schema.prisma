generator client {
  provider = "prisma-client-js"
  output   = env("PRISMA_LOCATION")
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

enum ButtonAction {
  NavigateAction
  NavigateToBlockAction
  NavigateToJourneyAction
  LinkAction
}

enum VideoBlockSource {
  internal
  youTube
}

model Event {
  id                 String            @id @default(uuid())
  typename           String
  journeyId          String?
  blockId            String?
  stepId             String?
  createdAt          DateTime          @default(now())
  label              String?
  value              String?
  visitorId          String
  Visitor            Visitor           @relation(fields: [visitorId], references: [id])
  action             ButtonAction?
  actionValue        String?
  messagePlatform    MessagePlatform?
  languageId         String?
  radioOptionBlockId String?
  email              String?
  nextStepId         String?
  position           Float?
  source             VideoBlockSource?
  progress           Int?
  userId             String?

  @@index([id, journeyId, visitorId, blockId, userId])
}

enum MessagePlatform {
  facebook
  telegram
  whatsApp
  instagram
  viber
  vk
  snapchat
  skype
  line
  tikTok
}

enum VisitorStatus {
  star
  prohibited
  checkMarkSymbol
  thumbsUp
  thumbsDown
  partyPopper
  warning
  robotFace
  redExclamationMark
  redQuestionMark
}

enum DeviceType {
  console
  mobile
  tablet
  smarttv
  wearable
  embedded
}

model Visitor {
  id                        String           @id
  createdAt                 DateTime         @unique @default(now())
  countryCode               String?
  email                     String?
  events                    Event[]
  lastChatStartedAt         DateTime?
  lastChatPlatform          MessagePlatform?
  lastStepViewedAt          DateTime?
  lastLinkAction            String?
  lastTextResponse          String?
  lastRadioQuestion         String?
  lastRadioOptionSubmission String?
  messagePlatform           MessagePlatform?
  messagePlatformId         String?
  name                      String?
  notes                     String?
  status                    VisitorStatus?
  team                      Team             @relation(fields: [teamId], references: [id])
  teamId                    String
  userId                    String
  userAgent                 Json?

  @@index([id, teamId, createdAt, userId])
}

model Team {
  id           String    @id
  title        String
  contactEmail String?
  createdAt    DateTime  @default(now())
  visitor      Visitor[]
  member       Member[]
  journey      Journey[]
}

enum UserJourneyRole {
  inviteRequested
  editor
  owner
}

model UserJourney {
  id        String          @id @default(uuid())
  userId    String
  journeyId String
  journey   Journey         @relation(fields: [journeyId], references: [id])
  role      UserJourneyRole
  openedAt  DateTime?       @default(now())

  @@unique([journeyId, userId])
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

model Journey {
  id                  String        @id @default(uuid())
  title               String
  languageId          String
  description         String?
  duration            Int           @default(0)
  slug                String        @unique
  archivedAt          DateTime?
  createdAt           DateTime      @default(now())
  deletedAt           DateTime?
  publishedAt         DateTime?
  trashedAt           DateTime?
  featuredAt          DateTime?
  status              JourneyStatus
  seoTitle            String?
  seoDescription      String?
  primaryImageBlockId String?
  template            Boolean?      @default(false)
  teamId              String
  themeMode           ThemeMode?    @default(light)
  themeName           ThemeName?    @default(base)
  userJourney         UserJourney[]
  team                Team          @relation(fields: [teamId], references: [id])
  UserInvite          UserInvite[]

  @@index([slug])
}

model Member {
  id        String   @id
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  userId    String
  createdAt DateTime @default(now())

  @@unique([teamId, userId])
}

enum Role {
  publisher
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roles  Role[]
}

model JourneyProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  acceptedTermsAt DateTime @default(now())
}

model UserInvite {
  id         String    @id @default(uuid())
  journeyId  String
  senderId   String
  email      String
  acceptedAt DateTime?
  removedAt  DateTime?
  journey    Journey   @relation(fields: [journeyId], references: [id])

  @@unique([journeyId, email])
  @@index([journeyId, email])
}
