// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = env("PRISMA_LOCATION_JOURNEYS")
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator erd {
  provider    = "prisma-erd-generator"
  ignoreEnums = true
  disabled    = true
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL_JOURNEYS")
}

enum MessagePlatform {
  facebook
  telegram
  whatsApp
  instagram
  viber
  vk
  snapchat
  skype
  line
  tikTok
  custom
  globe2
  globe3
  messageText1
  messageText2
  send1
  send2
  messageChat2
  messageCircle
  messageNotifyCircle
  messageNotifySquare
  messageSquare
  mail1
  linkExternal
  home3
  home4
  helpCircleContained
  helpSquareContained
  shieldCheck
  menu1
  checkBroken
  checkContained
  settings
}

enum VisitorStatus {
  star
  prohibited
  checkMarkSymbol
  thumbsUp
  thumbsDown
  partyPopper
  warning
  robotFace
  redExclamationMark
  redQuestionMark
}

enum DeviceType {
  console
  mobile
  tablet
  smarttv
  wearable
  embedded
}

enum ButtonAction {
  NavigateToBlockAction
  LinkAction
  EmailAction
}

enum VideoBlockSource {
  cloudflare
  internal
  youTube
}

enum IntegrationType {
  growthSpaces
}

enum TextResponseType {
  freeForm
  name
  email
}

model ChatButton {
  id        String           @id @default(uuid())
  journeyId String
  link      String?
  updatedAt DateTime         @default(now()) @updatedAt
  platform  MessagePlatform?
  journey   Journey          @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@index(journeyId)
}

model Event {
  id                      String            @id @default(uuid())
  typename                String
  journeyId               String?
  blockId                 String?
  stepId                  String?
  createdAt               DateTime          @default(now())
  label                   String?
  value                   String?
  visitorId               String
  action                  ButtonAction?
  actionValue             String?
  messagePlatform         MessagePlatform?
  languageId              String?
  radioOptionBlockId      String?
  email                   String?
  nextStepId              String?
  previousStepId          String?
  position                Float?
  source                  VideoBlockSource?
  progress                Int?
  userId                  String?
  journeyVisitorJourneyId String?
  journeyVisitorVisitorId String?
  updatedAt               DateTime          @default(now()) @updatedAt
  visitor                 Visitor           @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  journeyVisitor          JourneyVisitor?   @relation(fields: [journeyVisitorJourneyId, journeyVisitorVisitorId], references: [journeyId, visitorId])

  @@index(journeyId)
  @@index(visitorId)
  @@index(blockId)
  @@index(userId)
}

model Visitor {
  id                        String           @id @default(uuid())
  createdAt                 DateTime         @default(now())
  countryCode               String?
  duration                  Int              @default(0)
  email                     String?
  events                    Event[]
  lastChatStartedAt         DateTime?
  lastChatPlatform          MessagePlatform?
  lastStepViewedAt          DateTime?
  lastLinkAction            String?
  lastTextResponse          String?
  lastRadioQuestion         String?
  lastRadioOptionSubmission String?
  messagePlatform           MessagePlatform?
  messagePlatformId         String?
  name                      String?
  notes                     String?
  status                    VisitorStatus?
  referrer                  String?
  teamId                    String
  userId                    String
  userAgent                 Json?
  updatedAt                 DateTime         @default(now()) @updatedAt
  journeyVisitors           JourneyVisitor[]
  team                      Team             @relation(fields: [teamId], references: [id])

  @@unique([teamId, userId])
  @@index(teamId)
  @@index(createdAt(sort: Desc))
  @@index(userId)
  @@index(status)
  @@index(countryCode)
}

model Host {
  id        String    @id @default(uuid())
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])
  title     String
  location  String?
  src1      String?
  src2      String?
  updatedAt DateTime  @default(now()) @updatedAt
  journeys  Journey[]

  @@index(teamId)
}

model JourneyVisitor {
  id                        String           @id @default(uuid())
  journeyId                 String
  visitorId                 String
  createdAt                 DateTime         @default(now())
  duration                  Int              @default(0)
  lastChatStartedAt         DateTime?
  lastChatPlatform          MessagePlatform?
  lastStepViewedAt          DateTime?
  lastLinkAction            String?
  lastTextResponse          String?
  lastRadioQuestion         String?
  lastRadioOptionSubmission String?
  activityCount             Int              @default(0)
  updatedAt                 DateTime         @default(now()) @updatedAt
  journey                   Journey          @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  visitor                   Visitor          @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  events                    Event[]

  @@unique([journeyId, visitorId])
  @@index(createdAt(sort: Desc))
  @@index(journeyId)
  @@index(visitorId)
  @@index(lastChatStartedAt)
  @@index(lastRadioQuestion)
  @@index(lastTextResponse)
  @@index(activityCount(sort: Desc))
  @@index(duration(sort: Desc))
}

model Team {
  id                 String              @id @default(uuid())
  title              String
  publicTitle        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  plausibleToken     String?
  visitors           Visitor[]
  userTeams          UserTeam[]
  journeys           Journey[]
  hosts              Host[]
  UserTeamInvites    UserTeamInvite[]
  journeyCollections JourneyCollection[]
  customDomains      CustomDomain[]
  integrations       Integration[]

  @@index(title)
}

model Integration {
  id                     String          @id @default(uuid())
  teamId                 String
  type                   IntegrationType
  accessId               String?
  accessSecretPart       String?
  accessSecretCipherText String?
  accessSecretIv         String?
  accessSecretTag        String?
  team                   Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model UserTeam {
  id                   String                @id @default(uuid())
  teamId               String
  team                 Team                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId               String
  role                 UserTeamRole          @default(member)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  journeyNotifications JourneyNotification[]

  @@unique([teamId, userId])
  @@index(role)
  @@index(teamId)
}

model UserTeamInvite {
  id           String    @id @default(uuid())
  teamId       String
  team         Team      @relation(fields: [teamId], references: [id])
  email        String
  senderId     String
  receipientId String?
  acceptedAt   DateTime?
  removedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([teamId, email])
  @@index([email, acceptedAt, removedAt])
  @@index(email)
  @@index(teamId)
}

enum UserTeamRole {
  manager
  member
}

enum UserJourneyRole {
  inviteRequested
  editor
  owner
}

model UserJourney {
  id                  String               @id @default(uuid())
  userId              String
  journeyId           String
  updatedAt           DateTime             @default(now()) @updatedAt
  journey             Journey              @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  role                UserJourneyRole
  openedAt            DateTime?
  journeyNotification JourneyNotification?

  @@unique([journeyId, userId])
  @@index(journeyId)
  @@index(role)
}

model JourneyTag {
  id        String  @id @default(uuid())
  tagId     String
  journeyId String
  journey   Journey @relation(fields: [journeyId], references: [id])

  @@unique([journeyId, tagId])
  @@index([tagId])
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

enum JourneyMenuButtonIcon {
  menu1
  equals
  home3
  home4
  more
  ellipsis
  grid1
  chevronDown
}

model Journey {
  id                        String                      @id @default(uuid())
  title                     String
  languageId                String
  description               String?
  slug                      String                      @unique
  archivedAt                DateTime?
  createdAt                 DateTime                    @default(now())
  deletedAt                 DateTime?
  publishedAt               DateTime?
  trashedAt                 DateTime?
  featuredAt                DateTime?
  status                    JourneyStatus
  seoTitle                  String?
  seoDescription            String?
  primaryImageBlockId       String?                     @unique
  creatorImageBlockId       String?                     @unique
  creatorDescription        String?
  template                  Boolean?                    @default(false)
  teamId                    String
  hostId                    String?
  themeMode                 ThemeMode?                  @default(light)
  themeName                 ThemeName?                  @default(base)
  updatedAt                 DateTime                    @default(now()) @updatedAt
  strategySlug              String?
  plausibleToken            String?
  userJourneys              UserJourney[]
  team                      Team                        @relation(fields: [teamId], references: [id])
  userInvites               UserInvite[]
  blocks                    Block[]
  chatButtons               ChatButton[]
  host                      Host?                       @relation(fields: [hostId], references: [id])
  journeyTags               JourneyTag[]
  actions                   Action[]
  primaryImageBlock         Block?                      @relation("PrimaryImageBlock", fields: [primaryImageBlockId], references: [id], onDelete: SetNull)
  creatorImageBlock         Block?                      @relation("CreatorImageBlock", fields: [creatorImageBlockId], references: [id], onDelete: SetNull)
  journeyVisitors           JourneyVisitor[]
  journeyCollectionJourneys JourneyCollectionJourneys[]
  journeyNotifications      JourneyNotification[]
  website                   Boolean?                    @default(false)
  showShareButton           Boolean?                    @default(true)
  showLikeButton            Boolean?                    @default(true)
  showDislikeButton         Boolean?                    @default(true)
  displayTitle              String?
  showHosts                 Boolean?                    @default(true)
  showChatButtons           Boolean?                    @default(true)
  showReactionButtons       Boolean?                    @default(true)
  showLogo                  Boolean?                    @default(false)
  showMenu                  Boolean?                    @default(false)
  showDisplayTitle          Boolean?                    @default(true)
  logoImageBlockId          String?                     @unique
  logoImageBlock            Block?                      @relation("LogoImageBlock", fields: [logoImageBlockId], references: [id], onDelete: SetNull)
  menuStepBlockId           String?                     @unique
  menuStepBlock             Block?                      @relation("MenuStepBlock", fields: [menuStepBlockId], references: [id], onDelete: SetNull)
  menuButtonIcon            JourneyMenuButtonIcon?

  @@index(title)
}

enum Role {
  publisher
}

model UserRole {
  id     String @id @default(uuid())
  userId String @unique
  roles  Role[]

  @@index(userId)
}

model JourneyProfile {
  id                           String    @id @default(uuid())
  userId                       String    @unique
  acceptedTermsAt              DateTime  @default(now())
  lastActiveTeamId             String?
  onboardingFormCompletedAt    DateTime?
  journeyFlowBackButtonClicked Boolean?

  @@index(userId)
}

model UserInvite {
  id         String    @id @default(uuid())
  journeyId  String
  senderId   String
  email      String
  acceptedAt DateTime?
  removedAt  DateTime?
  updatedAt  DateTime  @default(now()) @updatedAt
  journey    Journey   @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@unique([journeyId, email])
  @@index([email, acceptedAt, removedAt])
}

enum VideoBlockObjectFit {
  fill
  fit
  zoomed
}

model Block {
  id                      String               @id @default(uuid())
  typename                String
  journeyId               String
  parentBlockId           String?
  parentOrder             Int?
  label                   String?
  variant                 String?
  color                   String?
  size                    String?
  startIconId             String?
  endIconId               String?
  action                  Action?
  backgroundColor         String?
  coverBlockId            String?              @unique
  fullscreen              Boolean?
  themeMode               String?
  themeName               String?
  spacing                 Int?
  direction               String?
  justifyContent          String?
  alignItems              String?
  xl                      Int?
  lg                      Int?
  sm                      Int?
  name                    String?
  src                     String?
  width                   Int?
  height                  Int?
  alt                     String?
  blurhash                String?
  submitIconId            String?
  submitLabel             String?
  nextBlockId             String?
  locked                  Boolean?
  hint                    String?
  minRows                 Int?
  content                 String?
  align                   String?
  startAt                 Int?
  endAt                   Int?
  muted                   Boolean?
  autoplay                Boolean?
  posterBlockId           String?              @unique
  fullsize                Boolean?
  videoId                 String?
  videoVariantLanguageId  String?
  source                  VideoBlockSource?
  title                   String?
  description             String?
  image                   String?
  duration                Int?
  objectFit               VideoBlockObjectFit?
  triggerStart            Int?
  projectId               String?
  apiToken                String?
  formSlug                String?
  x                       Int?
  y                       Int?
  routeId                 String?
  integrationId           String?
  type                    TextResponseType?
  updatedAt               DateTime             @default(now()) @updatedAt
  deletedAt               DateTime?
  journey                 Journey              @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  posterBlock             Block?               @relation("PosterBlock", fields: [posterBlockId], references: [id])
  posterBlockParent       Block?               @relation("PosterBlock")
  coverBlock              Block?               @relation("CoverBlock", fields: [coverBlockId], references: [id])
  coverBlockParent        Block?               @relation("CoverBlock")
  primaryImageBlockParent Journey?             @relation("PrimaryImageBlock")
  creatorImageBlockParent Journey?             @relation("CreatorImageBlock")
  nextBlock               Block?               @relation("NextBlock", fields: [nextBlockId], references: [id])
  nextBlockParents        Block[]              @relation("NextBlock")
  parentBlock             Block?               @relation("ParentBlock", fields: [parentBlockId], references: [id], onDelete: Cascade)
  childBlocks             Block[]              @relation("ParentBlock")
  targetActions           Action[]             @relation("Block")
  scale                   Int?
  menuStepBlockParent     Journey?             @relation("MenuStepBlock")
  logoImageBlockParent    Journey?             @relation("LogoImageBlock")
  slug                    String?              @unique

  @@index(journeyId)
  @@index(parentOrder(sort: Asc))
  @@index(typename)
}

model Action {
  parentBlockId String   @id
  gtmEventName  String?
  blockId       String?
  journeyId     String?
  url           String?
  target        String?
  email         String?
  updatedAt     DateTime @default(now()) @updatedAt
  parentBlock   Block    @relation(fields: [parentBlockId], references: [id], onDelete: Cascade)
  journey       Journey? @relation(fields: [journeyId], references: [id])
  block         Block?   @relation("Block", fields: [blockId], references: [id])

  @@index(parentBlockId)
}

model JourneysEmailPreference {
  email                String  @id @unique
  unsubscribeAll       Boolean @default(false)
  accountNotifications Boolean @default(true)

  @@index(email)
}

model JourneyNotification {
  id                      String       @id @default(uuid())
  userId                  String
  journeyId               String
  userTeamId              String?
  userJourneyId           String?      @unique
  visitorInteractionEmail Boolean      @default(false)
  journey                 Journey      @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  userTeam                UserTeam?    @relation(fields: [userTeamId], references: [id], onDelete: Cascade)
  userJourney             UserJourney? @relation(fields: [userJourneyId], references: [id], onDelete: Cascade)

  @@unique([userId, journeyId])
  @@unique([userId, journeyId, userTeamId])
  @@index(userId)
  @@index(journeyId)
}

model CustomDomain {
  id                   String             @id @default(uuid())
  teamId               String
  name                 String             @unique
  apexName             String
  journeyCollectionId  String?
  routeAllTeamJourneys Boolean            @default(true)
  journeyCollection    JourneyCollection? @relation(fields: [journeyCollectionId], references: [id])
  team                 Team               @relation(fields: [teamId], references: [id])
}

model JourneyCollection {
  id                        String                      @id @default(uuid())
  teamId                    String
  title                     String?
  customDomains             CustomDomain[]
  team                      Team                        @relation(fields: [teamId], references: [id])
  journeyCollectionJourneys JourneyCollectionJourneys[]
}

model JourneyCollectionJourneys {
  id                  String            @id @default(uuid())
  journeyCollectionId String
  journeyId           String
  order               Int
  journeyCollection   JourneyCollection @relation(fields: [journeyCollectionId], references: [id], onDelete: Cascade)
  journey             Journey           @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@unique([journeyCollectionId, journeyId])
  @@unique([journeyCollectionId, order])
}
