// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/api-journeys-client"
  previewFeatures = ["interactiveTransactions"]
}

enum ThemeMode {
  light
  dark
}

enum ThemeName {
  base
}

enum UserJourneyRole {
  owner
  editor
  inviteRequested
}

model User {
  id          String        @id
  firstName   String?       
  lastName    String?       
  email       String?        
  imageUrl    String?        
  UserJourney UserJourney[] @relation("User")
}

model Journey {
  id        String     @id @default(uuid())
  title     String
  blocks    Block[]
  locale    String     @default("en-US")
  themeMode ThemeMode  @default(light)
  themeName ThemeName  @default(base)
  description String?
  primaryImageBlockId String?
  primaryImageBlock Block?    @relation("PrimaryImageJourney", fields: [primaryImageBlockId], references: [id], onDelete: SetNull)
  slug      String    @unique
  createdAt DateTime  @default(now())   
  publishedAt DateTime?
  UserJourney         UserJourney[] @relation("Journey")
}

model UserJourney {
  id        String          @id @default(uuid())
  userId    String
  user      User            @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  journeyId String
  journey   Journey         @relation("Journey", fields: [journeyId], references: [id], onDelete: Cascade)
  role      UserJourneyRole @default(inviteRequested)

  @@unique([userId, journeyId], name: "uniqueUserJourney")
}

enum BlockType {
  ButtonBlock
  CardBlock
  ImageBlock
  GridItemBlock
  GridContainerBlock
  RadioOptionBlock
  RadioQuestionBlock
  SignUpBlock
  StepBlock
  TypographyBlock
  VideoBlock
  VideoTriggerBlock
}

model Block {
  id                  String     @id @default(uuid())
  blockType           BlockType  @default(StepBlock)
  journey             Journey    @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  journeyId           String
  parentBlock         Block?     @relation("BlockChildren", fields: [parentBlockId], references: [id], onDelete: Cascade)
  parentBlockId       String?
  childBlocks         Block[]    @relation("BlockChildren")
  primaryImageJourney Journey?   @relation("PrimaryImageJourney")
  extraAttrs          Json?
  parentOrder         Int        @default(0)
  responses           Response[]
}

enum ResponseType {
  RadioQuestionResponse
  SignUpResponse
  VideoResponse
}

model Response {
  id         String       @id @default(uuid())
  type       ResponseType
  userId     String
  block      Block        @relation(fields: [blockId], references: [id], onDelete: Cascade)
  blockId    String
  extraAttrs Json
}
