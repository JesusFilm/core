extend type User @key(fields: "id") {
  id: ID! @external
}

enum UserTeamRole {
  manager
  member
}

type UserTeam @key(fields: "id") {
  id: ID!
  user: User!
  role: UserTeamRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
An edge in a connection.
"""
type UserTeamEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: UserTeam!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A list of userTeams connected with a team.
"""
type UserTeamsConnection {
  """
  Count of user teams
  """
  totalCount: Int!
  """
  A list of edges.
  """
  edges: [UserTeamEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

extend type Query {
  userTeams(teamId: ID!, where: UserTeamFilterInput): [UserTeam!]!
  userTeam(id: ID!): UserTeam!
}

input UserTeamUpdateInput {
  role: UserTeamRole!
}

input UserTeamFilterInput {
  role: [UserTeamRole!]
}

extend type Mutation {
  userTeamUpdate(id: ID!, input: UserTeamUpdateInput): UserTeam!
  userTeamDelete(id: ID!): UserTeam!
}
