  type Journey @key(fields: "id") {
    id: ID!
    published: Boolean!
    title: String!
    locale: String!
    themeMode: ThemeMode!
    themeName: ThemeName!
    description: String
    slug: String!
  }

  enum IdType {
    databaseId
    slug
  }

  extend type Query {
    journeys: [Journey!]!
    journey(id: ID!, idType: IdType): Journey
  }

  input JourneyCreateInput {
    """
    ID should be unique Response UUID
    (Provided for optimistic mutation result matching)
    """
    id: ID
    title: String!
    locale: String
    themeMode: ThemeMode
    themeName: ThemeName
    description: String
    """
    Slug should be unique amongst all journeys
    (server will throw BAD_USER_INPUT error if not)
    """
    slug: String!
  }

  input JourneyUpdateInput {
    id: ID!
    title: String
    locale: String
    themeMode: ThemeMode
    themeName: ThemeName
    description: String
    primaryImageBlockId: ID
    slug: String
  }

  extend type Mutation {
    journeyCreate(input: JourneyCreateInput!): Journey!
    journeyUpdate(input: JourneyUpdateInput!): Journey!
    journeyPublish(id: ID!): Journey
  }

  extend type NavigateToJourneyAction {
    journey: Journey
  }