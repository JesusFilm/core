extend type Language @key(fields: "id") {
  id: ID! @external
}

extend type Tag @key(fields: "id") {
  id: ID! @external
}

type Journey @key(fields: "id") {
  id: ID!
  title: String!
  language: Language!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  creatorDescription: String
  slug: String!
  archivedAt: DateTime
  deletedAt: DateTime
  publishedAt: DateTime
  trashedAt: DateTime
  featuredAt: DateTime
  createdAt: DateTime!
  status: JourneyStatus!
  seoTitle: String
  seoDescription: String
  template: Boolean
  host: Host
  team: Team
  strategySlug: String
  tags: [Tag!]!
}

enum IdType {
  databaseId
  slug
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

input JourneysFilter {
  featured: Boolean
  template: Boolean
  ids: [ID!]
  tagIds: [ID!]
  languageIds: [ID!]
  limit: Int
  orderByRecent: Boolean
}

enum JourneysReportType {
  multipleFull
  multipleSummary
  singleFull
  singleSummary
}

type PowerBiEmbed {
  """
  The report ID
  """
  reportId: String!
  """
  The name of the report
  """
  reportName: String!
  """
  The embed URL of the report
  """
  embedUrl: String!
  """
  The embed token
  """
  accessToken: String!
  """
  The date and time (UTC) of token expiration
  """
  expiration: String!
}

extend type Query {
  """
  returns all journeys that match the provided filters
  If no team id is provided and template is not true then only returns journeys
  where the user is not a member of a team but is an editor or owner of the
  journey
  """
  adminJourneys(
    status: [JourneyStatus!]
    template: Boolean
    teamId: ID
    """
    Use Last Active Team Id from JourneyProfile (if null will error)
    """
    useLastActiveTeamId: Boolean
  ): [Journey!]!
  adminJourneysReport(reportType: JourneysReportType!): PowerBiEmbed
  adminJourney(id: ID!, idType: IdType): Journey!
  journeys(where: JourneysFilter): [Journey!]!
  journey(id: ID!, idType: IdType): Journey!
}

input JourneyCreateInput {
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input JourneyUpdateInput {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  creatorDescription: String
  creatorImageBlockId: ID
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
  hostId: String
  strategySlug: String
  tagIds: [ID!]
}

extend type UserJourney {
  journey: Journey
}

input JourneyTemplateInput {
  template: Boolean
}

extend type Mutation {
  journeyCreate(input: JourneyCreateInput!, teamId: ID!): Journey!
  journeyDuplicate(id: ID!, teamId: ID!): Journey!
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey!
  """
  Sets journey status to published
  """
  journeyPublish(id: ID!): Journey
  """
  Sets journey status to featured
  """
  journeyFeature(id: ID!, feature: Boolean!): Journey
  """
  Sets journeys statuses to archived
  """
  journeysArchive(ids: [ID!]!): [Journey]
  """
  Sets journeys statuses to deleted
  """
  journeysDelete(ids: [ID!]!): [Journey]
  """
  Sets journeys statuses to trashed
  """
  journeysTrash(ids: [ID!]!): [Journey]
  """
  Sets journeys statuses to last active status
  """
  journeysRestore(ids: [ID!]!): [Journey]
  """
  Updates template
  """
  journeyTemplate(id: ID!, input: JourneyTemplateInput!): Journey!
}

extend type NavigateToJourneyAction {
  journey: Journey
}
