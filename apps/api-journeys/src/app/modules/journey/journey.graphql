extend type Language @key(fields: "id") {
  id: ID! @external
}

type Journey @key(fields: "id") {
  id: ID!
  title: String!
  language: Language!
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String
  slug: String!
  publishedAt: DateTime
  featuredAt: DateTime
  createdAt: DateTime!
  status: JourneyStatus!
  seoTitle: String
  seoDescription: String
}

enum IdType {
  databaseId
  slug
}

enum JourneyStatus {
  draft
  published
}

input JourneysFilter {
  featured: Boolean
}

extend type Query {
  adminJourneys: [Journey!]!
  adminJourney(id: ID!, idType: IdType): Journey
  journeys(where: JourneysFilter): [Journey!]!
  journey(id: ID!, idType: IdType): Journey
}

input JourneyCreateInput {
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input JourneyUpdateInput {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
}

extend type UserJourney {
  journey: Journey
}

extend type Mutation {
  journeyCreate(input: JourneyCreateInput!): Journey!
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey!
  journeyPublish(id: ID!): Journey
}

extend type NavigateToJourneyAction {
  journey: Journey
}
