input ButtonClickEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  label of the button
  """
  value: String
}

type ButtonClickEvent implements Event {
  id: ID!
  """
  ID of the journey that the buttonBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  stepName of the parent stepBlock
  """
  label: String
  """
  label of the button
  """
  value: String
}

enum MessagePlatform {
  facebook
  telegram
  whatAapp
  instagram
  viber
  vk
  snapchat
  skype
  line
  tiktok
}

input ChatOpenedEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  """
  id of the parent stepBlock
  """
  stepId: ID
  """
  messagePlatform of the link used for chat
  """
  value: MessagePlatform
}

type ChatOpenedEvent implements Event {
  id: ID!
  """
  ID of the journey that the buttonBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  null for ChatOpenedEvent
  """
  label: String
  """
  messagePlatform of the link used for chat
  """
  value: String
}

extend type Mutation {
  buttonClickEventCreate(input: ButtonClickEventCreateInput!): ButtonClickEvent!
  chatOpenedEventCreate(input: ChatOpenedEventCreateInput!): ChatOpenedEvent!
}
