enum VideoPlayEventStateEnum {
  PLAYING
  PAUSED
  FINISHED
}

input VideoPlayEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  state: VideoPlayEventStateEnum!
  position: Float
}

type VideoPlayEvent implements Event {
  id: ID!
  userId: ID!
  state: VideoPlayEventStateEnum!
  position: Int
  block: VideoBlock
}

input VideoMuteEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID!
  blockId: ID!
}

type VideoMuteEvent implements Event {
  id: ID!
  userId: ID!
  block: VideoBlock
}

input VideoFullscreenEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID!
  blockId: ID!
}

type VideoFullscreenEvent implements Event {
  id: ID!
  userId: ID!
  block: VideoBlock
}

input VideoViewEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID!
  videoId: ID!
  languageId: ID!
  blockId: ID!
}

type VideoViewEvent implements Event {
  id: ID!
  userId: ID!
  videoId: ID!
  languageId: ID!
  block: VideoBlock
}

extend type Mutation {
  videoPlayEventCreate(input: VideoPlayEventCreateInput!): VideoPlayEvent!
  videoMuteEventCreate(input: VideoMuteEventCreateInput!): VideoMuteEvent!
  videoFullscreenEventCreate(
    input: VideoFullscreenEventCreateInput!
  ): VideoFullscreenEvent!
  videoViewEventCreate(input: VideoViewEventCreateInput!): VideoViewEvent!
}
