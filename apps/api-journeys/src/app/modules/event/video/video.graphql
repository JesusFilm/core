input VideoStartEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  position: Float
}

type VideoStartEvent implements Event {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoStartEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

input VideoPlayEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  position: Float
}

type VideoPlayEvent implements Event {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoPlayEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

input VideoPauseEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  position: Float
}

type VideoPauseEvent implements Event {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoPauseEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

input VideoCompleteEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  position: Float
}

type VideoCompleteEvent implements Event {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoCompleteEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

input VideoExpandEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  position: Float
}

type VideoExpandEvent implements Event {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoExpandEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

input VideoCollapseEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  position: Float
}

type VideoCollapseEvent implements Event {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoCollapseEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
}

input VideoProgressEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  position: Float
  """
  Progress of the video based on the startAt and endAt values of video
  """
  progress: Int!
}

type VideoProgressEvent implements Event {
  id: ID!
  """
  ID of the journey that the videoBlock belongs to
  """
  journeyId: ID!
  """
  time event was created
  """
  createdAt: DateTime!
  """
  title of the video
  """
  label: String
  """
  source of the video
  """
  value: String
  """
  duration of the video played when the VideoProgressEvent is triggered
  """
  position: Float
  """
  source of the video (based on the source in the value field)
  """
  source: VideoBlockSource
  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!
}

extend type Mutation {
  videoStartEventCreate(input: VideoStartEventCreateInput!): VideoStartEvent!
  videoPlayEventCreate(input: VideoPlayEventCreateInput!): VideoPlayEvent!
  videoPauseEventCreate(input: VideoPauseEventCreateInput!): VideoPauseEvent!
  videoCompleteEventCreate(
    input: VideoCompleteEventCreateInput!
  ): VideoCompleteEvent!
  videoExpandEventCreate(input: VideoExpandEventCreateInput!): VideoExpandEvent!
  videoCollapseEventCreate(
    input: VideoCollapseEventCreateInput!
  ): VideoCollapseEvent!
  videoProgressEventCreate(
    input: VideoProgressEventCreateInput!
  ): VideoProgressEvent!
}
