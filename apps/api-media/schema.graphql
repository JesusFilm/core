extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", import: [])

type CloudflareImage {
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: Date!
}

type CloudflareVideo {
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: Date!
  readyToStream: Boolean!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Mutation {
  createCloudflareUploadByFile: CloudflareImage!
  createCloudflareUploadByUrl(url: String!): CloudflareImage!
  createCloudflareImageFromPrompt(prompt: String!): CloudflareImage!
  deleteCloudflareImage(id: ID!): Boolean!
  cloudflareUploadComplete(id: ID!): Boolean!
  createCloudflareVideoUploadByFile(uploadLength: Int!, name: String!): CloudflareVideo!
  createCloudflareVideoUploadByUrl(url: String!): CloudflareVideo!
  deleteCloudflareVideo(id: ID!): Boolean!
  createImageBySegmindPrompt(prompt: String!, model: SegmindModel!): CloudflareImage! @deprecated(reason: "use createCloudflareImageFromPrompt")
  triggerUnsplashDownload(url: String!): Boolean!
}

type Query {
  getMyCloudflareImages(offset: Int, limit: Int): [CloudflareImage!]!
  getMyCloudflareImage(id: ID!): CloudflareImage!
  getMyCloudflareVideos(offset: Int, limit: Int): [CloudflareVideo!]!
  getMyCloudflareVideo(id: ID!): CloudflareVideo!
  listUnsplashCollectionPhotos(collectionId: String!, page: Int, perPage: Int, orientation: UnsplashPhotoOrientation): [UnsplashPhoto!]!
  searchUnsplashPhotos(query: String!, page: Int, perPage: Int, orderBy: UnsplashOrderBy, collections: [String!], contentFilter: UnsplashContentFilter, color: UnsplashColor, orientation: UnsplashPhotoOrientation): UnsplashQueryResponse!
}

enum SegmindModel {
  sdxl1__0_txt2img
  kandinsky2__2_txt2img
  sd1__5_paragon
  tinysd1__5_txt2img
}

enum UnsplashColor {
  black_and_white
  black
  white
  yellow
  orange
  red
  purple
  magenta
  green
  teal
  blue
}

enum UnsplashContentFilter {
  low
  high
}

enum UnsplashOrderBy {
  latest
  relevant
  editorial
}

type UnsplashPhoto {
  id: ID!
  created_at: String!
  updated_at: String
  blur_hash: String
  width: Int!
  height: Int!
  color: String
  description: String
  alt_description: String
  promoted_at: String
  likes: Int!
  urls: UnsplashPhotoUrls!
  links: UnsplashPhotoLinks!
  user: UnsplashUser!
}

type UnsplashPhotoLinks {
  self: String!
  html: String!
  download: String!
  download_location: String!
}

enum UnsplashPhotoOrientation {
  landscape
  portrait
  squarish
}

type UnsplashPhotoUrls {
  full: String!
  raw: String!
  regular: String!
  small: String!
  thumb: String!
}

type UnsplashQueryResponse {
  total: Int!
  total_pages: Int!
  results: [UnsplashPhoto!]!
}

type UnsplashUser {
  id: ID!
  updated_at: String!
  username: String!
  name: String!
  first_name: String!
  last_name: String
  twitter_username: String
  portfolio_url: String
  bio: String
  location: String
  instagram_username: String
  total_collections: Int!
  total_likes: Int!
  total_photos: Int!
  links: UnsplashUserLinks!
  profile_image: UnsplashUserImage!
}

type UnsplashUserImage {
  small: String!
  medium: String!
  large: String!
}

type UnsplashUserLinks {
  followers: String!
  following: String!
  html: String!
  likes: String!
  photos: String!
  portfolio: String!
  self: String!
}