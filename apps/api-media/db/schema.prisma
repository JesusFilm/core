// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  output          = env("PRISMA_LOCATION_MEDIA")
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = ".prisma/api-media-client"
  output       = "../src/__generated__/pothos-types.ts"
}

generator erd {
  provider    = "prisma-erd-generator"
  ignoreEnums = true
  disabled    = true
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL_MEDIA")
}

model CloudflareImage {
  id        String   @id @default(uuid())
  uploadUrl String?
  userId    String
  createdAt DateTime @default(now())
  uploaded  Boolean  @default(false)
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model CloudflareVideo {
  id            String   @id @default(uuid())
  uploadUrl     String?
  userId        String
  name          String?
  createdAt     DateTime @default(now())
  readyToStream Boolean  @default(false)
  updatedAt     DateTime @default(now()) @updatedAt

  @@index([userId])
}

enum IdType {
  databaseId
  slug
}

enum VideoLabel {
  collection
  episode
  featureFilm
  segment
  series
  shortFilm
  trailer
  behindTheScenes
}

model Video {
  id                String               @id @default(uuid())
  label             VideoLabel
  primaryLanguageId String
  title             VideoTitle[]
  snippet           VideoSnippet[]
  description       VideoDescription[]
  studyQuestions    VideoStudyQuestion[]
  image             String?
  imageAlt          VideoImageAlt[]
  slug              String?              @unique
  noIndex           Boolean?
  childIds          String[] // needed for child sort order
  subtitles         VideoSubtitle[]
  children          Video[]              @relation("ParentChild")
  parent            Video[]              @relation("ParentChild")
  variants          VideoVariant[]
  bibleCitation     BibleCitation[]
  keywords          Keyword[]            @relation("VideoToKeyword")

  @@index(label)
  @@index(childIds)
}

model VideoTitle {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

enum VideoVariantDownloadQuality {
  low
  high
}

model VideoVariantDownload {
  id             String                      @id @default(uuid())
  quality        VideoVariantDownloadQuality
  size           Float?
  url            String
  videoVariantId String?
  videoVariant   VideoVariant?               @relation(fields: [videoVariantId], references: [id], onDelete: Cascade)

  @@unique([quality, videoVariantId])
  @@index(videoVariantId(type: Hash))
}

model VideoVariant {
  id         String                 @id
  hls        String?
  downloads  VideoVariantDownload[]
  duration   Int?
  languageId String
  subtitle   VideoVariantSubtitle[]
  edition    String                 @default("base")
  slug       String                 @unique
  video      Video?                 @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    String?

  @@unique([languageId, videoId])
  @@index(languageId(type: Hash))
  @@index(videoId(type: Hash))
}

model VideoSubtitle {
  id         String  @id @default(uuid())
  videoId    String
  edition    String  @default("base")
  vttSrc     String?
  srtSrc     String?
  primary    Boolean
  languageId String
  Video      Video   @relation(fields: [videoId], references: [id])

  @@unique([videoId, edition, languageId])
  @@index(languageId(type: Hash))
  @@index(edition(type: Hash))
  @@index(primary(type: Hash))
  @@index(videoId(type: Hash))
}

model VideoVariantSubtitle {
  id             String  @id @default(uuid())
  value          String
  primary        Boolean
  languageId     String
  videoVariantId String

  variant VideoVariant @relation(fields: [videoVariantId], references: [id], onDelete: Cascade)

  @@unique([videoVariantId, languageId])
  @@index(languageId(type: Hash))
  @@index(videoVariantId(type: Hash))
}

model VideoSnippet {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model VideoDescription {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model VideoImageAlt {
  id         String  @id @default(uuid())
  value      String
  languageId String
  primary    Boolean
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model VideoStudyQuestion {
  id         String  @id @default(uuid())
  value      String
  languageId String
  order      Int
  primary    Boolean
  crowdInId  String?
  videoId    String?
  video      Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, languageId, order])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
  @@index(order)
}

model ImportTimes {
  modelName  String   @id
  lastImport DateTime
}

model BibleCitation {
  id           String    @id @default(uuid())
  bibleBookId  String
  osisId       String
  chapterStart Int
  chapterEnd   Int?
  verseStart   Int
  verseEnd     Int?
  videoId      String
  order        Int
  video        Video     @relation(fields: [videoId], references: [id])
  bibleBook    BibleBook @relation(fields: [bibleBookId], references: [id])
}

model BibleBook {
  id                   String          @id @default(uuid())
  osisId               String
  name                 BibleBookName[]
  alternateName        String?
  paratextAbbreviation String
  isNewTestament       Boolean
  order                Int
  bibleCitation        BibleCitation[]
}

model BibleBookName {
  id          String    @id @default(uuid())
  value       String
  languageId  String
  primary     Boolean
  bibleBookId String
  bibleBook   BibleBook @relation(fields: [bibleBookId], references: [id])

  @@unique([bibleBookId, languageId])
  @@index(value(type: Hash))
  @@index(primary(type: Hash))
  @@index(languageId(type: Hash))
}

model Keyword {
  id         String  @id @default(uuid())
  value      String
  languageId String
  videos     Video[] @relation("VideoToKeyword")

  @@unique([value, languageId])
  @@index([value(type: Hash)])
}
