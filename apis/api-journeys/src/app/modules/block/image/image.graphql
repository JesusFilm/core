type ImageBlock implements Block @key(fields: "id") @shareable {
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  src: String @shareable
  width: Int! @shareable
  height: Int! @shareable
  alt: String! @shareable
  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String! @shareable
  scale: Int @shareable
  focalTop: Int @shareable
  focalLeft: Int @shareable
}

input ImageBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!
  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input ImageBlockUpdateInput {
  parentBlockId: ID
  src: String
  alt: String
  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  scale: Int
  focalTop: Int
  focalLeft: Int
}

extend type Mutation {
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock!
  imageBlockUpdate(
    id: ID!
    input: ImageBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): ImageBlock!
}

extend type Journey {
  primaryImageBlock: ImageBlock
  creatorImageBlock: ImageBlock
  logoImageBlock: ImageBlock
}
