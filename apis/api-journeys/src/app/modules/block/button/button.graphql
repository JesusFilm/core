enum ButtonVariant {
  text
  contained
  outlined
}

enum ButtonColor {
  primary
  secondary
  error
  inherit
}

enum ButtonSize {
  small
  medium
  large
}

enum ButtonAlignment {
  left
  center
  right
  justify
}

input ButtonBlockSettingsInput {
  alignment: ButtonAlignment
  color: String
}

type ButtonBlockSettings @shareable {
  alignment: ButtonAlignment @shareable
  color: String @shareable
}

type ButtonBlock implements Block @shareable {
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  label: String! @shareable
  variant: ButtonVariant @shareable
  color: ButtonColor @shareable
  size: ButtonSize @shareable
  startIconId: ID @shareable
  endIconId: ID @shareable
  action: Action
  submitEnabled: Boolean @shareable
  settings: ButtonBlockSettings! @shareable
}

input ButtonBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

input ButtonBlockUpdateInput {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

extend type Mutation {
  buttonBlockCreate(input: ButtonBlockCreateInput!): ButtonBlock!
  buttonBlockUpdate(
    id: ID!
    input: ButtonBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): ButtonBlock
}
