schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/federation/v2.6", import: ["@key", "@shareable", "@external"])
{
  query: Query
  mutation: Mutation
}

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @federation__requires(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__provides(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @external(reason: String) on OBJECT | FIELD_DEFINITION

directive @federation__tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

directive @federation__extends on OBJECT | INTERFACE

directive @shareable repeatable on OBJECT | FIELD_DEFINITION

directive @federation__inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @federation__override(from: String!) on FIELD_DEFINITION

directive @federation__composeDirective(name: String) repeatable on SCHEMA

directive @federation__interfaceObject on OBJECT

directive @federation__authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @federation__requiresScopes(scopes: [[federation__Scope!]!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @federation__policy(policies: [[federation__Policy!]!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

scalar DateTime

scalar Json

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

interface Action {
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
}

enum ContactActionType {
  call
  text
}

type NavigateToBlockAction implements Action
  @shareable
{
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  blockId: String!
}

type LinkAction implements Action
  @shareable
{
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  url: String!
  target: String
  customizable: Boolean
  parentStepId: String
}

type EmailAction implements Action
  @shareable
{
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  email: String!
  customizable: Boolean
  parentStepId: String
}

type PhoneAction implements Action
  @shareable
{
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  phone: String!
  countryCode: String!
  contactAction: ContactActionType!
}

type ChatAction implements Action
  @shareable
{
  parentBlockId: ID!
  parentBlock: Block!
  gtmEventName: String
  chatUrl: String!
  target: String
  customizable: Boolean
  parentStepId: String
}

interface Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

type Journey
  @key(fields: "id")
  @shareable
{
  blocks: [Block!] @shareable
  primaryImageBlock: ImageBlock
  creatorImageBlock: ImageBlock
  logoImageBlock: ImageBlock
  menuStepBlock: StepBlock
  chatButtons: [ChatButton!]!
  id: ID!

  """private title for creators"""
  title: String! @shareable
  language: Language! @shareable
  languageId: String! @shareable
  themeMode: ThemeMode!
  themeName: ThemeName!
  description: String @shareable
  creatorDescription: String
  slug: String! @shareable
  archivedAt: DateTime
  deletedAt: DateTime
  publishedAt: DateTime
  trashedAt: DateTime
  featuredAt: DateTime
  updatedAt: DateTime! @shareable
  createdAt: DateTime! @shareable
  status: JourneyStatus! @shareable

  """title for seo and sharing"""
  seoTitle: String
  seoDescription: String
  template: Boolean
  host: Host
  team: Team
  strategySlug: String
  tags: [Tag!]!
  journeyCollections: [JourneyCollection!]!

  """used in a plausible share link to embed report"""
  plausibleToken: String
  website: Boolean
  showShareButton: Boolean
  showLikeButton: Boolean
  showDislikeButton: Boolean

  """public title for viewers"""
  displayTitle: String
  showHosts: Boolean
  showChatButtons: Boolean
  showReactionButtons: Boolean
  showLogo: Boolean
  showMenu: Boolean
  showDisplayTitle: Boolean
  menuButtonIcon: JourneyMenuButtonIcon
  socialNodeX: Int
  socialNodeY: Int
  fromTemplateId: String
  showAssistant: Boolean
  journeyCustomizationDescription: String
  journeyCustomizationFields: [JourneyCustomizationField!]!
  journeyTheme: JourneyTheme
  userJourneys: [UserJourney!]
}

input BlocksFilter {
  journeyIds: [ID!]
  typenames: [String!]
}

input BlockDuplicateIdMap {
  oldId: ID!
  newId: ID!
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

extend type Query {
  blocks(where: BlocksFilter): [Block!]!
  block(id: ID!): Block!
  customDomain(id: ID!): CustomDomain!
  customDomains(teamId: ID!): [CustomDomain!]!
  hosts(teamId: ID!): [Host!]!
  integrations(teamId: ID!): [Integration!]!

  """
  returns all journeys that match the provided filters
  If no team id is provided and template is not true then only returns journeys
  where the user is not a member of a team but is an editor or owner of the
  journey
  """
  adminJourneys(
    status: [JourneyStatus!]
    template: Boolean
    teamId: ID

    """Use Last Active Team Id from JourneyProfile (if null will error)"""
    useLastActiveTeamId: Boolean
  ): [Journey!]!
  adminJourneysReport(reportType: JourneysReportType!): PowerBiEmbed
  adminJourney(id: ID!, idType: IdType): Journey!
  journeys(where: JourneysFilter, options: JourneysQueryOptions): [Journey!]!
  journey(id: ID!, idType: IdType, options: JourneysQueryOptions): Journey!
  journeyCollection(id: ID!): JourneyCollection!
  journeyCollections(teamId: ID!): [JourneyCollection]!
  journeyEventsConnection(journeyId: ID!, filter: JourneyEventsFilter, first: Int, after: String): JourneyEventsConnection!
  journeyEventsCount(journeyId: ID!, filter: JourneyEventsFilter): Int!
  getJourneyProfile: JourneyProfile
  journeyTheme(journeyId: ID!): JourneyTheme

  """Get a list of Visitor Information by Journey"""
  journeyVisitorsConnection(
    """Returns the elements in the list that match the specified filter."""
    filter: JourneyVisitorFilter!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Specifies the sort field for the list."""
    sort: JourneyVisitorSort
  ): JourneyVisitorsConnection!

  """Get a JourneyVisitor count by JourneyVisitorFilter"""
  journeyVisitorCount(filter: JourneyVisitorFilter!): Int!
  journeysEmailPreference(email: String!): JourneysEmailPreference
  journeysPlausibleStatsRealtimeVisitors(id: ID!, idType: IdType): Int!
  journeysPlausibleStatsAggregate(where: PlausibleStatsAggregateFilter!, id: ID!, idType: IdType): PlausibleStatsAggregateResponse!

  """
  This endpoint allows you to break down your stats by some property.
  If you are familiar with SQL family databases, this endpoint corresponds to
  running `GROUP BY` on a certain property in your stats, then ordering by the
  count.
  Check out the [properties](https://plausible.io/docs/stats-api#properties)
  section for a reference of all the properties you can use in this query.
  This endpoint can be used to fetch data for `Top sources`, `Top pages`,
  `Top countries` and similar reports.
  Currently, it is only possible to break down on one property at a time.
  Using a list of properties with one query is not supported. So if you want
  a breakdown by both `event:page` and `visit:source` for example, you would
  have to make multiple queries (break down on one property and filter on
  another) and then manually/programmatically group the results together in one
  report. This also applies for breaking down by time periods. To get a daily
  breakdown for every page, you would have to break down on `event:page` and
  make multiple queries for each date.
  """
  journeysPlausibleStatsBreakdown(where: PlausibleStatsBreakdownFilter!, id: ID!, idType: IdType): [PlausibleStatsResponse!]!

  """
  This endpoint provides timeseries data over a certain time period.
  If you are familiar with the Plausible dashboard, this endpoint
  corresponds to the main visitor graph.
  """
  journeysPlausibleStatsTimeseries(where: PlausibleStatsTimeseriesFilter!, id: ID!, idType: IdType): [PlausibleStatsResponse!]!
  qrCode(id: ID!): QrCode!
  qrCodes(where: QrCodesFilter!): [QrCode!]!
  teams: [Team!]!
  team(id: ID!): Team!
  userInvites(journeyId: ID!): [UserInvite!]
  getUserRole: UserRole
  userTeams(teamId: ID!, where: UserTeamFilterInput): [UserTeam!]!
  userTeam(id: ID!): UserTeam!
  userTeamInvites(teamId: ID!): [UserTeamInvite!]!

  """A list of visitors that are connected with a specific team."""
  visitorsConnection(
    """Returns the visitor items related to a specific team."""
    teamId: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): VisitorsConnection!

  """Get a single visitor"""
  visitor(id: ID!): Visitor!
}

type Mutation {
  """blockDelete returns the updated sibling blocks on successful delete"""
  blockDelete(
    id: ID!

    """drop this parameter after merging teams"""
    journeyId: ID

    """drop this parameter after merging teams"""
    parentBlockId: ID
  ): [Block!]!

  """
  blockDuplicate returns the updated block, it's children and sibling blocks on successful duplicate
  """
  blockDuplicate(
    id: ID!

    """
    parentOrder defines the position to add the duplicated block. Negative values defines the position from the end of the array. Positions greater than the length of the array or null parentOrder will add duplicate at end of the array.
    """
    parentOrder: Int

    """
    idMap is used to set custom ids for the duplicated block and it's descendants.
    """
    idMap: [BlockDuplicateIdMap!]

    """drop this parameter after merging teams"""
    journeyId: ID

    """
    x is used to position a step block block horizontally in the journey flow diagram on
    the editor.
    """
    x: Int

    """
    y is used to position a step block block vertically in the journey flow diagram on
    the editor.
    """
    y: Int
  ): [Block!]!
  blockOrderUpdate(
    id: ID!
    parentOrder: Int!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): [Block!]!

  """blockRestore is used for redo/undo"""
  blockRestore(id: ID!): [Block!]!
  buttonBlockCreate(input: ButtonBlockCreateInput!): ButtonBlock!
  buttonBlockUpdate(
    id: ID!
    input: ButtonBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ButtonBlock
  cardBlockCreate(input: CardBlockCreateInput!): CardBlock!
  cardBlockUpdate(
    id: ID!
    input: CardBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): CardBlock!
  iconBlockCreate(input: IconBlockCreateInput!): IconBlock!
  iconBlockUpdate(
    id: ID!
    input: IconBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): IconBlock!
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock!
  imageBlockUpdate(
    id: ID!
    input: ImageBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ImageBlock!
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!): RadioOptionBlock!
  radioOptionBlockUpdate(
    id: ID!
    input: RadioOptionBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): RadioOptionBlock!
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!): RadioQuestionBlock!
  radioQuestionBlockUpdate(id: ID!, parentBlockId: ID!, gridView: Boolean): RadioQuestionBlock!
  signUpBlockCreate(input: SignUpBlockCreateInput!): SignUpBlock!
  signUpBlockUpdate(
    id: ID!
    input: SignUpBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): SignUpBlock
  spacerBlockCreate(input: SpacerBlockCreateInput!): SpacerBlock!
  spacerBlockUpdate(id: ID!, input: SpacerBlockUpdateInput!): SpacerBlock!
  stepBlockCreate(input: StepBlockCreateInput!): StepBlock!
  stepBlockUpdate(
    id: ID!
    input: StepBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): StepBlock!
  stepBlockPositionUpdate(input: [StepBlockPositionUpdateInput!]!): [StepBlock!]!
  textResponseBlockCreate(input: TextResponseBlockCreateInput!): TextResponseBlock!
  textResponseBlockUpdate(
    id: ID!
    input: TextResponseBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TextResponseBlock
  typographyBlockCreate(input: TypographyBlockCreateInput!): TypographyBlock!
  typographyBlockUpdate(
    id: ID!
    input: TypographyBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TypographyBlock!
  chatButtonCreate(journeyId: ID!, input: ChatButtonCreateInput): ChatButton!
  chatButtonUpdate(id: ID!, journeyId: ID!, input: ChatButtonUpdateInput!): ChatButton!
  chatButtonRemove(id: ID!): ChatButton!
  customDomainCreate(input: CustomDomainCreateInput!): CustomDomain!
  customDomainUpdate(id: ID!, input: CustomDomainUpdateInput!): CustomDomain!
  customDomainDelete(id: ID!): CustomDomain!
  customDomainCheck(id: ID!): CustomDomainCheck!

  """
  Creates a JourneyViewEvent, returns null if attempting to create another
  JourneyViewEvent with the same userId, journeyId, and within the same 24hr
  period of the previous JourneyViewEvent
  """
  journeyViewEventCreate(input: JourneyViewEventCreateInput!): JourneyViewEvent
  radioQuestionSubmissionEventCreate(input: RadioQuestionSubmissionEventCreateInput!): RadioQuestionSubmissionEvent!
  signUpSubmissionEventCreate(input: SignUpSubmissionEventCreateInput!): SignUpSubmissionEvent!
  stepViewEventCreate(input: StepViewEventCreateInput!): StepViewEvent!
  stepNextEventCreate(input: StepNextEventCreateInput!): StepNextEvent!
  stepPreviousEventCreate(input: StepPreviousEventCreateInput!): StepPreviousEvent!
  textResponseSubmissionEventCreate(input: TextResponseSubmissionEventCreateInput!): TextResponseSubmissionEvent!
  videoStartEventCreate(input: VideoStartEventCreateInput!): VideoStartEvent!
  videoPlayEventCreate(input: VideoPlayEventCreateInput!): VideoPlayEvent!
  videoPauseEventCreate(input: VideoPauseEventCreateInput!): VideoPauseEvent!
  videoCompleteEventCreate(input: VideoCompleteEventCreateInput!): VideoCompleteEvent!
  videoExpandEventCreate(input: VideoExpandEventCreateInput!): VideoExpandEvent!
  videoCollapseEventCreate(input: VideoCollapseEventCreateInput!): VideoCollapseEvent!
  videoProgressEventCreate(input: VideoProgressEventCreateInput!): VideoProgressEvent!
  hostCreate(teamId: ID!, input: HostCreateInput!): Host!
  hostUpdate(id: ID!, teamId: ID!, input: HostUpdateInput): Host!
  hostDelete(id: ID!, teamId: ID!): Host!
  integrationGrowthSpacesCreate(input: IntegrationGrowthSpacesCreateInput!): IntegrationGrowthSpaces!
  integrationGrowthSpacesUpdate(id: ID!, input: IntegrationGrowthSpacesUpdateInput!): IntegrationGrowthSpaces!
  integrationDelete(id: ID!): Integration!
  journeyCreate(input: JourneyCreateInput!, teamId: ID!): Journey!
  journeyDuplicate(id: ID!, teamId: ID!): Journey!
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey!

  """Sets journey status to published"""
  journeyPublish(id: ID!): Journey

  """Sets journey status to featured"""
  journeyFeature(id: ID!, feature: Boolean!): Journey

  """Sets journeys statuses to archived"""
  journeysArchive(ids: [ID!]!): [Journey]

  """Sets journeys statuses to deleted"""
  journeysDelete(ids: [ID!]!): [Journey]

  """Sets journeys statuses to trashed"""
  journeysTrash(ids: [ID!]!): [Journey]

  """Sets journeys statuses to last active status"""
  journeysRestore(ids: [ID!]!): [Journey]

  """Updates template"""
  journeyTemplate(id: ID!, input: JourneyTemplateInput!): Journey!
  journeyCollectionCreate(input: JourneyCollectionCreateInput!): JourneyCollection!
  journeyCollectionUpdate(id: ID!, input: JourneyCollectionUpdateInput!): JourneyCollection!
  journeyCollectionDelete(id: ID!): JourneyCollection!
  journeyCustomizationFieldPublisherUpdate(journeyId: ID!, string: String!): [JourneyCustomizationField!]!
  journeyCustomizationFieldUserUpdate(journeyId: ID!, input: [JourneyCustomizationFieldInput!]!): [JourneyCustomizationField!]!
  journeyNotificationUpdate(input: JourneyNotificationUpdateInput!): JourneyNotification!
  journeyProfileCreate: JourneyProfile!
  journeyProfileUpdate(input: JourneyProfileUpdateInput!): JourneyProfile!
  journeyThemeCreate(input: JourneyThemeCreateInput!): JourneyTheme!
  journeyThemeUpdate(id: ID!, input: JourneyThemeUpdateInput!): JourneyTheme!
  journeyThemeDelete(id: ID!): JourneyTheme!
  updateJourneysEmailPreference(input: JourneysEmailPreferenceUpdateInput!): JourneysEmailPreference
  qrCodeCreate(input: QrCodeCreateInput!): QrCode!
  qrCodeUpdate(id: ID!, input: QrCodeUpdateInput!): QrCode!
  qrCodeDelete(id: ID!): QrCode!
  teamCreate(input: TeamCreateInput): Team!
  teamUpdate(id: ID!, input: TeamUpdateInput): Team!
  userInviteCreate(journeyId: ID!, input: UserInviteCreateInput): UserInvite
  userInviteRemove(id: ID!, journeyId: ID!): UserInvite!
  userInviteAcceptAll: [UserInvite!]!
  userJourneyApprove(id: ID!): UserJourney!
  userJourneyPromote(id: ID!): UserJourney!
  userJourneyRemove(id: ID!): UserJourney!

  """Removes all userJourneys associated with a journeyId"""
  userJourneyRemoveAll(id: ID!): [UserJourney!]!
  userJourneyRequest(
    journeyId: ID!

    """drop this parameter after merging teams"""
    idType: IdType
  ): UserJourney!
  userJourneyOpen(id: ID!): UserJourney
  userTeamUpdate(id: ID!, input: UserTeamUpdateInput): UserTeam!
  userTeamDelete(id: ID!): UserTeam!
  userTeamInviteCreate(teamId: ID!, input: UserTeamInviteCreateInput): UserTeamInvite
  userTeamInviteRemove(id: ID!): UserTeamInvite!
  userTeamInviteAcceptAll: [UserTeamInvite!]!

  """Update a visitor"""
  visitorUpdate(id: ID!, input: VisitorUpdateInput!): Visitor!

  """
  Allow current user to update specific allowable fields of their visitor record
  """
  visitorUpdateForCurrentUser(input: VisitorUpdateInput!): Visitor!
}

enum ButtonVariant {
  text
  contained
  outlined
}

enum ButtonColor {
  primary
  secondary
  error
  inherit
}

enum ButtonSize {
  small
  medium
  large
}

enum ButtonAlignment {
  left
  center
  right
  justify
}

input ButtonBlockSettingsInput {
  alignment: ButtonAlignment
  color: String
}

type ButtonBlockSettings
  @shareable
{
  alignment: ButtonAlignment @shareable
  color: String @shareable
}

type ButtonBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  label: String! @shareable
  variant: ButtonVariant @shareable
  color: ButtonColor @shareable
  size: ButtonSize @shareable
  startIconId: ID @shareable
  endIconId: ID @shareable
  action: Action
  submitEnabled: Boolean @shareable
  settings: ButtonBlockSettings! @shareable
}

input ButtonBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

input ButtonBlockUpdateInput {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

type CardBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String @shareable

  """
  backdropBlur should be a number representing blur amount in pixels e.g 20.
  """
  backdropBlur: Int @shareable

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID @shareable

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean! @shareable

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode @shareable

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName @shareable
}

input CardBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  backgroundColor: String
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput {
  parentBlockId: ID
  coverBlockId: ID
  backgroundColor: String
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

enum GridDirection {
  columnReverse
  column
  row
  rowReverse
}

enum GridJustifyContent {
  flexStart
  flexEnd
  center
}

enum GridAlignItems {
  baseline
  flexStart
  flexEnd
  center
}

type GridContainerBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  gap: Int! @shareable
  direction: GridDirection! @shareable
  justifyContent: GridJustifyContent! @shareable
  alignItems: GridAlignItems! @shareable
}

type GridItemBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  xl: Int! @shareable
  lg: Int! @shareable
  sm: Int! @shareable
}

"""IconName is equivalent to the icons found in @mui/icons-material"""
enum IconName {
  PlayArrowRounded
  TranslateRounded
  CheckCircleRounded
  RadioButtonUncheckedRounded
  FormatQuoteRounded
  LockOpenRounded
  ArrowForwardRounded
  ArrowBackRounded
  ChatBubbleOutlineRounded
  LiveTvRounded
  MenuBookRounded
  ChevronRightRounded
  ChevronLeftRounded
  BeenhereRounded
  SendRounded
  SubscriptionsRounded
  ContactSupportRounded
  Launch
  MailOutline
}

enum IconColor {
  primary
  secondary
  action
  error
  disabled
  inherit
}

enum IconSize {
  sm
  md
  lg
  xl
  inherit
}

type IconBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  name: IconName @shareable
  color: IconColor @shareable
  size: IconSize @shareable
}

input IconBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput {
  name: IconName
  color: IconColor
  size: IconSize
}

type ImageBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  src: String @shareable
  width: Int! @shareable
  height: Int! @shareable
  alt: String! @shareable

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String! @shareable
  scale: Int @shareable
  focalTop: Int @shareable
  focalLeft: Int @shareable
}

input ImageBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input ImageBlockUpdateInput {
  parentBlockId: ID
  src: String
  alt: String

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  scale: Int
  focalTop: Int
  focalLeft: Int
}

type MultiselectBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  max: Int
  min: Int
}

type MultiselectOptionBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
}

type RadioOptionBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  label: String! @shareable
  action: Action
  pollOptionImageBlockId: ID @shareable
}

input RadioOptionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput {
  parentBlockId: ID
  label: String
  pollOptionImageBlockId: ID
}

type RadioQuestionBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  gridView: Boolean @shareable
}

input RadioQuestionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

type SignUpBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  action: Action
  submitIconId: ID @shareable
  submitLabel: String @shareable
}

input SignUpBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput {
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

type SpacerBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  spacing: Int @shareable
}

input SpacerBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  spacing: Int
}

input SpacerBlockUpdateInput {
  parentBlockId: ID
  spacing: Int
}

type StepBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable

  """
  nextBlockId contains the preferred block to navigate to, users will have to
  manually set the next block they want to card to navigate to
  """
  nextBlockId: ID @shareable

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int @shareable

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int @shareable

  """
  Slug should be unique amongst all blocks
  (server will throw BAD_USER_INPUT error if not)
  If not required will use the current block id
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String @shareable
}

input StepBlockCreateInput {
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
}

input StepBlockUpdateInput {
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int

  """
  Slug should be unique amongst all blocks
  (server will throw BAD_USER_INPUT error if not)
  If not required will use the current block id
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input StepBlockPositionUpdateInput {
  id: ID!
  x: Int
  y: Int
}

type TextResponseBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  label: String! @shareable
  placeholder: String @shareable
  required: Boolean @shareable
  hint: String @shareable
  hideLabel: Boolean @shareable
  minRows: Int @shareable
  type: TextResponseType @shareable
  routeId: String @shareable
  integrationId: String @shareable
}

enum TextResponseType {
  freeForm
  name
  email
  phone
}

input TextResponseBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input TextResponseBlockUpdateInput {
  parentBlockId: ID
  label: String
  placeholder: String
  required: Boolean
  hint: String
  hideLabel: Boolean
  minRows: Int
  routeId: String
  type: TextResponseType
  integrationId: String
}

enum TypographyVariant {
  h1
  h2
  h3
  h4
  h5
  h6
  subtitle1
  subtitle2
  body1
  body2
  caption
  overline
}

enum TypographyColor {
  primary
  secondary
  error
}

enum TypographyAlign {
  left
  center
  right
}

input TypographyBlockSettingsInput {
  color: String
}

type TypographyBlockSettings
  @shareable
{
  color: String @shareable
}

type TypographyBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  content: String! @shareable
  variant: TypographyVariant @shareable
  color: TypographyColor @shareable
  align: TypographyAlign @shareable
  settings: TypographyBlockSettings! @shareable
}

input TypographyBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

input TypographyBlockUpdateInput {
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

extend type Video
  @key(fields: "id primaryLanguageId")
  @shareable
{
  id: ID! @external
  primaryLanguageId: ID! @external
}

enum VideoBlockSource {
  internal
  youTube
  cloudflare
  mux
}

enum VideoBlockObjectFit {
  """
  The video is scaled to maintain its aspect ratio while filling the
   entire VideoBlock. If the video's aspect ratio does not match the
   aspect ratio of the VideoBlock, then the video will be clipped to fit.
  """
  fill

  """
  The video is scaled to maintain its aspect ratio while fitting within the
   VideoBlock. The entire video is made to fill the VideoBlock, while
   preserving its aspect ratio, so the video will be "letterboxed" if its
   aspect ratio does not match the aspect ratio of the VideoBlock.
  """
  fit

  """
  12.5% of either side of the video is discarded (this has the effect of
   converting a 16:9 aspect ratio to 4:3). The remaining video is scaled to
   maintain its new aspect ratio while fitting within the VideoBlock.  The
   remaining video is made to fill the VideoBlock, while preserving its new
   aspect ratio, so the video will be "letterboxed" if its new aspect ratio
   does not match the aspect ratio of the VideoBlock.
  """
  zoomed
}

type VideoBlock implements Block
  @key(fields: "id")
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int @shareable

  """endAt dictates at which point of time the video should end"""
  endAt: Int @shareable
  muted: Boolean @shareable
  autoplay: Boolean @shareable

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID @shareable
  fullsize: Boolean @shareable

  """
  internal source videos: video is only populated when videoID and
  videoVariantLanguageId are present
  """
  video: Video @deprecated(reason: "use mediaVideo union instead")

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID @shareable

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID @shareable

  """
  internal source: videoId, videoVariantLanguageId, and video present
  youTube source: videoId, title, description, and duration present
  """
  source: VideoBlockSource! @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field.
  For other sources this is automatically populated.
  """
  title: String @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  description: String @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  image: String @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  duration in seconds.
  """
  duration: Int @shareable

  """action that should be performed when the video ends"""
  action: Action

  """how the video should display within the VideoBlock"""
  objectFit: VideoBlockObjectFit @shareable
  subtitleLanguage: Language @shareable
}

"""
VideoTriggerBlock is a block that indicates the video to navigate
to the next block at the designated time.
"""
type VideoTriggerBlock implements Block
  @shareable
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int! @shareable
  action: Action!
}

type ChatButton
  @shareable
{
  id: ID!
  link: String
  platform: MessagePlatform
}

input ChatButtonCreateInput {
  link: String
  platform: MessagePlatform
}

input ChatButtonUpdateInput {
  link: String
  platform: MessagePlatform
}

type CustomDomain
  @shareable
{
  id: ID!
  team: Team!
  name: String!
  apexName: String!
  journeyCollection: JourneyCollection
  routeAllTeamJourneys: Boolean!
}

type CustomDomainCheck
  @shareable
{
  """
  Is the domain correctly configured in the DNS?
  If false, A Record and CNAME Record should be added by the user.
  """
  configured: Boolean!

  """
  Does the domain belong to the team?
  If false, verification and verificationResponse will be populated.
  """
  verified: Boolean!

  """Verification records to be added to the DNS to confirm ownership."""
  verification: [CustomDomainVerification!]

  """Reasoning as to why verification is required."""
  verificationResponse: CustomDomainVerificationResponse
}

input CustomDomainCreateInput {
  id: ID
  teamId: String!
  name: String!
  journeyCollectionId: ID
  routeAllTeamJourneys: Boolean
}

input CustomDomainUpdateInput {
  journeyCollectionId: ID
  routeAllTeamJourneys: Boolean
}

type CustomDomainVerification
  @shareable
{
  type: String!
  domain: String!
  value: String!
  reason: String!
}

type CustomDomainVerificationResponse
  @shareable
{
  code: String!
  message: String!
}

enum ButtonAction {
  NavigateToBlockAction
  LinkAction
  EmailAction
  PhoneAction
  ChatAction
}

type ButtonClickEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the button"""
  value: String

  """Action type of the button when it was clicked"""
  action: ButtonAction

  """
  The label for each corresponding action, mapping below:
  NavigateToBlockAction - StepName (generated in client) of the StepBlock
  LinkAction - url of the link
  """
  actionValue: String
}

enum MessagePlatform {
  facebook
  telegram
  whatsApp
  instagram
  kakaoTalk
  viber
  vk
  snapchat
  skype
  line
  tikTok
  custom
  globe2
  globe3
  messageText1
  messageText2
  send1
  send2
  messageChat2
  messageCircle
  messageNotifyCircle
  messageNotifySquare
  messageSquare
  mail1
  linkExternal
  home3
  home4
  helpCircleContained
  helpSquareContained
  shieldCheck
  menu1
  checkBroken
  checkContained
  settings
}

type ChatOpenEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for ChatOpenEvent"""
  label: String

  """messagePlatform of the link used for chat"""
  value: String

  """
  messagePlatform of the link used for chat (based on the messagePlatform in the value field)
  """
  messagePlatform: MessagePlatform
}

type MultiselectSubmissionEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the multiselect block belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """comma separated selected option labels"""
  value: String
}

interface Event {
  id: ID!
  journeyId: ID!
  createdAt: DateTime!
  label: String
  value: String
}

input JourneyViewEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  journeyId: ID!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: ID
}

extend type Language
  @key(fields: "id")
{
  id: ID! @external
}

type JourneyViewEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey being viewed"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the journey being viewed"""
  label: String

  """languageId of the journey being viewed"""
  value: String

  """
  language of the journey being viewed (based on the ID in the value field)
  """
  language: Language
}

input RadioQuestionSubmissionEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!
  radioOptionBlockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOption block"""
  value: String
}

type RadioQuestionSubmissionEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the radioQuestionBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """label of the selected radioOptionBlock"""
  value: String
}

input SignUpSubmissionEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """name from the signUpBlock form"""
  name: String!

  """email from the signUpBlock form"""
  email: String!
}

type SignUpSubmissionEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the block belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for signUpSubmissionEvent"""
  label: String

  """name from the signUpBlock form"""
  value: String

  """email from the signUpBlock form"""
  email: String
}

input StepViewEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """stepName of the current stepBlock"""
  value: String
}

type StepViewEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """null for stepViewEvent"""
  label: String

  """stepName of the stepBlock"""
  value: String
}

input StepNextEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """id of the next stepBlock"""
  nextStepId: ID!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

type StepNextEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the stepBlock"""
  label: String

  """stepName of the next stepBlock"""
  value: String
}

input StepPreviousEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID

  """Id of the current StepBlock"""
  blockId: ID!

  """id of the previous stepBlock"""
  previousStepId: ID!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the previous stepBlock"""
  value: String
}

type StepPreviousEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the stepBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the current stepBlock"""
  label: String

  """stepName of the previous stepBlock"""
  value: String
}

input TextResponseSubmissionEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String!
}

type TextResponseSubmissionEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the buttonBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """stepName of the parent stepBlock"""
  label: String

  """response from the TextResponseBlock form"""
  value: String

  """the id of the block this event originates from"""
  blockId: String
}

input VideoStartEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoStartEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoStartEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPlayEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoPlayEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPlayEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoPauseEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoPauseEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoPauseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCompleteEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoCompleteEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCompleteEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoExpandEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoExpandEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoExpandEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoCollapseEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoCollapseEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoCollapseEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource
}

input VideoProgressEventCreateInput {
  """
  ID should be unique Event UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  blockId: ID!

  """id of the parent stepBlock"""
  stepId: ID

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!

  """title of the video"""
  label: String

  """source of the video"""
  value: VideoBlockSource
}

type VideoProgressEvent implements Event
  @shareable
{
  id: ID!

  """ID of the journey that the videoBlock belongs to"""
  journeyId: ID!

  """time event was created"""
  createdAt: DateTime!

  """title of the video"""
  label: String

  """source of the video"""
  value: String

  """duration of the video played when the VideoProgressEvent is triggered"""
  position: Float

  """source of the video (based on the source in the value field)"""
  source: VideoBlockSource

  """
  progress is a integer indicating the precentage completion from the startAt to the endAt times of the videoBlock
  """
  progress: Int!
}

type Host
  @shareable
{
  id: ID!
  teamId: ID!
  title: String!
  location: String
  src1: String
  src2: String
}

input HostUpdateInput {
  """
  title can be undefined as to not update title, but it cannot be null as to clear the value of title
  """
  title: String
  location: String
  src1: String
  src2: String
}

input HostCreateInput {
  title: String!
  location: String
  src1: String
  src2: String
}

type IntegrationGoogle implements Integration
  @shareable
{
  id: ID!
  team: Team!
  type: IntegrationType!
  accessId: String!
  accessSecretPart: String!
  user: User
}

type IntegrationGrowthSpaces implements Integration
  @shareable
{
  id: ID!
  team: Team!
  type: IntegrationType!
  accessId: String!
  accessSecretPart: String!
  routes: [IntegrationGrowthSpacesRoute!]!
}

input IntegrationGrowthSpacesCreateInput {
  accessId: String!
  accessSecret: String!
  teamId: String!
}

input IntegrationGrowthSpacesUpdateInput {
  accessId: String!
  accessSecret: String!
}

type IntegrationGrowthSpacesRoute
  @shareable
{
  id: String!
  name: String!
}

enum IntegrationType {
  google
  growthSpaces
}

interface Integration {
  id: ID!
  team: Team!
  type: IntegrationType!
}

extend type Tag
  @key(fields: "id")
{
  id: ID! @external
}

enum JourneyMenuButtonIcon {
  menu1
  equals
  home3
  home4
  more
  ellipsis
  grid1
  chevronDown
}

enum IdType {
  databaseId
  slug
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

input JourneysFilter {
  featured: Boolean
  template: Boolean
  ids: [ID!]
  tagIds: [ID!]
  languageIds: [ID!]
  limit: Int
  orderByRecent: Boolean
  fromTemplateId: ID
}

input JourneysQueryOptions {
  """
  hostname filters journeys to those that belong to a team with a custom domain
  matching the hostname.
  """
  hostname: String

  """is this being requested from an embed url"""
  embedded: Boolean

  """
  limit results to journeys in a journey collection (currently only available when using hostname option)
  """
  journeyCollection: Boolean
}

enum JourneysReportType {
  multipleFull
  multipleSummary
  singleFull
  singleSummary
}

type PowerBiEmbed
  @shareable
{
  """The report ID"""
  reportId: String!

  """The name of the report"""
  reportName: String!

  """The embed URL of the report"""
  embedUrl: String!

  """The embed token"""
  accessToken: String!

  """The date and time (UTC) of token expiration"""
  expiration: String!
}

input JourneyCreateInput {
  """
  ID should be unique Response UUID
  (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String

  """
  Slug should be unique amongst all journeys
  (server will throw BAD_USER_INPUT error if not)
  If not required will use title formatted with kebab-case
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input JourneyUpdateInput {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  creatorDescription: String
  creatorImageBlockId: ID
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
  hostId: String
  strategySlug: String
  tagIds: [ID!]
  website: Boolean
  showShareButton: Boolean
  showLikeButton: Boolean
  showDislikeButton: Boolean
  displayTitle: String
  showHosts: Boolean
  showChatButtons: Boolean
  showReactionButtons: Boolean
  showLogo: Boolean
  showMenu: Boolean
  showDisplayTitle: Boolean
  menuButtonIcon: JourneyMenuButtonIcon
  menuStepBlockId: ID
  logoImageBlockId: ID
  socialNodeX: Int
  socialNodeY: Int
}

type UserJourney
  @key(fields: "id")
  @shareable
{
  journey: Journey
  journeyNotification: JourneyNotification
  id: ID!
  userId: ID!
  journeyId: ID!
  role: UserJourneyRole!
  user: User

  """Date time of when the journey was first opened"""
  openedAt: DateTime
}

input JourneyTemplateInput {
  template: Boolean
}

type JourneyCollection
  @shareable
{
  id: ID!
  team: Team!
  title: String
  customDomains: [CustomDomain!]
  journeys: [Journey!]
}

input JourneyCollectionCreateInput {
  id: ID
  teamId: String!
  title: String
  journeyIds: [String!]
}

input JourneyCollectionUpdateInput {
  title: String
  journeyIds: [String!]
}

type JourneyCustomizationField
  @shareable
{
  id: ID!
  journeyId: ID!
  key: String!
  value: String
  defaultValue: String
}

input JourneyCustomizationFieldInput {
  id: ID!
  key: String!
  value: String
}

"""
JourneyEvent aggregates all event types. For detailed event type definitions,
see the specific event files in the event module
"""
type JourneyEvent implements Event
  @shareable
{
  """Base event fields from Event interface"""
  id: ID!
  journeyId: ID!
  createdAt: DateTime!
  label: String
  value: String

  """Additional specific event fields"""
  action: ButtonAction
  actionValue: String
  messagePlatform: MessagePlatform
  language: Language
  email: String
  blockId: String
  position: Float
  source: VideoBlockSource
  progress: Int

  """
  database fields from table, not explicitly surfaced from any other types
  """
  typename: String
  visitorId: String

  """Related fields queried from relevant ids in the events table"""
  journeySlug: String
  visitorName: String
  visitorEmail: String
  visitorPhone: String
}

type JourneyEventEdge
  @shareable
{
  cursor: String!
  node: JourneyEvent!
}

type JourneyEventsConnection
  @shareable
{
  edges: [JourneyEventEdge!]!
  pageInfo: PageInfo!
}

input JourneyEventsFilter {
  typenames: [String!]
  periodRangeStart: DateTime
  periodRangeEnd: DateTime
}

type JourneyNotification
  @shareable
{
  id: ID!
  userId: ID!
  journeyId: ID!
  userTeamId: ID
  userJourneyId: ID
  visitorInteractionEmail: Boolean!
}

type UserTeam
  @key(fields: "id")
  @shareable
{
  journeyNotification(journeyId: ID!): JourneyNotification
  id: ID!
  user: User!
  role: UserTeamRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input JourneyNotificationUpdateInput {
  journeyId: ID!
  visitorInteractionEmail: Boolean!
}

type JourneyProfile
  @key(fields: "id")
  @shareable
{
  id: ID!
  userId: ID!
  acceptedTermsAt: DateTime
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

input JourneyProfileUpdateInput {
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

type JourneyTheme
  @shareable
{
  id: ID!
  journeyId: ID!
  journey: Journey!
  userId: ID!
  headerFont: String
  bodyFont: String
  labelFont: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input JourneyThemeCreateInput {
  journeyId: ID!
  headerFont: String
  bodyFont: String
  labelFont: String
}

input JourneyThemeUpdateInput {
  headerFont: String
  bodyFont: String
  labelFont: String
}

type JourneyVisitor
  @key(fields: "visitorId journeyId")
  @shareable
{
  visitorId: ID!
  journeyId: ID!

  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!

  """Duration between createdAt and lastStepViewedAt in seconds"""
  duration: Int

  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime

  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform

  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String

  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform

  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  notes: String

  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime

  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String

  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String

  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String

  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String
  lastMultiselectSubmission: String
  events: [Event!]!
  visitor: Visitor!
}

type JourneyVisitorEdge
  @shareable
{
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: JourneyVisitor!
}

type JourneyVisitorsConnection
  @shareable
{
  """A list of edges."""
  edges: [JourneyVisitorEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input JourneyVisitorFilter {
  journeyId: String!
  hasChatStarted: Boolean
  hasPollAnswers: Boolean
  hasMultiselectSubmission: Boolean
  hasTextResponse: Boolean
  hasIcon: Boolean
  hideInactive: Boolean
  countryCode: String
}

enum JourneyVisitorSort {
  date
  duration
  activity
}

type JourneysEmailPreference
  @shareable
{
  email: String!
  unsubscribeAll: Boolean!
  accountNotifications: Boolean!
}

input JourneysEmailPreferenceUpdateInput {
  email: String!
  preference: String!
  value: Boolean!
}

type PlausibleStatsAggregateValue
  @shareable
{
  value: Float!
  change: Int
}

type PlausibleStatsAggregateResponse
  @shareable
{
  """The number of unique visitors."""
  visitors: PlausibleStatsAggregateValue

  """The number of visits/sessions."""
  visits: PlausibleStatsAggregateValue

  """The number of pageview events."""
  pageviews: PlausibleStatsAggregateValue

  """
  The number of pageviews divided by the number of visits.
  Returns a floating point number. Currently only supported in Aggregate and
  Timeseries endpoints.
  """
  viewsPerVisit: PlausibleStatsAggregateValue

  """Bounce rate percentage."""
  bounceRate: PlausibleStatsAggregateValue

  """Visit duration in seconds."""
  visitDuration: PlausibleStatsAggregateValue

  """
  The number of events (pageviews + custom events). When filtering by a goal,
   this metric corresponds to "Total Conversions" in the dashboard.
  """
  events: PlausibleStatsAggregateValue

  """
  The percentage of visitors who completed the goal. Requires an `event:goal`
  filter or `event:goal` property in the breakdown endpoint
  """
  conversionRate: PlausibleStatsAggregateValue

  """
  The average time users spend on viewing a single page. Requires an
  `event:page` filter or `event:page` property in the breakdown endpoint.
  """
  timeOnPage: PlausibleStatsAggregateValue
}

input PlausibleStatsAggregateFilter {
  """
  See [time periods](https://plausible.io/docs/stats-api#time-periods).
  If not specified, it will default to 30d.
  """
  period: String

  """
  date in the standard ISO-8601 format (YYYY-MM-DD).
  When using a custom range, the date parameter expects two ISO-8601 formatted
  dates joined with a comma e.g `2021-01-01,2021-01-31`. Stats will be returned
  for the whole date range inclusive of the start and end dates.
  """
  date: String

  """
  See [filtering](https://plausible.io/docs/stats-api#filtering)
  section for more details.
  """
  filters: String

  """
  Off by default. You can specify `previous_period` to calculate the percent
  difference with the previous period for each metric. The previous period
  will be of the exact same length as specified in the period parameter.
  """
  interval: String
}

input PlausibleStatsBreakdownFilter {
  """
  Which [property](https://plausible.io/docs/stats-api#properties)
  to break down the stats by.
  """
  property: String!

  """
  See [time periods](https://plausible.io/docs/stats-api#time-periods).
  If not specified, it will default to 30d.
  """
  period: String

  """
  date in the standard ISO-8601 format (YYYY-MM-DD).
  When using a custom range, the date parameter expects two ISO-8601 formatted
  dates joined with a comma e.g `2021-01-01,2021-01-31`. Stats will be returned
  for the whole date range inclusive of the start and end dates.
  """
  date: String

  """
  Limit the number of results. Maximum value is 1000. Defaults to 100.
  If you want to get more than 1000 results, you can make multiple requests
  and paginate the results by specifying the page parameter (e.g. make the
  same request with page=1, then page=2, etc)
  """
  limit: Int

  """
  Number of the page, used to paginate results.
  Importantly, the page numbers start from 1 not 0.
  """
  page: Int

  """
  See [filtering](https://plausible.io/docs/stats-api#filtering)
  section for more details.
  """
  filters: String
}

type PlausibleStatsResponse
  @shareable
{
  """
  On breakdown queries, this is the property that was broken down by.
  On aggregate queries, this is the date the stats are for.
  """
  property: String!

  """The number of unique visitors."""
  visitors: Int

  """The number of visits/sessions."""
  visits: Int

  """The number of pageview events."""
  pageviews: Int

  """
  The number of pageviews divided by the number of visits.
  Returns a floating point number. Currently only supported in Aggregate and
  Timeseries endpoints.
  """
  viewsPerVisit: Float

  """Bounce rate percentage."""
  bounceRate: Int

  """Visit duration in seconds."""
  visitDuration: Int

  """
  The number of events (pageviews + custom events). When filtering by a goal,
   this metric corresponds to "Total Conversions" in the dashboard.
  """
  events: Int

  """
  The percentage of visitors who completed the goal. Requires an `event:goal`
  filter or `event:goal` property in the breakdown endpoint
  """
  conversionRate: Int

  """
  The average time users spend on viewing a single page. Requires an
  `event:page` filter or `event:page` property in the breakdown endpoint.
  """
  timeOnPage: Float
}

input PlausibleStatsTimeseriesFilter {
  """
  See [time periods](https://plausible.io/docs/stats-api#time-periods).
  If not specified, it will default to 30d.
  """
  period: String

  """
  date in the standard ISO-8601 format (YYYY-MM-DD).
  When using a custom range, the date parameter expects two ISO-8601 formatted
  dates joined with a comma e.g `2021-01-01,2021-01-31`. Stats will be returned
  for the whole date range inclusive of the start and end dates.
  """
  date: String

  """
  See [filtering](https://plausible.io/docs/stats-api#filtering)
  section for more details.
  """
  filters: String

  """
  Choose your reporting interval. Valid options are date (always) and month
  (when specified period is longer than one calendar month). Defaults to month
  for 6mo and 12mo, otherwise falls back to date.
  """
  interval: String
}

extend type ShortLink
  @key(fields: "id")
{
  id: ID! @external
}

type QrCode
  @shareable
{
  id: ID!

  """Team where the Qr Code belongs to"""
  team: Team

  """Journey where the Qr Code was created from"""
  journey: Journey

  """ShortLink that handles the redirection"""
  shortLink: ShortLink!
  color: String
  backgroundColor: String
  toJourneyId: String
}

input QrCodesFilter {
  journeyId: ID
  teamId: ID
}

input QrCodeCreateInput {
  teamId: ID!
  journeyId: ID!
}

input QrCodeUpdateInput {
  """
  journey url where the QR code redirects to, will be parsed and
  stored as ids
  """
  to: String
  color: String
  backgroundColor: String
}

type Team
  @key(fields: "id")
  @shareable
{
  id: ID!
  title: String!
  publicTitle: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userTeams: [UserTeam!]!
  customDomains: [CustomDomain!]!
  integrations: [Integration!]!
  qrCodes: [QrCode!]!
}

input TeamCreateInput {
  title: String!
  publicTitle: String
}

input TeamUpdateInput {
  title: String!
  publicTitle: String
}

type UserInvite
  @key(fields: "id")
  @shareable
{
  id: ID!
  journeyId: ID!
  senderId: ID!
  email: String!
  acceptedAt: DateTime
  removedAt: DateTime
}

input UserInviteCreateInput {
  email: String!
}

enum UserJourneyRole {
  inviteRequested
  editor
  owner
}

extend type User
  @key(fields: "id")
{
  id: ID! @external
}

type UserRole
  @key(fields: "id")
  @shareable
{
  id: ID!
  userId: ID!
  roles: [Role!]
}

enum Role {
  """
  User can create templates and
  add them to template library
  """
  publisher
}

enum UserTeamRole {
  manager
  member
}

input UserTeamUpdateInput {
  role: UserTeamRole!
}

input UserTeamFilterInput {
  role: [UserTeamRole!]
}

type UserTeamInvite
  @shareable
{
  id: ID!
  teamId: ID!
  email: String!
}

input UserTeamInviteCreateInput {
  email: String!
}

type Browser
  @shareable
{
  name: String
  version: String
}

enum DeviceType {
  console
  mobile
  tablet
  smarttv
  wearable
  embedded
}

type Device
  @shareable
{
  model: String
  type: DeviceType
  vendor: String
}

type OperatingSystem
  @shareable
{
  name: String
  version: String
}

"""These types are a subset provided by the @types/ua-parser-js library."""
type UserAgent
  @shareable
{
  browser: Browser!
  device: Device!
  os: OperatingSystem!
}

"""
The status of a visitor according to team members interacting with the
visitor admin interface. This enum should map to an emoji when displayed
(names here match Apple's emoji name)
"""
enum VisitorStatus {
  star
  prohibited
  checkMarkSymbol
  thumbsUp
  thumbsDown
  partyPopper
  warning
  robotFace
  redExclamationMark
  redQuestionMark
}

"""A visitor with attributes connected to a team."""
type Visitor
  @key(fields: "id")
  @shareable
{
  id: ID!

  """
  The time when the visitor created their first event on a journey connected
  to the requested team.
  """
  createdAt: DateTime!

  """Duration between createdAt and lastStepViewedAt in seconds"""
  duration: Int

  """
  The last time the visitor called the ButtonClickEvent mutation where the url
  is in the format of a recognized chat platform.
  """
  lastChatStartedAt: DateTime

  """
  The last message platform the visitor called the ButtonClickEvent where the
  url is in the format of a recognized chat platform
  """
  lastChatPlatform: MessagePlatform

  """
  The user agent of the visitor as poulated by the visitor's user-agent string
  detected in the JourneyViewEventCreate mutation. This field is enriched
  by data from the ua-parser-js library. If this field is empty it is likely
  that the JourneyViewEventCreate mutation was not called by the visitor.
  """
  userAgent: UserAgent

  """
  The country code of the visitor as poulated by visitor ip address detected in
  the JourneyViewEventCreate mutation. This field country code is converted
  from an IP address by the @maxmind/geoip2-node library. If this field is empty
  it is likely that the JourneyViewEventCreate mutation was not called by the
  visitor or that the country was not able to be determined based on the
  visitor IP address.
  """
  countryCode: String

  """
  The name of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  name: String

  """
  The email address of the visitor as populated by VisitorUpdate mutation or
  SignUpEventSubmissionEventCreate mutation.
  """
  email: String

  """Status of the visitor as populated by VisitorUpdate mutation."""
  status: VisitorStatus

  """
  Message platform the visitor wishes to be connected to us on as populated by
  VisitorUpdate mutation or ChatOpenEventCreate mutation.
  """
  messagePlatform: MessagePlatform

  """
  ID of the visitor as set by VisitorUpdate mutation. This could be a phone
  number, user id or other unique identifier provided by the message platform.
  """
  messagePlatformId: String

  """Private notes of the visitor as set by VisitorUpdate mutation."""
  notes: String

  """
  The last time the visitor called StepViewEvent mutation. It is populated when
  the visitor is first created, and is updated by all event creation mutations.
  """
  lastStepViewedAt: DateTime

  """
  The label of a link action button of the last time the visitor clicked a
  link action button. Populated by ButtonClickEvent
  """
  lastLinkAction: String

  """
  The response of the last text response block the visitor filled out,
  populated by TextResponseSubmission mutation
  """
  lastTextResponse: String

  """
  The question of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioQuestion: String

  """
  The selected option  of the last radio option the visitor filled out,
  populated by RadioQuestionSubmission mutation
  """
  lastRadioOptionSubmission: String

  """The url visitor was referred from"""
  referrer: String
  events: [Event!]!
}

"""An edge in a connection."""
type VisitorEdge
  @shareable
{
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Visitor!
}

"""Information about pagination in a connection."""
type PageInfo
  @shareable
{
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A list of visitors connected with a team."""
type VisitorsConnection
  @shareable
{
  """A list of edges."""
  edges: [VisitorEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""
A list of fields to update a visitor when calling the visitorUpdate mutation
"""
input VisitorUpdateInput {
  """
  The email address of the visitor (will prevent
  SignUpEventSubmissionEventCreate mutation from updating this field
  automatically)
  """
  email: String

  """
  ID of the visitor. This could be a phone number, user id or other unique
  identifier provided by the message platform.
  """
  messagePlatformId: String

  """
  Message platform the visitor wishes to be connected to us on (will prevent
  ChatOpenEventCreate mutation from updating this field automatically)
  """
  messagePlatform: MessagePlatform

  """
  The name of the visitor (will prevent SignUpEventSubmissionEventCreate
  mutation from updating this field automatically)
  """
  name: String

  """
  Private notes relating to the visitor. This information is never made public
  and only accessible by team members.
  """
  notes: String

  """Status of the visitor."""
  status: VisitorStatus

  """
  The country code of the visitor as poulated by visitor ip address detected
  """
  countryCode: String

  """The referring url of the visitor"""
  referrer: String

  """The phone number of the visitor"""
  phone: String
}

type Translation {
  value: String!
  language: Language!
  primary: Boolean!
}

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar link__Import

scalar federation__FieldSet

scalar federation__Scope

scalar federation__Policy

scalar _Any

type _Service {
  sdl: String
}

union _Entity = Journey | JourneyProfile | JourneyVisitor | Language | ShortLink | Tag | Team | User | UserInvite | UserJourney | UserRole | UserTeam | Video | VideoBlock | Visitor
