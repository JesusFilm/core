
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  
{
  query: Query
  mutation: Mutation
  subscription: Subscription
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  API_ANALYTICS @join__graph(name: "api-analytics", url: "http://127.0.0.1:4008/graphql") 
  API_JOURNEYS_MODERN @join__graph(name: "api-journeys-modern", url: "http://127.0.0.1:4004/graphql") 
  API_LANGUAGES @join__graph(name: "api-languages", url: "http://127.0.0.1:4003/graphql") 
  API_MEDIA @join__graph(name: "api-media", url: "http://127.0.0.1:4005/graphql") 
  API_USERS @join__graph(name: "api-users", url: "http://127.0.0.1:4002/graphql") 
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date @join__type(graph: API_JOURNEYS_MODERN)  @join__type(graph: API_MEDIA) 

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime @join__type(graph: API_JOURNEYS_MODERN) 

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO @join__type(graph: API_JOURNEYS_MODERN) 

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @join__type(graph: API_JOURNEYS_MODERN) 

type Error implements BaseError @join__type(graph: API_ANALYTICS)  @join__type(graph: API_MEDIA)  @join__implements(graph: API_ANALYTICS, interface: "BaseError")  @join__implements(graph: API_MEDIA, interface: "BaseError")  {
  message: String
}

type Mutation @join__type(graph: API_ANALYTICS)  @join__type(graph: API_JOURNEYS_MODERN)  @join__type(graph: API_LANGUAGES)  @join__type(graph: API_MEDIA)  @join__type(graph: API_USERS)  {
  siteCreate(input: SiteCreateInput!) : MutationSiteCreateResult! @join__field(graph: API_ANALYTICS) 
  """
  blockDelete returns the updated sibling blocks on successful delete
  """
  blockDelete(
    id: ID!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
    """
    drop this parameter after merging teams
    """
    parentBlockId: ID
  ): [Block!]! @join__field(graph: API_JOURNEYS_MODERN) 
  """
  blockDuplicate returns the updated block, its children and sibling blocks on successful duplicate
  """
  blockDuplicate(
    id: ID!
    """
    parentOrder defines the position to add the duplicated block. Negative values defines the position from the end of the array. Positions greater than the length of the array or null parentOrder will add duplicate at end of the array.
    """
    parentOrder: Int
    """
    idMap is used to set custom ids for the duplicated block and its descendants.
    """
    idMap: [BlockDuplicateIdMap!]
    """
    drop this parameter after merging teams
    """
    journeyId: ID
    """
    x is used to position a step block block horizontally in the journey flow diagram on the editor.
    """
    x: Int
    """
    y is used to position a step block block vertically in the journey flow diagram on the editor.
    """
    y: Int
  ): [Block!]! @join__field(graph: API_JOURNEYS_MODERN) 
  blockOrderUpdate(
    id: ID!
    parentOrder: Int!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): [Block!]! @join__field(graph: API_JOURNEYS_MODERN) 
  """
  blockRestore is used for redo/undo
  """
  blockRestore(id: ID!) : [Block!]! @join__field(graph: API_JOURNEYS_MODERN) 
  blockDeleteAction(id: ID!, journeyId: ID) : Block! @join__field(graph: API_JOURNEYS_MODERN) 
  blockUpdateAction(id: ID!, input: BlockUpdateActionInput!) : Action! @join__field(graph: API_JOURNEYS_MODERN) 
  blockUpdateNavigateToBlockAction(id: ID!, input: NavigateToBlockActionInput!, journeyId: ID) : NavigateToBlockAction! @join__field(graph: API_JOURNEYS_MODERN) 
  blockUpdateLinkAction(id: ID!, input: LinkActionInput!, journeyId: ID) : LinkAction! @join__field(graph: API_JOURNEYS_MODERN) 
  blockUpdateEmailAction(id: ID!, input: EmailActionInput!, journeyId: ID) : EmailAction! @join__field(graph: API_JOURNEYS_MODERN) 
  buttonBlockCreate(input: ButtonBlockCreateInput!) : ButtonBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  buttonBlockUpdate(
    id: ID!
    input: ButtonBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): ButtonBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  cardBlockCreate(input: CardBlockCreateInput!) : CardBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  cardBlockUpdate(
    id: ID!
    input: CardBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): CardBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  gridContainerBlockCreate(input: GridContainerBlockCreateInput!) : GridContainerBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  gridContainerBlockUpdate(
    id: ID!
    input: GridContainerBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): GridContainerBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  gridItemBlockCreate(input: GridItemBlockCreateInput!) : GridItemBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  gridItemBlockUpdate(
    id: ID!
    input: GridItemBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): GridItemBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  iconBlockCreate(input: IconBlockCreateInput!) : IconBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  iconBlockUpdate(
    id: ID!
    input: IconBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): IconBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  imageBlockCreate(input: ImageBlockCreateInput!) : ImageBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  imageBlockUpdate(
    id: ID!
    input: ImageBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): ImageBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!) : RadioQuestionBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  radioQuestionBlockUpdate(
    id: ID!
    input: RadioQuestionBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): RadioQuestionBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!) : RadioOptionBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  radioOptionBlockUpdate(
    id: ID!
    input: RadioOptionBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): RadioOptionBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  signUpBlockCreate(input: SignUpBlockCreateInput!) : SignUpBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  signUpBlockUpdate(
    id: ID!
    input: SignUpBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): SignUpBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  spacerBlockCreate(input: SpacerBlockCreateInput!) : SpacerBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  spacerBlockUpdate(
    id: ID!
    input: SpacerBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): SpacerBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  stepBlockCreate(input: StepBlockCreateInput!) : StepBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  stepBlockUpdate(
    id: ID!
    input: StepBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): StepBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  stepBlockPositionUpdate(input: [StepBlockPositionUpdateInput!]!) : [StepBlock!]! @join__field(graph: API_JOURNEYS_MODERN) 
  textResponseBlockCreate(input: TextResponseBlockCreateInput!) : TextResponseBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  textResponseBlockUpdate(
    id: ID!
    input: TextResponseBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): TextResponseBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  videoTriggerBlockCreate(input: VideoTriggerBlockCreateInput!) : VideoTriggerBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  videoTriggerBlockUpdate(
    id: ID!
    input: VideoTriggerBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): VideoTriggerBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  videoBlockCreate(input: VideoBlockCreateInput!) : VideoBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  videoBlockUpdate(
    id: ID!
    input: VideoBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): VideoBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  typographyBlockCreate(input: TypographyBlockCreateInput!) : TypographyBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  typographyBlockUpdate(
    id: ID!
    input: TypographyBlockUpdateInput!
    """
    drop this parameter after merging teams
    """
    journeyId: ID
  ): TypographyBlock! @join__field(graph: API_JOURNEYS_MODERN) 
  chatButtonCreate(journeyId: ID!, input: ChatButtonCreateInput!) : ChatButton @join__field(graph: API_JOURNEYS_MODERN) 
  chatButtonUpdate(id: ID!, journeyId: ID!, input: ChatButtonUpdateInput!) : ChatButton @join__field(graph: API_JOURNEYS_MODERN) 
  chatButtonRemove(id: ID!) : ChatButton @join__field(graph: API_JOURNEYS_MODERN) 
  journeyCreate(input: JourneyCreateInput!, teamId: ID!) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyUpdate(id: ID!, input: JourneyUpdateInput!) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyDuplicate(id: ID!, teamId: ID!) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyPublish(id: ID!) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyFeature(id: ID!, feature: Boolean!) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  journeysArchive(ids: [ID!]!) : [Journey!]! @join__field(graph: API_JOURNEYS_MODERN) 
  journeysDelete(ids: [ID!]!) : [Journey!]! @join__field(graph: API_JOURNEYS_MODERN) 
  journeysTrash(ids: [ID!]!) : [Journey!]! @join__field(graph: API_JOURNEYS_MODERN) 
  journeysRestore(ids: [ID!]!) : [Journey!]! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyTemplate(id: ID!, input: JourneyTemplateInput!) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  journeySimpleUpdate(id: ID!, journey: Json!) : Json @join__field(graph: API_JOURNEYS_MODERN) 
  journeyAiTranslateCreate(input: JourneyAiTranslateInput!) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyCollectionCreate(input: JourneyCollectionCreateInput!) : JourneyCollection! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyCollectionUpdate(id: ID!, input: JourneyCollectionUpdateInput!) : JourneyCollection! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyCollectionDelete(id: ID!) : JourneyCollection! @join__field(graph: API_JOURNEYS_MODERN) 
  createJourneyEventsExportLog(input: JourneyEventsExportLogInput!) : JourneyEventsExportLog! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyProfileCreate: JourneyProfile! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyProfileUpdate(input: JourneyProfileUpdateInput!) : JourneyProfile! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyThemeCreate(input: JourneyThemeCreateInput!) : JourneyTheme! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyThemeUpdate(id: ID!, input: JourneyThemeUpdateInput!) : JourneyTheme! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyThemeDelete(id: ID!) : JourneyTheme! @join__field(graph: API_JOURNEYS_MODERN) 
  updateJourneysEmailPreference(input: JourneysEmailPreferenceUpdateInput!) : JourneysEmailPreference @join__field(graph: API_JOURNEYS_MODERN) 
  journeyNotificationUpdate(input: JourneyNotificationUpdateInput!) : JourneyNotification! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyLanguageAiDetect(input: MutationJourneyLanguageAiDetectInput!) : Boolean! @join__field(graph: API_JOURNEYS_MODERN) 
  customDomainCreate(input: CustomDomainCreateInput!) : CustomDomain @join__field(graph: API_JOURNEYS_MODERN) 
  customDomainUpdate(id: ID!, input: CustomDomainUpdateInput!) : CustomDomain @join__field(graph: API_JOURNEYS_MODERN) 
  customDomainDelete(id: ID!) : CustomDomain @join__field(graph: API_JOURNEYS_MODERN) 
  customDomainCheck(id: ID!) : Json @join__field(graph: API_JOURNEYS_MODERN) 
  hostCreate(teamId: ID!, input: HostCreateInput!) : Host @join__field(graph: API_JOURNEYS_MODERN) 
  hostUpdate(id: ID!, teamId: ID!, input: HostUpdateInput) : Host @join__field(graph: API_JOURNEYS_MODERN) 
  hostDelete(id: ID!, teamId: ID!) : Host @join__field(graph: API_JOURNEYS_MODERN) 
  integrationGrowthSpacesCreate(input: IntegrationGrowthSpacesCreateInput!) : Integration @join__field(graph: API_JOURNEYS_MODERN) 
  integrationGrowthSpacesUpdate(id: ID!, input: IntegrationGrowthSpacesUpdateInput!) : Integration @join__field(graph: API_JOURNEYS_MODERN) 
  integrationDelete(id: ID!) : Integration @join__field(graph: API_JOURNEYS_MODERN) 
  qrCodeCreate(input: QrCodeCreateInput!) : QrCode! @join__field(graph: API_JOURNEYS_MODERN) 
  qrCodeUpdate(id: ID!, input: QrCodeUpdateInput!) : QrCode! @join__field(graph: API_JOURNEYS_MODERN) 
  qrCodeDelete(id: ID!) : QrCode! @join__field(graph: API_JOURNEYS_MODERN) 
  teamCreate(input: TeamCreateInput!) : Team @join__field(graph: API_JOURNEYS_MODERN) 
  teamUpdate(id: ID!, input: TeamUpdateInput!) : Team @join__field(graph: API_JOURNEYS_MODERN) 
  userJourneyRequest(journeyId: ID!) : UserJourney @join__field(graph: API_JOURNEYS_MODERN) 
  userJourneyApprove(id: ID!) : UserJourney @join__field(graph: API_JOURNEYS_MODERN) 
  userJourneyPromote(id: ID!) : UserJourney @join__field(graph: API_JOURNEYS_MODERN) 
  userJourneyRemove(id: ID!) : UserJourney @join__field(graph: API_JOURNEYS_MODERN) 
  userJourneyRemoveAll(id: ID!) : [UserJourney!] @join__field(graph: API_JOURNEYS_MODERN) 
  userJourneyOpen(id: ID!) : UserJourney @join__field(graph: API_JOURNEYS_MODERN) 
  userTeamUpdate(id: ID!, input: UserTeamUpdateInput!) : UserTeam @join__field(graph: API_JOURNEYS_MODERN) 
  userTeamDelete(id: ID!) : UserTeam @join__field(graph: API_JOURNEYS_MODERN) 
  userTeamInviteCreate(teamId: ID!, input: UserTeamInviteCreateInput!) : UserTeamInvite @join__field(graph: API_JOURNEYS_MODERN) 
  userTeamInviteRemove(id: ID!) : UserTeamInvite @join__field(graph: API_JOURNEYS_MODERN) 
  userTeamInviteAcceptAll: [UserTeamInvite!] @join__field(graph: API_JOURNEYS_MODERN) 
  userInviteCreate(journeyId: ID!, input: UserInviteCreateInput!) : UserInvite @join__field(graph: API_JOURNEYS_MODERN) 
  userInviteRemove(id: ID!, journeyId: ID!) : UserInvite @join__field(graph: API_JOURNEYS_MODERN) 
  userInviteAcceptAll: [UserInvite!] @join__field(graph: API_JOURNEYS_MODERN) 
  visitorUpdate(id: ID!, input: VisitorUpdateInput!) : Visitor @join__field(graph: API_JOURNEYS_MODERN) 
  visitorUpdateForCurrentUser(input: VisitorUpdateForCurrentUserInput!) : Visitor @join__field(graph: API_JOURNEYS_MODERN) 
  audioPreviewCreate(input: MutationAudioPreviewCreateInput!) : AudioPreview! @join__field(graph: API_LANGUAGES) 
  audioPreviewUpdate(input: MutationAudioPreviewUpdateInput!) : AudioPreview! @join__field(graph: API_LANGUAGES) 
  audioPreviewDelete(languageId: ID!) : AudioPreview! @join__field(graph: API_LANGUAGES) 
  """
  Transcode an asset. Returns the bullmq job ID.
  """
  transcodeAsset(input: TranscodeVideoInput!) : String @join__field(graph: API_MEDIA) 
  createCloudflareUploadByFile(input: ImageInput) : CloudflareImage! @join__field(graph: API_MEDIA) 
  createCloudflareUploadByUrl(url: String!, input: ImageInput) : CloudflareImage! @join__field(graph: API_MEDIA) 
  createCloudflareImageFromPrompt(prompt: String!, input: ImageInput) : CloudflareImage! @join__field(graph: API_MEDIA) 
  deleteCloudflareImage(id: ID!) : Boolean! @join__field(graph: API_MEDIA) 
  cloudflareUploadComplete(id: ID!) : Boolean! @join__field(graph: API_MEDIA) 
  """
  The endpoint to upload a file to Cloudflare R2
  """
  cloudflareR2Create(input: CloudflareR2CreateInput!) : CloudflareR2! @join__field(graph: API_MEDIA) 
  cloudflareR2Delete(id: ID!) : CloudflareR2! @join__field(graph: API_MEDIA) 
  createImageBySegmindPrompt(prompt: String!, model: SegmindModel!) : CloudflareImage! @join__field(graph: API_MEDIA)  @deprecated(reason: "use createCloudflareImageFromPrompt") 
  triggerUnsplashDownload(url: String!) : Boolean! @join__field(graph: API_MEDIA) 
  bibleCitationCreate(input: MutationBibleCitationCreateInput!) : BibleCitation @join__field(graph: API_MEDIA) 
  bibleCitationUpdate(input: MutationBibleCitationUpdateInput!) : BibleCitation @join__field(graph: API_MEDIA) 
  bibleCitationDelete(id: ID!) : Boolean @join__field(graph: API_MEDIA) 
  createKeyword(value: String!, languageId: String!) : Keyword! @join__field(graph: API_MEDIA) 
  createMuxVideoUploadByFile(
    name: String!
    userGenerated: Boolean
    downloadable: Boolean = false
    maxResolution: MaxResolutionTier = fhd
  ): MuxVideo! @join__field(graph: API_MEDIA) 
  createMuxVideoUploadByUrl(
    url: String!
    userGenerated: Boolean
    downloadable: Boolean = false
    maxResolution: MaxResolutionTier = fhd
  ): MuxVideo! @join__field(graph: API_MEDIA) 
  enableMuxDownload(id: ID!, resolution: String) : MuxVideo @join__field(graph: API_MEDIA) 
  deleteMuxVideo(id: ID!, userGenerated: Boolean) : Boolean! @join__field(graph: API_MEDIA) 
  """
  Create a new short link domain that can be used for short links (this domain must have a CNAME record pointing to the short link service)
  """
  shortLinkDomainCreate(input: MutationShortLinkDomainCreateInput!) : MutationShortLinkDomainCreateResult! @join__field(graph: API_MEDIA) 
  """
  Update services that can use this short link domain
  """
  shortLinkDomainUpdate(input: MutationShortLinkDomainUpdateInput!) : MutationShortLinkDomainUpdateResult! @join__field(graph: API_MEDIA) 
  """
  delete an existing short link domain (all related short links must be deleted first)
  """
  shortLinkDomainDelete(id: String!) : MutationShortLinkDomainDeleteResult! @join__field(graph: API_MEDIA) 
  """
  create a new short link
  """
  shortLinkCreate(input: MutationShortLinkCreateInput!) : MutationShortLinkCreateResult! @join__field(graph: API_MEDIA) 
  """
  update an existing short link
  """
  shortLinkUpdate(input: MutationShortLinkUpdateInput!) : MutationShortLinkUpdateResult! @join__field(graph: API_MEDIA) 
  """
  delete an existing short link
  """
  shortLinkDelete(id: String!) : MutationShortLinkDeleteResult! @join__field(graph: API_MEDIA) 
  videoVariantCreate(input: VideoVariantCreateInput!) : VideoVariant! @join__field(graph: API_MEDIA) 
  videoVariantUpdate(input: VideoVariantUpdateInput!) : VideoVariant! @join__field(graph: API_MEDIA) 
  videoVariantDelete(id: ID!) : VideoVariant! @join__field(graph: API_MEDIA) 
  videoCreate(input: VideoCreateInput!) : Video! @join__field(graph: API_MEDIA) 
  videoUpdate(input: VideoUpdateInput!) : Video! @join__field(graph: API_MEDIA) 
  videoDelete(id: ID!) : Video! @join__field(graph: API_MEDIA) 
  videoDescriptionCreate(input: VideoTranslationCreateInput!) : VideoDescription! @join__field(graph: API_MEDIA) 
  videoDescriptionUpdate(input: VideoTranslationUpdateInput!) : VideoDescription! @join__field(graph: API_MEDIA) 
  videoDescriptionDelete(id: ID!) : VideoDescription! @join__field(graph: API_MEDIA) 
  videoImageAltCreate(input: VideoTranslationCreateInput!) : VideoImageAlt! @join__field(graph: API_MEDIA) 
  videoImageAltUpdate(input: VideoTranslationUpdateInput!) : VideoImageAlt! @join__field(graph: API_MEDIA) 
  videoImageAltDelete(id: ID!) : VideoImageAlt! @join__field(graph: API_MEDIA) 
  videoSnippetCreate(input: VideoTranslationCreateInput!) : VideoSnippet! @join__field(graph: API_MEDIA) 
  videoSnippetUpdate(input: VideoTranslationUpdateInput!) : VideoSnippet! @join__field(graph: API_MEDIA) 
  videoSnippetDelete(id: ID!) : VideoSnippet! @join__field(graph: API_MEDIA) 
  videoStudyQuestionCreate(input: VideoStudyQuestionCreateInput!) : VideoStudyQuestion! @join__field(graph: API_MEDIA) 
  videoStudyQuestionUpdate(input: VideoStudyQuestionUpdateInput!) : VideoStudyQuestion! @join__field(graph: API_MEDIA) 
  videoStudyQuestionDelete(id: ID!) : VideoStudyQuestion! @join__field(graph: API_MEDIA) 
  videoSubtitleCreate(input: VideoSubtitleCreateInput!) : VideoSubtitle! @join__field(graph: API_MEDIA) 
  videoSubtitleUpdate(input: VideoSubtitleUpdateInput!) : VideoSubtitle! @join__field(graph: API_MEDIA) 
  videoSubtitleDelete(id: ID!) : VideoSubtitle! @join__field(graph: API_MEDIA) 
  videoTitleCreate(input: VideoTranslationCreateInput!) : VideoTitle! @join__field(graph: API_MEDIA) 
  videoTitleUpdate(input: VideoTranslationUpdateInput!) : VideoTitle! @join__field(graph: API_MEDIA) 
  videoTitleDelete(id: ID!) : VideoTitle! @join__field(graph: API_MEDIA) 
  videoOriginCreate(input: MutationVideoOriginCreateInput!) : VideoOrigin! @join__field(graph: API_MEDIA) 
  videoOriginUpdate(input: MutationVideoOriginUpdateInput!) : VideoOrigin! @join__field(graph: API_MEDIA) 
  videoOriginDelete(id: ID!) : VideoOrigin! @join__field(graph: API_MEDIA) 
  videoEditionCreate(input: VideoEditionCreateInput!) : VideoEdition! @join__field(graph: API_MEDIA) 
  videoEditionUpdate(input: VideoEditionUpdateInput!) : VideoEdition! @join__field(graph: API_MEDIA) 
  videoEditionDelete(id: ID!) : VideoEdition! @join__field(graph: API_MEDIA) 
  videoVariantDownloadCreate(input: VideoVariantDownloadCreateInput!) : VideoVariantDownload! @join__field(graph: API_MEDIA) 
  videoVariantDownloadUpdate(input: VideoVariantDownloadUpdateInput!) : VideoVariantDownload! @join__field(graph: API_MEDIA) 
  videoVariantDownloadDelete(id: ID!) : VideoVariantDownload! @join__field(graph: API_MEDIA) 
  userImpersonate(email: String!) : String @join__field(graph: API_USERS) 
  createVerificationRequest(input: CreateVerificationRequestInput) : Boolean @join__field(graph: API_USERS) 
  validateEmail(email: String!, token: String!) : User @join__field(graph: API_USERS) 
}

type MutationSiteCreateSuccess @join__type(graph: API_ANALYTICS)  {
  data: Site!
}

type Site @join__type(graph: API_ANALYTICS)  {
  id: String!
  domain: String!
  memberships: [SiteMembership!]!
  sharedLinks: [SiteSharedLink!]!
  goals: [SiteGoal!]!
}

type SiteGoal @join__type(graph: API_ANALYTICS)  {
  id: String!
  eventName: String
}

type SiteMembership @join__type(graph: API_ANALYTICS)  {
  id: String!
  role: String!
}

type SiteSharedLink @join__type(graph: API_ANALYTICS)  {
  id: String!
  slug: String!
}

type ButtonBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  submitEnabled: Boolean
  settings: ButtonBlockSettings
}

type ButtonBlockSettings @join__type(graph: API_JOURNEYS_MODERN)  {
  alignment: ButtonAlignment
  color: String
}

type CardBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  """
  backgroundColor should be a HEX color value e.g #FFFFFF for white.
  """
  backgroundColor: String
  """
  backdropBlur should be a number representing blur amount in pixels e.g 20.
  """
  backdropBlur: Int
  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID
  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean!
  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode
  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName
}

type ChatButton @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  link: String
  platform: MessagePlatform
}

type CustomDomain @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  name: String
  apexName: String
  routeAllTeamJourneys: Boolean
  team: Team
  journeyCollection: JourneyCollection
}

type EmailAction implements Action @join__type(graph: API_JOURNEYS_MODERN)  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Action")  {
  parentBlockId: ID
  gtmEventName: String
  email: String
}

type Event @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: String
  createdAt: DateTime
  label: String
  value: String
  action: String
  actionValue: String
  messagePlatform: String
  email: String
  blockId: String
  position: Float
  source: String
  progress: Int
  typename: String
  visitorId: String
  journey: Journey
  visitor: Visitor
}

type GridContainerBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  gap: Int!
  direction: GridDirection!
  justifyContent: GridJustifyContent!
  alignItems: GridAlignItems!
}

type GridItemBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  xl: Int!
  lg: Int!
  sm: Int!
}

type Host @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  teamId: String
  title: String
  location: String
  src1: String
  src2: String
  team: Team
  journeys: [Journey!]
}

type IconBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  name: IconName
  color: IconColor
  size: IconSize
}

type ImageBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  src: String
  alt: String!
  width: Int!
  height: Int!
  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
  """
  blurhash: String!
  focalTop: Int
  focalLeft: Int
  scale: Int
}

type Integration @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  type: IntegrationType
  accessId: String
  accessSecretPart: String
  team: Team
}

type Journey @join__type(graph: API_JOURNEYS_MODERN, key: "id")  {
  id: ID!
  """
  private title for creators
  """
  title: String!
  description: String
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: JourneyStatus!
  languageId: String!
  language: Language!
  blocks: [Block!]
  chatButtons: [ChatButton!]
  archivedAt: DateTime
  deletedAt: DateTime
  publishedAt: DateTime
  trashedAt: DateTime
  featuredAt: DateTime
  themeMode: ThemeMode!
  themeName: ThemeName!
  """
  title for seo and sharing
  """
  seoTitle: String
  seoDescription: String
  template: Boolean
  primaryImageBlock: Block
  creatorImageBlock: Block
  logoImageBlock: Block
  menuStepBlock: Block
  creatorDescription: String
  website: Boolean
  showShareButton: Boolean
  showLikeButton: Boolean
  showDislikeButton: Boolean
  """
  public title for viewers
  """
  displayTitle: String
  showHosts: Boolean
  showChatButtons: Boolean
  showReactionButtons: Boolean
  showLogo: Boolean
  showMenu: Boolean
  showDisplayTitle: Boolean
  menuButtonIcon: JourneyMenuButtonIcon
  socialNodeX: Int
  socialNodeY: Int
  host: Host
  team: Team
  tags: [Tag!]!
  userJourneys: [UserJourney!]
  strategySlug: String
  """
  used in a plausible share link to embed report
  """
  plausibleToken: String
  fromTemplateId: String
  journeyTheme: JourneyTheme
  journeyCollections: [JourneyCollection!]!
}

type JourneyAiTranslateProgress @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  Translation progress as a percentage (0-100)
  """
  progress: Float
  """
  Current translation step message
  """
  message: String
  """
  The journey being translated (only present when complete)
  """
  journey: Journey
}

"""
A collection of journeys associated with a team
"""
type JourneyCollection @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  title: String
  team: Team
  journeys: [Journey!]
}

type JourneyEvent @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID
  createdAt: DateTime
  label: String
  value: String
  action: String
  actionValue: String
  messagePlatform: String
  email: String
  blockId: String
  position: Float
  source: String
  progress: Int
  typename: String
  visitorId: String
  journeySlug: String
  visitorName: String
  visitorEmail: String
  visitorPhone: String
}

type JourneyEventsExportLog @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID!
  createdAt: DateTimeISO!
  userId: ID!
  journeyId: ID!
  eventsFilter: [String!]!
  dateRangeStart: DateTimeISO
  dateRangeEnd: DateTimeISO
}

type JourneyNotification @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  userId: ID
  journeyId: ID
  userTeamId: ID
  userJourneyId: ID
  visitorInteractionEmail: Boolean
  journey: Journey
  userTeam: UserTeam
  userJourney: UserJourney
}

type JourneyProfile @join__type(graph: API_JOURNEYS_MODERN, key: "id")  {
  id: ID
  userId: ID
  acceptedTermsAt: DateTime
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

type JourneyTheme @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID
  userId: ID
  headerFont: String
  bodyFont: String
  labelFont: String
  createdAt: DateTime
  updatedAt: DateTime
  journey: Journey
}

type JourneyVisitor @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: String
  visitorId: String
  createdAt: DateTime
  duration: Int
  activityCount: Int
  updatedAt: DateTime
  journey: Journey
  visitor: Visitor
}

type JourneysEmailPreference @join__type(graph: API_JOURNEYS_MODERN)  {
  email: String
  unsubscribeAll: Boolean
  accountNotifications: Boolean
}

type Language @join__type(graph: API_JOURNEYS_MODERN, key: "id", extension: true)  @join__type(graph: API_LANGUAGES, key: "id")  @join__type(graph: API_MEDIA, key: "id", extension: true)  {
  id: ID!
  bcp47: String @join__field(graph: API_LANGUAGES) 
  iso3: String @join__field(graph: API_LANGUAGES) 
  slug: String @join__field(graph: API_LANGUAGES) 
  name(languageId: ID, primary: Boolean) : [LanguageName!]! @join__field(graph: API_LANGUAGES) 
  countryLanguages: [CountryLanguage!]! @join__field(graph: API_LANGUAGES) 
  audioPreview: AudioPreview @join__field(graph: API_LANGUAGES) 
  labeledVideoCounts: LabeledVideoCounts! @join__field(graph: API_MEDIA) 
}

type LinkAction implements Action @join__type(graph: API_JOURNEYS_MODERN)  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Action")  {
  parentBlockId: ID
  gtmEventName: String
  url: String
  target: String
}

type MuxVideo @join__type(graph: API_JOURNEYS_MODERN, key: "id primaryLanguageId", extension: true)  @join__type(graph: API_MEDIA, key: "id primaryLanguageId")  {
  id: ID!
  primaryLanguageId: ID
  source: VideoBlockSource @join__field(graph: API_JOURNEYS_MODERN, type: "VideoBlockSource!")  @join__field(graph: API_MEDIA, type: "VideoBlockSource") 
  name: String @join__field(graph: API_MEDIA) 
  assetId: String @join__field(graph: API_MEDIA) 
  duration: Int @join__field(graph: API_MEDIA) 
  uploadId: String @join__field(graph: API_MEDIA) 
  playbackId: String @join__field(graph: API_MEDIA) 
  uploadUrl: String @join__field(graph: API_MEDIA) 
  userId: ID! @join__field(graph: API_MEDIA) 
  createdAt: Date! @join__field(graph: API_MEDIA) 
  readyToStream: Boolean! @join__field(graph: API_MEDIA) 
  downloadable: Boolean! @join__field(graph: API_MEDIA) 
  videoVariants: [VideoVariant!]! @join__field(graph: API_MEDIA) 
}

type NavigateToBlockAction implements Action @join__type(graph: API_JOURNEYS_MODERN)  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Action")  {
  parentBlockId: ID
  gtmEventName: String
  blockId: String
}

type PageInfo @join__type(graph: API_JOURNEYS_MODERN)  @join__type(graph: API_MEDIA)  {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type QrCode @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  teamId: ID
  journeyId: ID
  toJourneyId: String
  toBlockId: String
  shortLinkId: String
  color: String
  backgroundColor: String
  team: Team
  journey: Journey
  shortLink: ShortLink
}

type Query @join__type(graph: API_ANALYTICS)  @join__type(graph: API_JOURNEYS_MODERN)  @join__type(graph: API_LANGUAGES)  @join__type(graph: API_MEDIA)  @join__type(graph: API_USERS)  {
  blocks(where: BlocksFilter) : [Block!]! @join__field(graph: API_JOURNEYS_MODERN) 
  block(id: ID!) : Block @join__field(graph: API_JOURNEYS_MODERN) 
  journey(id: ID!, idType: IdType, options: JourneysQueryOptions) : Journey @join__field(graph: API_JOURNEYS_MODERN) 
  journeys(where: JourneysFilter, options: JourneysQueryOptions) : [Journey!]! @join__field(graph: API_JOURNEYS_MODERN) 
  adminJourney(id: ID!, idType: IdType) : Journey! @join__field(graph: API_JOURNEYS_MODERN) 
  adminJourneys(
    status: [JourneyStatus!]
    template: Boolean
    teamId: ID
    useLastActiveTeamId: Boolean
  ): [Journey!]! @join__field(graph: API_JOURNEYS_MODERN) 
  journeySimpleGet(id: ID!) : Json @join__field(graph: API_JOURNEYS_MODERN) 
  adminJourneysReport(reportType: JourneysReportType!) : Json @join__field(graph: API_JOURNEYS_MODERN) 
  journeyCollection(id: ID!) : JourneyCollection! @join__field(graph: API_JOURNEYS_MODERN) 
  journeyCollections(teamId: ID!) : [JourneyCollection!]! @join__field(graph: API_JOURNEYS_MODERN) 
  getJourneyProfile: JourneyProfile @join__field(graph: API_JOURNEYS_MODERN) 
  journeyTheme(journeyId: ID!) : JourneyTheme @join__field(graph: API_JOURNEYS_MODERN) 
  journeyEventsConnection(
    journeyId: ID!
    filter: JourneyEventsFilter
    before: String
    after: String
    first: Int
    last: Int
  ): QueryJourneyEventsConnection @join__field(graph: API_JOURNEYS_MODERN) 
  journeyEventsCount(journeyId: ID!, filter: JourneyEventsFilter) : Int! @join__field(graph: API_JOURNEYS_MODERN) 
  journeysEmailPreference(email: String!) : JourneysEmailPreference @join__field(graph: API_JOURNEYS_MODERN) 
  customDomain(id: ID!) : CustomDomain @join__field(graph: API_JOURNEYS_MODERN) 
  customDomains(teamId: ID!) : [CustomDomain!] @join__field(graph: API_JOURNEYS_MODERN) 
  hosts(teamId: ID!) : [Host!] @join__field(graph: API_JOURNEYS_MODERN) 
  integrations(teamId: ID!) : [Integration!] @join__field(graph: API_JOURNEYS_MODERN) 
  qrCode(id: ID!) : QrCode! @join__field(graph: API_JOURNEYS_MODERN) 
  qrCodes(where: QrCodesFilter!) : [QrCode!]! @join__field(graph: API_JOURNEYS_MODERN) 
  teams: [Team!] @join__field(graph: API_JOURNEYS_MODERN) 
  team(id: ID!) : Team @join__field(graph: API_JOURNEYS_MODERN) 
  userTeams(teamId: ID!, where: UserTeamFilterInput) : [UserTeam!] @join__field(graph: API_JOURNEYS_MODERN) 
  userTeam(id: ID!) : UserTeam @join__field(graph: API_JOURNEYS_MODERN) 
  userTeamInvites(teamId: ID!) : [UserTeamInvite!] @join__field(graph: API_JOURNEYS_MODERN) 
  userInvites(journeyId: ID!) : [UserInvite!] @join__field(graph: API_JOURNEYS_MODERN) 
  getUserRole: UserRole @join__field(graph: API_JOURNEYS_MODERN) 
  journeyVisitorsConnection(
    filter: JourneyVisitorFilter!
    sort: JourneyVisitorSort
    before: String
    after: String
    first: Int
    last: Int
  ): QueryJourneyVisitorsConnection @join__field(graph: API_JOURNEYS_MODERN) 
  journeyVisitorCount(filter: JourneyVisitorFilter!) : Int @join__field(graph: API_JOURNEYS_MODERN) 
  visitorsConnection(teamId: ID!, before: String, after: String, first: Int, last: Int) : QueryVisitorsConnection @join__field(graph: API_JOURNEYS_MODERN) 
  language(id: ID!, idType: LanguageIdType = databaseId) : Language @join__field(graph: API_LANGUAGES) 
  languages(offset: Int, limit: Int, where: LanguagesFilter, term: String) : [Language!]! @join__field(graph: API_LANGUAGES) 
  languagesCount(where: LanguagesFilter, term: String) : Int! @join__field(graph: API_LANGUAGES) 
  country(id: ID!) : Country @join__field(graph: API_LANGUAGES) 
  countries(term: String, ids: [ID!]) : [Country!]! @join__field(graph: API_LANGUAGES) 
  getTranscodeAssetProgress(jobId: String!) : Int @join__field(graph: API_MEDIA) 
  getMyCloudflareImages(offset: Int, limit: Int) : [CloudflareImage!]! @join__field(graph: API_MEDIA) 
  getMyCloudflareImage(id: ID!) : CloudflareImage! @join__field(graph: API_MEDIA) 
  listUnsplashCollectionPhotos(
    collectionId: String!
    page: Int
    perPage: Int
    orientation: UnsplashPhotoOrientation
  ): [UnsplashPhoto!]! @join__field(graph: API_MEDIA) 
  searchUnsplashPhotos(
    query: String!
    page: Int
    perPage: Int
    orderBy: UnsplashOrderBy
    collections: [String!]
    contentFilter: UnsplashContentFilter
    color: UnsplashColor
    orientation: UnsplashPhotoOrientation
  ): UnsplashQueryResponse! @join__field(graph: API_MEDIA) 
  bibleBooks: [BibleBook!]! @join__field(graph: API_MEDIA) 
  bibleCitations(videoId: ID) : [BibleCitation!]! @join__field(graph: API_MEDIA) 
  bibleCitation(id: ID!) : BibleCitation! @join__field(graph: API_MEDIA) 
  keywords: [Keyword!]! @join__field(graph: API_MEDIA) 
  getMyMuxVideos(offset: Int, limit: Int) : [MuxVideo!]! @join__field(graph: API_MEDIA) 
  getMyMuxVideo(id: ID!, userGenerated: Boolean) : MuxVideo! @join__field(graph: API_MEDIA) 
  getMuxVideo(id: ID!, userGenerated: Boolean) : MuxVideo @join__field(graph: API_MEDIA) 
  """
  List of short link domains that can be used for short links
  """
  shortLinkDomains(
    """
    Filter by service (including domains with no services set)
    """
    service: Service
    before: String
    after: String
    first: Int
    last: Int
  ): QueryShortLinkDomainsConnection! @join__field(graph: API_MEDIA) 
  """
  Find a short link domain by id
  """
  shortLinkDomain(id: String!) : QueryShortLinkDomainResult! @join__field(graph: API_MEDIA) 
  """
  find a short link by path and hostname
  """
  shortLinkByPath(
    """
    short link path not including the leading slash
    """
    pathname: String!
    """
    the hostname including subdomain, domain, and TLD, but excluding port
    """
    hostname: String!
  ): QueryShortLinkByPathResult! @join__field(graph: API_MEDIA) 
  """
  find a short link by id
  """
  shortLink(id: String!) : QueryShortLinkResult! @join__field(graph: API_MEDIA) 
  """
  find all short links with optional hostname filter
  """
  shortLinks(
    """
    the hostname including subdomain, domain, and TLD, but excluding port
    """
    hostname: String
    before: String
    after: String
    first: Int
    last: Int
  ): QueryShortLinksConnection! @join__field(graph: API_MEDIA) 
  videoVariant(id: ID!) : VideoVariant! @join__field(graph: API_MEDIA) 
  videoVariants(input: VideoVariantFilter) : [VideoVariant!]! @join__field(graph: API_MEDIA) 
  adminVideo(id: ID!, idType: IdType = databaseId) : Video! @join__field(graph: API_MEDIA) 
  adminVideos(where: VideosFilter, offset: Int, limit: Int) : [Video!]! @join__field(graph: API_MEDIA) 
  adminVideosCount(where: VideosFilter) : Int! @join__field(graph: API_MEDIA) 
  video(id: ID!, idType: IdType = databaseId) : Video! @join__field(graph: API_MEDIA) 
  videos(where: VideosFilter, offset: Int, limit: Int) : [Video!]! @join__field(graph: API_MEDIA) 
  videosCount(where: VideosFilter) : Int! @join__field(graph: API_MEDIA) 
  videoOrigins: [VideoOrigin!]! @join__field(graph: API_MEDIA) 
  videoEditions: [VideoEdition!]! @join__field(graph: API_MEDIA) 
  videoEdition(id: ID!) : VideoEdition @join__field(graph: API_MEDIA) 
  tags: [Tag!]! @join__field(graph: API_MEDIA) 
  taxonomies(category: String, languageCodes: [String!]) : [Taxonomy!]! @join__field(graph: API_MEDIA) 
  arclightApiKeys: [ArclightApiKey!]! @join__field(graph: API_MEDIA) 
  arclightApiKeyByKey(key: String!) : ArclightApiKey @join__field(graph: API_MEDIA) 
  me(input: MeInput) : User @join__field(graph: API_USERS) 
  user(id: ID!) : User @join__field(graph: API_USERS) 
  userByEmail(email: String!) : User @join__field(graph: API_USERS) 
}

type QueryJourneyEventsConnection @join__type(graph: API_JOURNEYS_MODERN)  {
  pageInfo: PageInfo!
  edges: [QueryJourneyEventsConnectionEdge]
}

type QueryJourneyEventsConnectionEdge @join__type(graph: API_JOURNEYS_MODERN)  {
  node: Event
  cursor: String!
}

type QueryJourneyVisitorsConnection @join__type(graph: API_JOURNEYS_MODERN)  {
  pageInfo: PageInfo!
  edges: [QueryJourneyVisitorsConnectionEdge]
}

type QueryJourneyVisitorsConnectionEdge @join__type(graph: API_JOURNEYS_MODERN)  {
  node: JourneyVisitor
  cursor: String!
}

type QueryVisitorsConnection @join__type(graph: API_JOURNEYS_MODERN)  {
  pageInfo: PageInfo!
  edges: [QueryVisitorsConnectionEdge]
}

type QueryVisitorsConnectionEdge @join__type(graph: API_JOURNEYS_MODERN)  {
  node: Visitor
  cursor: String!
}

type RadioOptionBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
}

type RadioQuestionBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

"""
A short link that redirects to a full URL
"""
type ShortLink @join__type(graph: API_JOURNEYS_MODERN, key: "id", extension: true)  @join__type(graph: API_MEDIA, key: "id")  {
  id: ID @join__field(graph: API_JOURNEYS_MODERN, type: "ID")  @join__field(graph: API_MEDIA, type: "ID!") 
  """
  short link path not including the leading slash
  """
  pathname: String! @join__field(graph: API_MEDIA) 
  """
  the fully qualified domain name (FQDN) to redirect the short link service should redirect the user to
  """
  to: String! @join__field(graph: API_MEDIA) 
  domain: ShortLinkDomain! @join__field(graph: API_MEDIA) 
  """
  the service that created this short link
  """
  service: Service! @join__field(graph: API_MEDIA) 
  """
  brightcove video ID for video redirects
  """
  brightcoveId: String @join__field(graph: API_MEDIA) 
  """
  type of video redirect (hls, dl, dh, s)
  """
  redirectType: RedirectType @join__field(graph: API_MEDIA) 
}

type SignUpBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  submitIconId: ID
  submitLabel: String
}

type SpacerBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  spacing: Int
}

type StepBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean!
  """
  nextBlockId contains the preferred block to navigate to, users will have to
  manually set the next block they want to card to navigate to
  """
  nextBlockId: ID
  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int
  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int
  """
  Slug should be unique amongst all blocks
  (server will throw BAD_USER_INPUT error if not)
  If not required will use the current block id
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

type Subscription @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyAiTranslateCreateSubscription(input: JourneyAiTranslateInput!) : JourneyAiTranslateProgress!
}

type Tag @join__type(graph: API_JOURNEYS_MODERN, key: "id", extension: true)  @join__type(graph: API_MEDIA, key: "id")  {
  id: ID!
  parentId: ID @join__field(graph: API_MEDIA) 
  name(languageId: ID, primary: Boolean) : [TagName!]! @join__field(graph: API_MEDIA) 
  service: Service @join__field(graph: API_MEDIA) 
}

type Team @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  title: String
  publicTitle: String
  createdAt: DateTime
  updatedAt: DateTime
  userTeams: [UserTeam!]
}

type TextResponseBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String!
  placeholder: String
  required: Boolean
  hint: String
  minRows: Int
  type: TextResponseType
  routeId: String
  integrationId: String
}

type TypographyBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettings
}

type TypographyBlockSettings @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  Color of the typography
  """
  color: String
}

type UserInvite @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID
  senderId: ID
  email: String
  acceptedAt: DateTime
  removedAt: DateTime
  updatedAt: DateTime
  journey: Journey
}

type UserJourney @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  userId: ID
  journeyId: ID
  role: UserJourneyRole
  openedAt: DateTime
  journey: Journey
}

type UserRole @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  userId: ID
  roles: [Role!]
}

type UserTeam @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  teamId: ID
  userId: ID
  role: UserTeamRole
  createdAt: DateTime
  updatedAt: DateTime
  team: Team
}

type UserTeamInvite @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  teamId: ID
  email: String
  senderId: ID
  receipientId: ID
  acceptedAt: DateTime
  removedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  team: Team
}

type Video @join__type(graph: API_JOURNEYS_MODERN, key: "id primaryLanguageId", extension: true)  @join__type(graph: API_MEDIA, key: "id primaryLanguageId")  {
  id: ID!
  primaryLanguageId: ID!
  source: VideoBlockSource @join__field(graph: API_JOURNEYS_MODERN, type: "VideoBlockSource!")  @join__field(graph: API_MEDIA, type: "VideoBlockSource") 
  bibleCitations: [BibleCitation!]! @join__field(graph: API_MEDIA) 
  origin: VideoOrigin @join__field(graph: API_MEDIA) 
  keywords(languageId: ID) : [Keyword!]! @join__field(graph: API_MEDIA) 
  label: VideoLabel! @join__field(graph: API_MEDIA) 
  locked: Boolean! @join__field(graph: API_MEDIA) 
  published: Boolean! @join__field(graph: API_MEDIA) 
  cloudflareAssets: [CloudflareR2!]! @join__field(graph: API_MEDIA) 
  videoEditions: [VideoEdition!]! @join__field(graph: API_MEDIA) 
  availableLanguages: [String!]! @join__field(graph: API_MEDIA) 
  title(languageId: ID, primary: Boolean) : [VideoTitle!]! @join__field(graph: API_MEDIA) 
  snippet(languageId: ID, primary: Boolean) : [VideoSnippet!]! @join__field(graph: API_MEDIA) 
  description(languageId: ID, primary: Boolean) : [VideoDescription!]! @join__field(graph: API_MEDIA) 
  studyQuestions(languageId: ID, primary: Boolean) : [VideoStudyQuestion!]! @join__field(graph: API_MEDIA) 
  imageAlt(languageId: ID, primary: Boolean) : [VideoImageAlt!]! @join__field(graph: API_MEDIA) 
  variantLanguages: [Language!]! @join__field(graph: API_MEDIA) 
  variantLanguagesCount(input: VideoVariantFilter) : Int! @join__field(graph: API_MEDIA) 
  """
  slug is a permanent link to the video.
  """
  slug: String! @join__field(graph: API_MEDIA) 
  noIndex: Boolean @join__field(graph: API_MEDIA) 
  children: [Video!]! @join__field(graph: API_MEDIA) 
  """
  the number value of the amount of children on a video
  """
  childrenCount: Int! @join__field(graph: API_MEDIA) 
  parents: [Video!]! @join__field(graph: API_MEDIA) 
  variantLanguagesWithSlug(input: VideoVariantFilter) : [LanguageWithSlug!]! @join__field(graph: API_MEDIA) 
  variants(input: VideoVariantFilter) : [VideoVariant!]! @join__field(graph: API_MEDIA) 
  subtitles(languageId: ID, primary: Boolean, edition: String) : [VideoSubtitle!]! @join__field(graph: API_MEDIA) 
  variant(languageId: ID) : VideoVariant @join__field(graph: API_MEDIA) 
  images(aspectRatio: ImageAspectRatio) : [CloudflareImage!]! @join__field(graph: API_MEDIA) 
  restrictDownloadPlatforms: [Platform!]! @join__field(graph: API_MEDIA) 
  restrictViewPlatforms: [Platform!]! @join__field(graph: API_MEDIA) 
  publishedAt: Date @join__field(graph: API_MEDIA) 
}

type VideoBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  """
  startAt dictates at which point of time the video should start playing
  """
  startAt: Int
  """
  endAt dictates at which point of time the video should end
  """
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID
  fullsize: Boolean
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID
  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID
  """
  internal source: videoId, videoVariantLanguageId, and video present
  youTube source: videoId, title, description, and duration present
  """
  source: VideoBlockSource!
  """
  internal source videos: this field is not populated and instead only present
  in the video field.
  For other sources this is automatically populated.
  """
  title: String
  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  description: String
  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  image: String
  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  duration: Int
  objectFit: VideoBlockObjectFit
  mediaVideo: MediaVideo
}

type VideoTriggerBlock implements Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  @join__implements(graph: API_JOURNEYS_MODERN, interface: "Block")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int!
}

type Visitor @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  createdAt: DateTime
  countryCode: String
  duration: Int
  email: String
  name: String
  phone: String
  teamId: String
  userId: String
  updatedAt: DateTime
  team: Team
  journeyVisitors: [JourneyVisitor!]
}

type YouTube @join__type(graph: API_JOURNEYS_MODERN, key: "id primaryLanguageId", extension: true)  {
  id: ID!
  primaryLanguageId: ID
  source: VideoBlockSource!
}

type AudioPreview @join__type(graph: API_LANGUAGES, key: "languageId")  {
  languageId: ID!
  language: Language!
  value: String!
  duration: Int!
  size: Int!
  bitrate: Int!
  codec: String!
}

type Continent @join__type(graph: API_LANGUAGES)  {
  id: ID!
  name(languageId: ID, primary: Boolean) : [ContinentName!]!
  countries: [Country!]!
}

type ContinentName @join__type(graph: API_LANGUAGES)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type Country @join__type(graph: API_LANGUAGES, key: "id")  {
  id: ID!
  population: Int
  latitude: Float
  longitude: Float
  flagPngSrc: String
  flagWebpSrc: String
  languages: [Language!]!
  name(languageId: ID, primary: Boolean) : [CountryName!]!
  continent: Continent!
  countryLanguages: [CountryLanguage!]!
  languageCount: Int!
  languageHavingMediaCount: Int!
}

type CountryLanguage @join__type(graph: API_LANGUAGES)  {
  id: ID!
  language: Language!
  country: Country!
  speakers: Int!
  displaySpeakers: Int
  primary: Boolean!
  suggested: Boolean!
  order: Int
}

type CountryName @join__type(graph: API_LANGUAGES)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type LanguageName @join__type(graph: API_LANGUAGES)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type User @join__type(graph: API_LANGUAGES, key: "id", extension: true)  @join__type(graph: API_MEDIA, key: "id", extension: true)  @join__type(graph: API_USERS, key: "id")  {
  id: ID!
  languageUserRoles: [LanguageRole!]! @join__field(graph: API_LANGUAGES) 
  mediaUserRoles: [MediaRole!]! @join__field(graph: API_MEDIA) 
  firstName: String! @join__field(graph: API_USERS) 
  lastName: String @join__field(graph: API_USERS) 
  email: String! @join__field(graph: API_USERS) 
  imageUrl: String @join__field(graph: API_USERS) 
  superAdmin: Boolean @join__field(graph: API_USERS) 
  emailVerified: Boolean! @join__field(graph: API_USERS) 
}

type ArclightApiKey @join__type(graph: API_MEDIA, key: "key")  {
  key: String!
  desc: String
  defaultPlatform: DefaultPlatform!
}

type BibleBook @join__type(graph: API_MEDIA)  {
  id: ID!
  name(languageId: ID, primary: Boolean) : [BibleBookName!]!
  osisId: String!
  alternateName: String
  paratextAbbreviation: String!
  isNewTestament: Boolean!
  order: Int!
}

type BibleBookName @join__type(graph: API_MEDIA)  {
  value: String!
  primary: Boolean!
  language: Language!
}

type BibleCitation @join__type(graph: API_MEDIA)  {
  id: ID!
  osisId: String!
  bibleBook: BibleBook!
  chapterStart: Int!
  chapterEnd: Int
  order: Int!
  verseStart: Int
  verseEnd: Int
  video: Video!
}

type CloudflareImage @join__type(graph: API_MEDIA)  {
  id: ID!
  uploadUrl: String
  userId: ID!
  createdAt: Date!
  aspectRatio: ImageAspectRatio
  url: String
  mobileCinematicHigh: String
  mobileCinematicLow: String
  mobileCinematicVeryLow: String
  thumbnail: String
  videoStill: String
}

type CloudflareR2 @join__type(graph: API_MEDIA)  {
  id: ID!
  contentLength: Int!
  contentType: String!
  fileName: String!
  originalFilename: String
  uploadUrl: String
  userId: ID!
  publicUrl: String
  createdAt: Date!
  updatedAt: Date!
}

type ForeignKeyConstraintError implements BaseError @join__type(graph: API_MEDIA)  @join__implements(graph: API_MEDIA, interface: "BaseError")  {
  message: String
  """
  The arguments that caused the foriegn key constraint violation
  """
  location: [ForeignKeyConstraintErrorLocation!]
}

type ForeignKeyConstraintErrorLocation @join__type(graph: API_MEDIA)  {
  """
  An array describing the path in the arguments that caused this error
  """
  path: [String!]
  """
  The value that was provided at the path
  """
  value: String
}

type Keyword @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  language: Language!
}

type LabeledVideoCounts @join__type(graph: API_MEDIA)  {
  seriesCount: Int!
  featureFilmCount: Int!
  shortFilmCount: Int!
}

type LanguageWithSlug @join__type(graph: API_MEDIA)  {
  language: Language!
  slug: String!
}

type MutationShortLinkCreateSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLink!
}

type MutationShortLinkDeleteSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLink!
}

type MutationShortLinkDomainCreateSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLinkDomain!
}

type MutationShortLinkDomainDeleteSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLinkDomain!
}

type MutationShortLinkDomainUpdateSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLinkDomain!
}

type MutationShortLinkUpdateSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLink!
}

type NotFoundError implements BaseError @join__type(graph: API_MEDIA)  @join__implements(graph: API_MEDIA, interface: "BaseError")  {
  message: String
  """
  The arguments that caused the not found error
  """
  location: [NotFoundErrorLocation!]
}

type NotFoundErrorLocation @join__type(graph: API_MEDIA)  {
  """
  An array describing the path in the arguments that caused this error
  """
  path: [String!]
  """
  The value that was provided at the path
  """
  value: String
}

type NotUniqueError implements BaseError @join__type(graph: API_MEDIA)  @join__implements(graph: API_MEDIA, interface: "BaseError")  {
  message: String
  """
  The arguments that caused the uniqueness violation
  """
  location: [NotUniqueErrorLocation!]
}

type NotUniqueErrorLocation @join__type(graph: API_MEDIA)  {
  """
  An array describing the path in the arguments that caused this error
  """
  path: [String!]
  """
  The value that was provided at the path
  """
  value: String
}

type QueryShortLinkByPathSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLink!
}

type QueryShortLinkDomainSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLinkDomain!
}

type QueryShortLinkDomainsConnection @join__type(graph: API_MEDIA)  {
  pageInfo: PageInfo!
  edges: [QueryShortLinkDomainsConnectionEdge]
  totalCount: Int!
}

type QueryShortLinkDomainsConnectionEdge @join__type(graph: API_MEDIA)  {
  node: ShortLinkDomain
  cursor: String!
}

type QueryShortLinkSuccess @join__type(graph: API_MEDIA)  {
  data: ShortLink!
}

type QueryShortLinksConnection @join__type(graph: API_MEDIA)  {
  pageInfo: PageInfo!
  edges: [QueryShortLinksConnectionEdge]
  totalCount: Int!
}

type QueryShortLinksConnectionEdge @join__type(graph: API_MEDIA)  {
  node: ShortLink
  cursor: String!
}

"""
A domain that can be used for short links
"""
type ShortLinkDomain @join__type(graph: API_MEDIA)  {
  id: ID!
  hostname: String!
  apexName: String!
  createdAt: Date!
  updatedAt: Date!
  """
  The services that are enabled for this domain, if empty then this domain can be used by all services
  """
  services: [Service!]!
  """
  check status of the domain
  """
  check: ShortLinkDomainCheck!
}

type ShortLinkDomainCheck @join__type(graph: API_MEDIA)  {
  """
  Is the domain correctly configured in the DNS? If false, A Record and CNAME Record should be added by the user.
  """
  configured: Boolean!
  """
  Does the domain belong to the short link application? If false, verification will be populated.
  """
  verified: Boolean!
  """
  Verification records to be added to the DNS to confirm ownership.
  """
  verification: [ShortLinkDomainVerfication!]!
}

type ShortLinkDomainVerfication @join__type(graph: API_MEDIA)  {
  """
  Type of verification
  """
  type: String!
  """
  Domain name
  """
  domain: String!
  """
  Value of the verification
  """
  value: String!
  """
  Reason for the verification
  """
  reason: String!
}

type TagName @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type Taxonomy @join__type(graph: API_MEDIA)  {
  id: ID!
  category: String!
  term: String!
  name(languageCodes: [String!], category: String) : [TaxonomyName!]!
}

type TaxonomyName @join__type(graph: API_MEDIA)  {
  id: ID!
  term: String!
  label: String!
  language: Language!
  taxonomy: Taxonomy!
}

type UnsplashPhoto @join__type(graph: API_MEDIA)  {
  id: ID!
  created_at: String!
  updated_at: String
  blur_hash: String
  width: Int!
  height: Int!
  color: String
  description: String
  alt_description: String
  promoted_at: String
  likes: Int!
  urls: UnsplashPhotoUrls!
  links: UnsplashPhotoLinks!
  user: UnsplashUser!
}

type UnsplashPhotoLinks @join__type(graph: API_MEDIA)  {
  self: String!
  html: String!
  download: String!
  download_location: String!
}

type UnsplashPhotoUrls @join__type(graph: API_MEDIA)  {
  full: String!
  raw: String!
  regular: String!
  small: String!
  thumb: String!
}

type UnsplashQueryResponse @join__type(graph: API_MEDIA)  {
  total: Int!
  total_pages: Int!
  results: [UnsplashPhoto!]!
}

type UnsplashUser @join__type(graph: API_MEDIA)  {
  id: ID!
  updated_at: String!
  username: String!
  name: String!
  first_name: String!
  last_name: String
  twitter_username: String
  portfolio_url: String
  bio: String
  location: String
  instagram_username: String
  total_collections: Int!
  total_likes: Int!
  total_photos: Int!
  links: UnsplashUserLinks!
  profile_image: UnsplashUserImage!
}

type UnsplashUserImage @join__type(graph: API_MEDIA)  {
  small: String!
  medium: String!
  large: String!
}

type UnsplashUserLinks @join__type(graph: API_MEDIA)  {
  followers: String!
  following: String!
  html: String!
  likes: String!
  photos: String!
  portfolio: String!
  self: String!
}

type VideoDescription @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoEdition @join__type(graph: API_MEDIA)  {
  id: ID!
  name: String
  videoVariants: [VideoVariant!]!
  videoSubtitles: [VideoSubtitle!]!
}

type VideoImageAlt @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoOrigin @join__type(graph: API_MEDIA)  {
  id: ID!
  name: String!
  description: String
}

type VideoSnippet @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoStudyQuestion @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  order: Int!
  language: Language!
}

type VideoSubtitle @join__type(graph: API_MEDIA)  {
  id: ID!
  languageId: ID!
  primary: Boolean!
  edition: String!
  """
  subtitle file
  """
  vttAsset: CloudflareR2
  vttSrc: String
  """
  version control for subtitle file
  """
  vttVersion: Int!
  """
  subtitle file
  """
  srtAsset: CloudflareR2
  srtSrc: String
  """
  version control for subtitle file
  """
  srtVersion: Int!
  value: String!
  language: Language!
  videoEdition: VideoEdition!
}

type VideoTitle @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String!
  primary: Boolean!
  language: Language!
}

type VideoVariant @join__type(graph: API_MEDIA)  {
  id: ID!
  """
  master video file
  """
  asset: CloudflareR2
  videoId: ID
  hls: String
  dash: String
  share: String
  downloadable: Boolean!
  downloads: [VideoVariantDownload!]!
  duration: Int!
  lengthInMilliseconds: Int!
  language: Language!
  muxVideo: MuxVideo
  brightcoveId: String
  published: Boolean!
  videoEdition: VideoEdition!
  subtitle(languageId: ID, primary: Boolean) : [VideoSubtitle!]!
  subtitleCount: Int!
  """
  slug is a permanent link to the video variant.
  """
  slug: String!
  """
  version control for master video file
  """
  version: Int!
}

type VideoVariantDownload @join__type(graph: API_MEDIA)  {
  id: ID!
  """
  master video file
  """
  asset: CloudflareR2
  quality: VideoVariantDownloadQuality!
  size: Float!
  height: Int!
  width: Int!
  bitrate: Int!
  url: String!
  """
  master video file version
  """
  version: Int!
}

type Youtube @join__type(graph: API_MEDIA, key: "id primaryLanguageId")  {
  id: ID!
  primaryLanguageId: ID
  source: VideoBlockSource
}

type ZodError implements BaseError @join__type(graph: API_MEDIA)  @join__implements(graph: API_MEDIA, interface: "BaseError")  {
  message: String
  fieldErrors: [ZodFieldError!]!
}

type ZodFieldError @join__type(graph: API_MEDIA)  {
  message: String!
  path: [String!]!
}

interface BaseError @join__type(graph: API_ANALYTICS)  @join__type(graph: API_MEDIA)  {
  message: String
}

interface Action @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  gtmEventName: String
}

interface Block @join__type(graph: API_JOURNEYS_MODERN, key: "id")  {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

union MutationSiteCreateResult @join__type(graph: API_ANALYTICS)  @join__unionMember(graph: API_ANALYTICS, member: "Error")  @join__unionMember(graph: API_ANALYTICS, member: "MutationSiteCreateSuccess")  = Error | MutationSiteCreateSuccess

union MediaVideo @join__type(graph: API_JOURNEYS_MODERN)  @join__unionMember(graph: API_JOURNEYS_MODERN, member: "MuxVideo")  @join__unionMember(graph: API_JOURNEYS_MODERN, member: "Video")  @join__unionMember(graph: API_JOURNEYS_MODERN, member: "YouTube")  = MuxVideo | Video | YouTube

union MutationShortLinkCreateResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "ZodError")  @join__unionMember(graph: API_MEDIA, member: "NotUniqueError")  @join__unionMember(graph: API_MEDIA, member: "MutationShortLinkCreateSuccess")  = ZodError | NotUniqueError | MutationShortLinkCreateSuccess

union MutationShortLinkDeleteResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "NotFoundError")  @join__unionMember(graph: API_MEDIA, member: "MutationShortLinkDeleteSuccess")  = NotFoundError | MutationShortLinkDeleteSuccess

union MutationShortLinkDomainCreateResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "ZodError")  @join__unionMember(graph: API_MEDIA, member: "NotUniqueError")  @join__unionMember(graph: API_MEDIA, member: "MutationShortLinkDomainCreateSuccess")  = ZodError | NotUniqueError | MutationShortLinkDomainCreateSuccess

union MutationShortLinkDomainDeleteResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "NotFoundError")  @join__unionMember(graph: API_MEDIA, member: "ForeignKeyConstraintError")  @join__unionMember(graph: API_MEDIA, member: "MutationShortLinkDomainDeleteSuccess")  = NotFoundError | ForeignKeyConstraintError | MutationShortLinkDomainDeleteSuccess

union MutationShortLinkDomainUpdateResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "NotFoundError")  @join__unionMember(graph: API_MEDIA, member: "MutationShortLinkDomainUpdateSuccess")  = NotFoundError | MutationShortLinkDomainUpdateSuccess

union MutationShortLinkUpdateResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "ZodError")  @join__unionMember(graph: API_MEDIA, member: "NotFoundError")  @join__unionMember(graph: API_MEDIA, member: "MutationShortLinkUpdateSuccess")  = ZodError | NotFoundError | MutationShortLinkUpdateSuccess

union QueryShortLinkByPathResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "NotFoundError")  @join__unionMember(graph: API_MEDIA, member: "QueryShortLinkByPathSuccess")  = NotFoundError | QueryShortLinkByPathSuccess

union QueryShortLinkDomainResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "NotFoundError")  @join__unionMember(graph: API_MEDIA, member: "QueryShortLinkDomainSuccess")  = NotFoundError | QueryShortLinkDomainSuccess

union QueryShortLinkResult @join__type(graph: API_MEDIA)  @join__unionMember(graph: API_MEDIA, member: "NotFoundError")  @join__unionMember(graph: API_MEDIA, member: "QueryShortLinkSuccess")  = NotFoundError | QueryShortLinkSuccess

enum ButtonAlignment @join__type(graph: API_JOURNEYS_MODERN)  {
  left @join__enumValue(graph: API_JOURNEYS_MODERN) 
  center @join__enumValue(graph: API_JOURNEYS_MODERN) 
  right @join__enumValue(graph: API_JOURNEYS_MODERN) 
  justify @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum ButtonVariant @join__type(graph: API_JOURNEYS_MODERN)  {
  text @join__enumValue(graph: API_JOURNEYS_MODERN) 
  contained @join__enumValue(graph: API_JOURNEYS_MODERN) 
  outlined @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum ButtonColor @join__type(graph: API_JOURNEYS_MODERN)  {
  primary @join__enumValue(graph: API_JOURNEYS_MODERN) 
  secondary @join__enumValue(graph: API_JOURNEYS_MODERN) 
  error @join__enumValue(graph: API_JOURNEYS_MODERN) 
  inherit @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum ButtonSize @join__type(graph: API_JOURNEYS_MODERN)  {
  small @join__enumValue(graph: API_JOURNEYS_MODERN) 
  medium @join__enumValue(graph: API_JOURNEYS_MODERN) 
  large @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum ThemeMode @join__type(graph: API_JOURNEYS_MODERN)  {
  dark @join__enumValue(graph: API_JOURNEYS_MODERN) 
  light @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum ThemeName @join__type(graph: API_JOURNEYS_MODERN)  {
  base @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum MessagePlatform @join__type(graph: API_JOURNEYS_MODERN)  {
  facebook @join__enumValue(graph: API_JOURNEYS_MODERN) 
  telegram @join__enumValue(graph: API_JOURNEYS_MODERN) 
  whatsApp @join__enumValue(graph: API_JOURNEYS_MODERN) 
  instagram @join__enumValue(graph: API_JOURNEYS_MODERN) 
  kakaoTalk @join__enumValue(graph: API_JOURNEYS_MODERN) 
  viber @join__enumValue(graph: API_JOURNEYS_MODERN) 
  vk @join__enumValue(graph: API_JOURNEYS_MODERN) 
  snapchat @join__enumValue(graph: API_JOURNEYS_MODERN) 
  skype @join__enumValue(graph: API_JOURNEYS_MODERN) 
  line @join__enumValue(graph: API_JOURNEYS_MODERN) 
  tikTok @join__enumValue(graph: API_JOURNEYS_MODERN) 
  custom @join__enumValue(graph: API_JOURNEYS_MODERN) 
  globe2 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  globe3 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  messageText1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  messageText2 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  send1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  send2 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  messageChat2 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  messageCircle @join__enumValue(graph: API_JOURNEYS_MODERN) 
  messageNotifyCircle @join__enumValue(graph: API_JOURNEYS_MODERN) 
  messageNotifySquare @join__enumValue(graph: API_JOURNEYS_MODERN) 
  messageSquare @join__enumValue(graph: API_JOURNEYS_MODERN) 
  mail1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  linkExternal @join__enumValue(graph: API_JOURNEYS_MODERN) 
  home3 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  home4 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  helpCircleContained @join__enumValue(graph: API_JOURNEYS_MODERN) 
  helpSquareContained @join__enumValue(graph: API_JOURNEYS_MODERN) 
  shieldCheck @join__enumValue(graph: API_JOURNEYS_MODERN) 
  menu1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  checkBroken @join__enumValue(graph: API_JOURNEYS_MODERN) 
  checkContained @join__enumValue(graph: API_JOURNEYS_MODERN) 
  settings @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum EventType @join__type(graph: API_JOURNEYS_MODERN)  {
  ButtonClickEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ChatOpenEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  JourneyViewEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  RadioQuestionSubmissionEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  SignUpSubmissionEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  StepViewEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  StepNextEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  StepPreviousEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  TextResponseSubmissionEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  VideoStartEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  VideoPlayEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  VideoPauseEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  VideoCompleteEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  VideoExpandEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  VideoCollapseEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
  VideoProgressEvent @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum GridAlignItems @join__type(graph: API_JOURNEYS_MODERN)  {
  baseline @join__enumValue(graph: API_JOURNEYS_MODERN) 
  flexStart @join__enumValue(graph: API_JOURNEYS_MODERN) 
  flexEnd @join__enumValue(graph: API_JOURNEYS_MODERN) 
  center @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum GridDirection @join__type(graph: API_JOURNEYS_MODERN)  {
  columnReverse @join__enumValue(graph: API_JOURNEYS_MODERN) 
  column @join__enumValue(graph: API_JOURNEYS_MODERN) 
  row @join__enumValue(graph: API_JOURNEYS_MODERN) 
  rowReverse @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum GridJustifyContent @join__type(graph: API_JOURNEYS_MODERN)  {
  flexStart @join__enumValue(graph: API_JOURNEYS_MODERN) 
  flexEnd @join__enumValue(graph: API_JOURNEYS_MODERN) 
  center @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum IconName @join__type(graph: API_JOURNEYS_MODERN)  {
  PlayArrowRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  TranslateRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  CheckCircleRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  RadioButtonUncheckedRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  FormatQuoteRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  LockOpenRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ArrowForwardRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ArrowBackRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ChatBubbleOutlineRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  LiveTvRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  MenuBookRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ChevronRightRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ChevronLeftRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  BeenhereRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  SendRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  SubscriptionsRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ContactSupportRounded @join__enumValue(graph: API_JOURNEYS_MODERN) 
  Launch @join__enumValue(graph: API_JOURNEYS_MODERN) 
  MailOutline @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum IconColor @join__type(graph: API_JOURNEYS_MODERN)  {
  primary @join__enumValue(graph: API_JOURNEYS_MODERN) 
  secondary @join__enumValue(graph: API_JOURNEYS_MODERN) 
  action @join__enumValue(graph: API_JOURNEYS_MODERN) 
  error @join__enumValue(graph: API_JOURNEYS_MODERN) 
  disabled @join__enumValue(graph: API_JOURNEYS_MODERN) 
  inherit @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum IconSize @join__type(graph: API_JOURNEYS_MODERN)  {
  sm @join__enumValue(graph: API_JOURNEYS_MODERN) 
  md @join__enumValue(graph: API_JOURNEYS_MODERN) 
  lg @join__enumValue(graph: API_JOURNEYS_MODERN) 
  xl @join__enumValue(graph: API_JOURNEYS_MODERN) 
  inherit @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum IdType @join__type(graph: API_JOURNEYS_MODERN)  @join__type(graph: API_MEDIA)  {
  databaseId @join__enumValue(graph: API_JOURNEYS_MODERN)  @join__enumValue(graph: API_MEDIA) 
  slug @join__enumValue(graph: API_JOURNEYS_MODERN)  @join__enumValue(graph: API_MEDIA) 
}

enum IntegrationType @join__type(graph: API_JOURNEYS_MODERN)  {
  growthSpaces @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum JourneyStatus @join__type(graph: API_JOURNEYS_MODERN)  {
  archived @join__enumValue(graph: API_JOURNEYS_MODERN) 
  deleted @join__enumValue(graph: API_JOURNEYS_MODERN) 
  draft @join__enumValue(graph: API_JOURNEYS_MODERN) 
  published @join__enumValue(graph: API_JOURNEYS_MODERN) 
  trashed @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum JourneyMenuButtonIcon @join__type(graph: API_JOURNEYS_MODERN)  {
  menu1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  equals @join__enumValue(graph: API_JOURNEYS_MODERN) 
  home3 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  home4 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  more @join__enumValue(graph: API_JOURNEYS_MODERN) 
  ellipsis @join__enumValue(graph: API_JOURNEYS_MODERN) 
  grid1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  chevronDown @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum JourneyVisitorSort @join__type(graph: API_JOURNEYS_MODERN)  {
  date @join__enumValue(graph: API_JOURNEYS_MODERN) 
  duration @join__enumValue(graph: API_JOURNEYS_MODERN) 
  activity @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum JourneysReportType @join__type(graph: API_JOURNEYS_MODERN)  {
  multipleFull @join__enumValue(graph: API_JOURNEYS_MODERN) 
  multipleSummary @join__enumValue(graph: API_JOURNEYS_MODERN) 
  singleFull @join__enumValue(graph: API_JOURNEYS_MODERN) 
  singleSummary @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum VideoBlockSource @join__type(graph: API_JOURNEYS_MODERN)  @join__type(graph: API_MEDIA)  {
  cloudflare @join__enumValue(graph: API_JOURNEYS_MODERN)  @join__enumValue(graph: API_MEDIA) 
  internal @join__enumValue(graph: API_JOURNEYS_MODERN)  @join__enumValue(graph: API_MEDIA) 
  youTube @join__enumValue(graph: API_JOURNEYS_MODERN)  @join__enumValue(graph: API_MEDIA) 
  mux @join__enumValue(graph: API_JOURNEYS_MODERN)  @join__enumValue(graph: API_MEDIA) 
}

enum Role @join__type(graph: API_JOURNEYS_MODERN)  {
  publisher @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum TextResponseType @join__type(graph: API_JOURNEYS_MODERN)  {
  freeForm @join__enumValue(graph: API_JOURNEYS_MODERN) 
  name @join__enumValue(graph: API_JOURNEYS_MODERN) 
  email @join__enumValue(graph: API_JOURNEYS_MODERN) 
  phone @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum TypographyAlign @join__type(graph: API_JOURNEYS_MODERN)  {
  left @join__enumValue(graph: API_JOURNEYS_MODERN) 
  center @join__enumValue(graph: API_JOURNEYS_MODERN) 
  right @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum TypographyVariant @join__type(graph: API_JOURNEYS_MODERN)  {
  h1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  h2 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  h3 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  h4 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  h5 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  h6 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  subtitle1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  subtitle2 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  body1 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  body2 @join__enumValue(graph: API_JOURNEYS_MODERN) 
  caption @join__enumValue(graph: API_JOURNEYS_MODERN) 
  overline @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum TypographyColor @join__type(graph: API_JOURNEYS_MODERN)  {
  primary @join__enumValue(graph: API_JOURNEYS_MODERN) 
  secondary @join__enumValue(graph: API_JOURNEYS_MODERN) 
  error @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum UserJourneyRole @join__type(graph: API_JOURNEYS_MODERN)  {
  inviteRequested @join__enumValue(graph: API_JOURNEYS_MODERN) 
  editor @join__enumValue(graph: API_JOURNEYS_MODERN) 
  owner @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum UserTeamRole @join__type(graph: API_JOURNEYS_MODERN)  {
  manager @join__enumValue(graph: API_JOURNEYS_MODERN) 
  member @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum VideoBlockObjectFit @join__type(graph: API_JOURNEYS_MODERN)  {
  fill @join__enumValue(graph: API_JOURNEYS_MODERN) 
  fit @join__enumValue(graph: API_JOURNEYS_MODERN) 
  zoomed @join__enumValue(graph: API_JOURNEYS_MODERN) 
}

enum LanguageIdType @join__type(graph: API_LANGUAGES)  {
  databaseId @join__enumValue(graph: API_LANGUAGES) 
  bcp47 @join__enumValue(graph: API_LANGUAGES) 
}

enum LanguageRole @join__type(graph: API_LANGUAGES)  {
  publisher @join__enumValue(graph: API_LANGUAGES) 
}

enum DefaultPlatform @join__type(graph: API_MEDIA)  {
  ios @join__enumValue(graph: API_MEDIA) 
  android @join__enumValue(graph: API_MEDIA) 
  web @join__enumValue(graph: API_MEDIA) 
}

enum ImageAspectRatio @join__type(graph: API_MEDIA)  {
  hd @join__enumValue(graph: API_MEDIA) 
  banner @join__enumValue(graph: API_MEDIA) 
}

enum MaxResolutionTier @join__type(graph: API_MEDIA)  {
  fhd @join__enumValue(graph: API_MEDIA) 
  qhd @join__enumValue(graph: API_MEDIA) 
  uhd @join__enumValue(graph: API_MEDIA) 
}

enum MediaRole @join__type(graph: API_MEDIA)  {
  publisher @join__enumValue(graph: API_MEDIA) 
}

enum SegmindModel @join__type(graph: API_MEDIA)  {
  sdxl1__0_txt2img @join__enumValue(graph: API_MEDIA) 
  kandinsky2__2_txt2img @join__enumValue(graph: API_MEDIA) 
  sd1__5_paragon @join__enumValue(graph: API_MEDIA) 
  tinysd1__5_txt2img @join__enumValue(graph: API_MEDIA) 
}

enum Service @join__type(graph: API_MEDIA)  {
  apiJourneys @join__enumValue(graph: API_MEDIA) 
  apiLanguages @join__enumValue(graph: API_MEDIA) 
  apiMedia @join__enumValue(graph: API_MEDIA) 
  apiTags @join__enumValue(graph: API_MEDIA) 
  apiUsers @join__enumValue(graph: API_MEDIA) 
  apiVideos @join__enumValue(graph: API_MEDIA) 
}

enum RedirectType @join__type(graph: API_MEDIA)  {
  hls @join__enumValue(graph: API_MEDIA) 
  dl @join__enumValue(graph: API_MEDIA) 
  dh @join__enumValue(graph: API_MEDIA) 
  s @join__enumValue(graph: API_MEDIA) 
}

enum Platform @join__type(graph: API_MEDIA)  {
  arclight @join__enumValue(graph: API_MEDIA) 
  journeys @join__enumValue(graph: API_MEDIA) 
  watch @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashPhotoOrientation @join__type(graph: API_MEDIA)  {
  landscape @join__enumValue(graph: API_MEDIA) 
  portrait @join__enumValue(graph: API_MEDIA) 
  squarish @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashOrderBy @join__type(graph: API_MEDIA)  {
  latest @join__enumValue(graph: API_MEDIA) 
  relevant @join__enumValue(graph: API_MEDIA) 
  editorial @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashContentFilter @join__type(graph: API_MEDIA)  {
  low @join__enumValue(graph: API_MEDIA) 
  high @join__enumValue(graph: API_MEDIA) 
}

enum UnsplashColor @join__type(graph: API_MEDIA)  {
  black_and_white @join__enumValue(graph: API_MEDIA) 
  black @join__enumValue(graph: API_MEDIA) 
  white @join__enumValue(graph: API_MEDIA) 
  yellow @join__enumValue(graph: API_MEDIA) 
  orange @join__enumValue(graph: API_MEDIA) 
  red @join__enumValue(graph: API_MEDIA) 
  purple @join__enumValue(graph: API_MEDIA) 
  magenta @join__enumValue(graph: API_MEDIA) 
  green @join__enumValue(graph: API_MEDIA) 
  teal @join__enumValue(graph: API_MEDIA) 
  blue @join__enumValue(graph: API_MEDIA) 
}

enum VideoLabel @join__type(graph: API_MEDIA)  {
  collection @join__enumValue(graph: API_MEDIA) 
  episode @join__enumValue(graph: API_MEDIA) 
  featureFilm @join__enumValue(graph: API_MEDIA) 
  segment @join__enumValue(graph: API_MEDIA) 
  series @join__enumValue(graph: API_MEDIA) 
  shortFilm @join__enumValue(graph: API_MEDIA) 
  trailer @join__enumValue(graph: API_MEDIA) 
  behindTheScenes @join__enumValue(graph: API_MEDIA) 
}

enum VideoRedirectType @join__type(graph: API_MEDIA)  {
  hls @join__enumValue(graph: API_MEDIA) 
  dl @join__enumValue(graph: API_MEDIA) 
  dh @join__enumValue(graph: API_MEDIA) 
  s @join__enumValue(graph: API_MEDIA) 
}

enum VideoVariantDownloadQuality @join__type(graph: API_MEDIA)  {
  distroLow @join__enumValue(graph: API_MEDIA) 
  distroSd @join__enumValue(graph: API_MEDIA) 
  distroHigh @join__enumValue(graph: API_MEDIA) 
  low @join__enumValue(graph: API_MEDIA) 
  sd @join__enumValue(graph: API_MEDIA) 
  high @join__enumValue(graph: API_MEDIA) 
  fhd @join__enumValue(graph: API_MEDIA) 
  qhd @join__enumValue(graph: API_MEDIA) 
  uhd @join__enumValue(graph: API_MEDIA) 
  highest @join__enumValue(graph: API_MEDIA) 
}

input SiteCreateInput @join__type(graph: API_ANALYTICS)  {
  domain: String!
  goals: [String!]
}

input BlockDuplicateIdMap @join__type(graph: API_JOURNEYS_MODERN)  {
  oldId: ID!
  newId: ID!
}

input BlockUpdateActionInput @join__type(graph: API_JOURNEYS_MODERN)  {
  gtmEventName: String
  email: String
  url: String
  target: String
  blockId: String
}

input BlocksFilter @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyIds: [ID!]
  typenames: [String!]
}

input ButtonBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

input ButtonBlockSettingsInput @join__type(graph: API_JOURNEYS_MODERN)  {
  alignment: ButtonAlignment
  color: String
}

input ButtonBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

input CardBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  """
  backgroundColor should be a HEX color value e.g #FFFFFF for white.
  """
  backgroundColor: String
  """
  backdropBlur should be a number representing blur amount in pixels e.g 20.
  """
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  coverBlockId: ID
  backgroundColor: String
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input ChatButtonCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  link: String!
  platform: MessagePlatform!
}

input ChatButtonUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  link: String!
  platform: MessagePlatform!
}

input CustomDomainCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  teamId: String!
  name: String!
  journeyCollectionId: ID
  routeAllTeamJourneys: Boolean
}

input CustomDomainUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyCollectionId: ID
  routeAllTeamJourneys: Boolean
}

input EmailActionInput @join__type(graph: API_JOURNEYS_MODERN)  {
  gtmEventName: String
  email: String!
}

input GridContainerBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  gap: Int
  direction: GridDirection
  justifyContent: GridJustifyContent
  alignItems: GridAlignItems
}

input GridContainerBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  gap: Int
  direction: GridDirection
  justifyContent: GridJustifyContent
  alignItems: GridAlignItems
}

input GridItemBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  xl: Int
  lg: Int
  sm: Int
}

input GridItemBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  xl: Int
  lg: Int
  sm: Int
}

input HostCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  title: String!
  location: String
  src1: String
  src2: String
}

input HostUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  title can be undefined as to not update title, but it cannot be null as to clear the value of title
  """
  title: String
  location: String
  src1: String
  src2: String
}

input IconBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  name: IconName
  color: IconColor
  size: IconSize
}

input ImageBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!
  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input ImageBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  src: String
  alt: String
  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input IntegrationGrowthSpacesCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  accessId: String!
  accessSecret: String!
  teamId: String!
}

input IntegrationGrowthSpacesUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  accessId: String!
  accessSecret: String!
}

input JourneyAiTranslateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyId: ID!
  name: String!
  journeyLanguageName: String!
  textLanguageId: ID!
  textLanguageName: String!
}

input JourneyCollectionCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  teamId: ID!
  title: String
  journeyIds: [ID!]
}

input JourneyCollectionUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  title: String
  journeyIds: [ID!]
}

input JourneyCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  """
  Slug should be unique amongst all journeys (server will throw BAD_USER_INPUT error if not). If not required will use title formatted with kebab-case. If the generated slug is not unique the uuid will be placed at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input JourneyEventsExportLogInput @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyId: ID!
  eventsFilter: [EventType!]!
  dateRangeStart: DateTimeISO
  dateRangeEnd: DateTimeISO
}

input JourneyEventsFilter @join__type(graph: API_JOURNEYS_MODERN)  {
  typenames: [String!]
  periodRangeStart: DateTime
  periodRangeEnd: DateTime
}

input JourneyNotificationUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyId: ID!
  visitorInteractionEmail: Boolean!
}

input JourneyProfileUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

input JourneyTemplateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  template: Boolean
}

input JourneyThemeCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyId: ID!
  headerFont: String
  bodyFont: String
  labelFont: String
}

input JourneyThemeUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  headerFont: String
  bodyFont: String
  labelFont: String
}

input JourneyUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  creatorDescription: String
  creatorImageBlockId: ID
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
  hostId: String
  strategySlug: String
  tagIds: [ID!]
  website: Boolean
  showShareButton: Boolean
  showLikeButton: Boolean
  showDislikeButton: Boolean
  displayTitle: String
  showHosts: Boolean
  showChatButtons: Boolean
  showReactionButtons: Boolean
  showLogo: Boolean
  showMenu: Boolean
  showDisplayTitle: Boolean
  menuButtonIcon: JourneyMenuButtonIcon
  menuStepBlockId: ID
  logoImageBlockId: ID
  socialNodeX: Int
  socialNodeY: Int
}

input JourneyVisitorFilter @join__type(graph: API_JOURNEYS_MODERN)  {
  countryCode: String
  hasIcon: Boolean
  hasChatStarted: Boolean
  hasTextResponse: Boolean
  hideInactive: Boolean
  journeyId: ID!
}

input JourneysEmailPreferenceUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  email: String!
  preference: String!
  value: Boolean!
}

input JourneysFilter @join__type(graph: API_JOURNEYS_MODERN)  {
  featured: Boolean
  template: Boolean
  ids: [ID!]
  tagIds: [ID!]
  languageIds: [ID!]
  limit: Int
  orderByRecent: Boolean
}

input JourneysQueryOptions @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  hostname filters journeys to those that belong to a team with a custom domain matching the hostname.
  """
  hostname: String
  """
  is this being requested from an embed url
  """
  embedded: Boolean
  """
  limit results to journeys in a journey collection (currently only available when using hostname option)
  """
  journeyCollection: Boolean
}

input LinkActionInput @join__type(graph: API_JOURNEYS_MODERN)  {
  gtmEventName: String
  url: String!
  target: String
}

input MutationJourneyLanguageAiDetectInput @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyId: ID!
  name: String!
  journeyLanguageName: String!
  textLanguageId: ID!
  textLanguageName: String!
}

input NavigateToBlockActionInput @join__type(graph: API_JOURNEYS_MODERN)  {
  gtmEventName: String
  blockId: String!
}

input QrCodeCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  teamId: ID!
  journeyId: ID!
}

input QrCodeUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  """
  journey url where the QR code redirects to, will be parsed and stored as ids
  """
  to: String
  color: String
  backgroundColor: String
}

input QrCodesFilter @join__type(graph: API_JOURNEYS_MODERN)  {
  journeyId: ID
  teamId: ID
}

input RadioOptionBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  label: String
}

input RadioQuestionBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

input RadioQuestionBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
}

input SignUpBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

input SpacerBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  spacing: Int
}

input SpacerBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  spacing: Int
}

input StepBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean
  """
  x is used to position the block horizontally in the journey flow diagram on the editor.
  """
  x: Int
  """
  y is used to position the block vertically in the journey flow diagram on the editor.
  """
  y: Int
}

input StepBlockPositionUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID!
  x: Int
  y: Int
}

input StepBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  nextBlockId: ID
  locked: Boolean
  """
  x is used to position the block horizontally in the journey flow diagram on the editor.
  """
  x: Int
  """
  y is used to position the block vertically in the journey flow diagram on the editor.
  """
  y: Int
  """
  Slug should be unique amongst all blocks (server will throw BAD_USER_INPUT error if not). If not required will use the current block id. If the generated slug is not unique the uuid will be placed at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

input TeamCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  title: String!
  publicTitle: String
}

input TeamUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  title: String!
  publicTitle: String
}

input TextResponseBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input TextResponseBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  label: String
  placeholder: String
  required: Boolean
  hint: String
  minRows: Int
  routeId: String
  type: TextResponseType
  integrationId: String
}

input TypographyBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

input TypographyBlockSettingsInput @join__type(graph: API_JOURNEYS_MODERN)  {
  color: String
}

input TypographyBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

input UserInviteCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  email: String!
}

input UserTeamFilterInput @join__type(graph: API_JOURNEYS_MODERN)  {
  role: [UserTeamRole!]
}

input UserTeamInviteCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  email: String!
}

input UserTeamUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  role: UserTeamRole!
}

input VideoBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  videoId: ID
  videoVariantLanguageId: ID
  source: VideoBlockSource
  title: String
  description: String
  image: String
  duration: Int
  objectFit: VideoBlockObjectFit
  startAt: Int
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  fullsize: Boolean
  posterBlockId: ID
}

input VideoBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  parentBlockId: ID
  videoId: ID
  videoVariantLanguageId: ID
  posterBlockId: ID
  title: String
  description: String
  image: String
  duration: Int
  objectFit: VideoBlockObjectFit
  startAt: Int
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  fullsize: Boolean
}

input VideoTriggerBlockCreateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  """
  triggerStart sets the time as to when a video navigates to the next block, this is the number of seconds since the start of the video
  """
  triggerStart: Int
}

input VideoTriggerBlockUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  triggerStart: Int
}

input VisitorUpdateForCurrentUserInput @join__type(graph: API_JOURNEYS_MODERN)  {
  countryCode: String
  email: String
  name: String
  referrer: String
}

input VisitorUpdateInput @join__type(graph: API_JOURNEYS_MODERN)  {
  countryCode: String
  email: String
  name: String
  notes: String
  phone: String
  referrer: String
}

input LanguagesFilter @join__type(graph: API_LANGUAGES)  {
  ids: [ID!]
  bcp47: [String!]
  iso3: [String!]
}

input MutationAudioPreviewCreateInput @join__type(graph: API_LANGUAGES)  {
  languageId: ID!
  value: String!
  duration: Int!
  size: Int!
  bitrate: Int!
  codec: String!
}

input MutationAudioPreviewUpdateInput @join__type(graph: API_LANGUAGES)  {
  languageId: ID!
  value: String
  duration: Int
  size: Int
  bitrate: Int
  codec: String
}

input CloudflareR2CreateInput @join__type(graph: API_MEDIA)  {
  id: String
  """
  the size of the file that is being uploaded
  """
  contentLength: Int!
  """
  the type of file that is being uploaded. e.g. image or video/mp4
  """
  contentType: String!
  """
  the name of the file that is being uploaded
  """
  fileName: String!
  """
  the original name of the file before any renaming
  """
  originalFilename: String
  """
  the id of the Video object this file relates to in the database
  """
  videoId: String!
}

input ImageInput @join__type(graph: API_MEDIA)  {
  aspectRatio: ImageAspectRatio
  videoId: ID
}

input MutationBibleCitationCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  osisId: String!
  videoId: ID!
  bibleBookId: ID!
  chapterStart: Int!
  chapterEnd: Int
  verseStart: Int
  verseEnd: Int
  order: Int!
}

input MutationBibleCitationUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  osisId: String
  bibleBookId: ID
  chapterStart: Int
  chapterEnd: Int
  verseStart: Int
  verseEnd: Int
  order: Int
}

input MutationShortLinkCreateInput @join__type(graph: API_MEDIA)  {
  """
  the unique identifier for the short link (will generate if not given)
  """
  id: String
  """
  short link path not including the leading slash (defaults to a random 11 character string that is URL friendly)
  """
  pathname: String
  """
  the fully qualified domain name (FQDN) to redirect the short link service should redirect the user to
  """
  to: String!
  """
  the fully qualified domain name (FQDN) to redirect the short link service should redirect the user to
  """
  hostname: String!
  """
  the service that created this short link
  """
  service: Service!
  """
  brightcove video ID for video redirects
  """
  brightcoveId: String
  """
  type of video redirect (hls, dl, dh, s)
  """
  redirectType: RedirectType
}

input MutationShortLinkDomainCreateInput @join__type(graph: API_MEDIA)  {
  """
  the hostname including subdomain, domain, and TLD, but excluding port
  """
  hostname: String!
  """
  the services that are enabled for this domain, if empty then this domain can be used by all services
  """
  services: [Service!]
}

input MutationShortLinkDomainUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  """
  the services that are enabled for this domain, if empty then this domain can be used by all services
  """
  services: [Service!]!
}

input MutationShortLinkUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  """
  the fully qualified domain name (FQDN) to redirect the short link service should redirect the user to
  """
  to: String!
  """
  brightcove video ID for video redirects
  """
  brightcoveId: String
  """
  type of video redirect (hls, dl, dh, s)
  """
  redirectType: RedirectType
}

input MutationVideoOriginCreateInput @join__type(graph: API_MEDIA)  {
  name: String!
  description: String
}

input MutationVideoOriginUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  name: String
  description: String
}

input TranscodeVideoInput @join__type(graph: API_MEDIA)  {
  r2AssetId: String!
  resolution: String!
  videoBitrate: String
  outputFilename: String!
  outputPath: String!
}

input VideoCreateInput @join__type(graph: API_MEDIA)  {
  id: String!
  label: VideoLabel!
  primaryLanguageId: String!
  published: Boolean!
  slug: String!
  noIndex: Boolean!
  childIds: [String!]!
  originId: String!
}

input VideoEditionCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  name: String!
  videoId: String!
}

input VideoEditionUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  name: String
}

input VideoStudyQuestionCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  videoId: String!
  value: String!
  primary: Boolean!
  languageId: String!
  crowdInId: String
  """
  index from 1
  """
  order: Int!
}

input VideoStudyQuestionUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String
  primary: Boolean
  crowdInId: String
  """
  index from 1
  """
  order: Int
}

input VideoSubtitleCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  vttAssetId: ID
  srtAssetId: ID
  videoId: String!
  edition: String!
  vttSrc: String
  srtSrc: String
  primary: Boolean!
  languageId: String!
  vttVersion: Int
  srtVersion: Int
}

input VideoSubtitleUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  edition: String!
  vttSrc: String
  vttAssetId: ID
  vttVersion: Int
  srtSrc: String
  srtAssetId: ID
  srtVersion: Int
  primary: Boolean
  languageId: String
}

input VideoTranslationCreateInput @join__type(graph: API_MEDIA)  {
  id: ID
  videoId: String!
  value: String!
  primary: Boolean!
  languageId: String!
}

input VideoTranslationUpdateInput @join__type(graph: API_MEDIA)  {
  id: ID!
  value: String
  primary: Boolean
  languageId: String
}

input VideoUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  label: VideoLabel
  primaryLanguageId: String
  published: Boolean
  slug: String
  noIndex: Boolean
  childIds: [String!]
  keywordIds: [String!]
  restrictDownloadPlatforms: [Platform!]
  restrictViewPlatforms: [Platform!]
}

input VideoVariantCreateInput @join__type(graph: API_MEDIA)  {
  id: String!
  assetId: String
  videoId: String!
  edition: String!
  hls: String
  dash: String
  share: String
  duration: Int
  lengthInMilliseconds: Int
  languageId: String!
  slug: String!
  downloadable: Boolean!
  published: Boolean = true
  muxVideoId: String
  brightcoveId: String
  version: Int
}

input VideoVariantDownloadCreateInput @join__type(graph: API_MEDIA)  {
  id: String
  assetId: String
  videoVariantId: String!
  quality: VideoVariantDownloadQuality!
  size: Float
  height: Int
  width: Int
  bitrate: Int
  url: String!
  version: Int
}

input VideoVariantDownloadUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  assetId: String
  videoVariantId: String
  quality: VideoVariantDownloadQuality
  size: Float
  height: Int
  width: Int
  bitrate: Int
  url: String
  version: Int
}

input VideoVariantFilter @join__type(graph: API_MEDIA)  {
  onlyPublished: Boolean = true
}

input VideoVariantUpdateInput @join__type(graph: API_MEDIA)  {
  id: String!
  assetId: String
  videoId: String
  edition: String
  hls: String
  dash: String
  share: String
  duration: Int
  lengthInMilliseconds: Int
  languageId: String
  slug: String
  downloadable: Boolean
  published: Boolean
  muxVideoId: String
  brightcoveId: String
  version: Int
}

input VideosFilter @join__type(graph: API_MEDIA)  {
  availableVariantLanguageIds: [ID!]
  title: String
  labels: [VideoLabel!]
  ids: [ID!]
  subtitleLanguageIds: [ID!]
  published: Boolean
  locked: Boolean
}

input CreateVerificationRequestInput @join__type(graph: API_USERS)  {
  redirect: String
}

input MeInput @join__type(graph: API_USERS)  {
  redirect: String
}
    