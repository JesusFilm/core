extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.6", import: ["@extends", "@external", "@key", "@shareable"])

interface Action {
  parentBlockId: ID
  gtmEventName: String
}

interface Block
  @key(fields: "id")
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

input BlockDuplicateIdMap {
  oldId: ID!
  newId: ID!
}

input BlockUpdateActionInput {
  gtmEventName: String
  email: String
  url: String
  target: String
  blockId: String
}

input BlocksFilter {
  journeyIds: [ID!]
  typenames: [String!]
}

enum ButtonAlignment {
  left
  center
  right
  justify
}

type ButtonBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  label: String! @shareable
  variant: ButtonVariant @shareable
  color: ButtonColor @shareable
  size: ButtonSize @shareable
  startIconId: ID @shareable
  endIconId: ID @shareable
  submitEnabled: Boolean @shareable
  settings: ButtonBlockSettings @shareable
}

input ButtonBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

type ButtonBlockSettings {
  alignment: ButtonAlignment @shareable
  color: String @shareable
}

input ButtonBlockSettingsInput {
  alignment: ButtonAlignment
  color: String
}

input ButtonBlockUpdateInput {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

enum ButtonColor {
  primary
  secondary
  error
  inherit
}

enum ButtonSize {
  small
  medium
  large
}

enum ButtonVariant {
  text
  contained
  outlined
}

type CardBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String @shareable

  """
  backdropBlur should be a number representing blur amount in pixels e.g 20.
  """
  backdropBlur: Int @shareable

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID @shareable

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean! @shareable

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode @shareable

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName @shareable
}

input CardBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String

  """
  backdropBlur should be a number representing blur amount in pixels e.g 20.
  """
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput {
  parentBlockId: ID
  coverBlockId: ID
  backgroundColor: String
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type EmailAction implements Action {
  parentBlockId: ID
  gtmEventName: String
  email: String
}

input EmailActionInput {
  gtmEventName: String
  email: String!
}

type Event {
  id: ID
  journeyId: String
  createdAt: DateTime
  label: String
  value: String
  action: String
  actionValue: String
  messagePlatform: String
  email: String
  blockId: String
  position: Float
  source: String
  progress: Int
  typename: String
  visitorId: String
  journey: Journey
  visitor: Visitor
}

enum EventType {
  ButtonClickEvent
  ChatOpenEvent
  JourneyViewEvent
  RadioQuestionSubmissionEvent
  SignUpSubmissionEvent
  StepViewEvent
  StepNextEvent
  StepPreviousEvent
  TextResponseSubmissionEvent
  VideoStartEvent
  VideoPlayEvent
  VideoPauseEvent
  VideoCompleteEvent
  VideoExpandEvent
  VideoCollapseEvent
  VideoProgressEvent
}

enum GridAlignItems {
  baseline
  flexStart
  flexEnd
  center
}

type GridContainerBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  gap: Int! @shareable
  direction: GridDirection! @shareable
  justifyContent: GridJustifyContent! @shareable
  alignItems: GridAlignItems! @shareable
}

input GridContainerBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  gap: Int
  direction: GridDirection
  justifyContent: GridJustifyContent
  alignItems: GridAlignItems
}

input GridContainerBlockUpdateInput {
  parentBlockId: ID
  gap: Int
  direction: GridDirection
  justifyContent: GridJustifyContent
  alignItems: GridAlignItems
}

enum GridDirection {
  columnReverse
  column
  row
  rowReverse
}

type GridItemBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  xl: Int! @shareable
  lg: Int! @shareable
  sm: Int! @shareable
}

input GridItemBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  xl: Int
  lg: Int
  sm: Int
}

input GridItemBlockUpdateInput {
  parentBlockId: ID
  xl: Int
  lg: Int
  sm: Int
}

enum GridJustifyContent {
  flexStart
  flexEnd
  center
}

type IconBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  name: IconName @shareable
  color: IconColor @shareable
  size: IconSize @shareable
}

input IconBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput {
  name: IconName
  color: IconColor
  size: IconSize
}

enum IconColor {
  primary
  secondary
  action
  error
  disabled
  inherit
}

enum IconName {
  PlayArrowRounded
  TranslateRounded
  CheckCircleRounded
  RadioButtonUncheckedRounded
  FormatQuoteRounded
  LockOpenRounded
  ArrowForwardRounded
  ArrowBackRounded
  ChatBubbleOutlineRounded
  LiveTvRounded
  MenuBookRounded
  ChevronRightRounded
  ChevronLeftRounded
  BeenhereRounded
  SendRounded
  SubscriptionsRounded
  ContactSupportRounded
  Launch
  MailOutline
}

enum IconSize {
  sm
  md
  lg
  xl
  inherit
}

enum IdType {
  databaseId
  slug
}

type ImageBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  src: String @shareable
  alt: String! @shareable
  width: Int! @shareable
  height: Int! @shareable

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
    
  """
  blurhash: String! @shareable
  focalTop: Int @shareable
  focalLeft: Int @shareable
  scale: Int @shareable
}

input ImageBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input ImageBlockUpdateInput {
  parentBlockId: ID
  src: String
  alt: String

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  scale: Int
  focalTop: Int
  focalLeft: Int
}

type Journey
  @key(fields: "id")
{
  id: ID! @shareable

  """private title for creators"""
  title: String! @shareable
  description: String @shareable
  slug: String! @shareable
  createdAt: DateTime! @shareable
  updatedAt: DateTime! @shareable
  status: JourneyStatus! @shareable
  languageId: String! @shareable
  language: Language! @shareable
  blocks: [Block!] @shareable
}

input JourneyAiTranslateInput {
  journeyId: ID!
  name: String!
  journeyLanguageName: String!
  textLanguageId: ID!
  textLanguageName: String!
}

type JourneyAiTranslateProgress {
  """Translation progress as a percentage (0-100)"""
  progress: Float

  """Current translation step message"""
  message: String

  """The journey being translated (only present when complete)"""
  journey: Journey
}

"""A collection of journeys associated with a team"""
type JourneyCollection {
  id: ID
  title: String
  team: Team
  journeys: [Journey!]
}

input JourneyCollectionCreateInput {
  id: ID
  teamId: ID!
  title: String
  journeyIds: [ID!]
}

input JourneyCollectionUpdateInput {
  title: String
  journeyIds: [ID!]
}

input JourneyCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  title: String!
  languageId: String!
  themeMode: ThemeMode
  themeName: ThemeName
  description: String

  """
  Slug should be unique amongst all journeys (server will throw BAD_USER_INPUT error if not). If not required will use title formatted with kebab-case. If the generated slug is not unique the uuid will be placed at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

type JourneyEvent {
  id: ID
  journeyId: ID
  createdAt: DateTime
  label: String
  value: String
  action: String
  actionValue: String
  messagePlatform: String
  email: String
  blockId: String
  position: Float
  source: String
  progress: Int
  typename: String
  visitorId: String
  journeySlug: String
  visitorName: String
  visitorEmail: String
  visitorPhone: String
}

type JourneyEventsExportLog {
  id: ID!
  createdAt: DateTimeISO!
  userId: ID!
  journeyId: ID!
  eventsFilter: [String!]!
  dateRangeStart: DateTimeISO
  dateRangeEnd: DateTimeISO
}

input JourneyEventsExportLogInput {
  journeyId: ID!
  eventsFilter: [EventType!]!
  dateRangeStart: DateTimeISO
  dateRangeEnd: DateTimeISO
}

input JourneyEventsFilter {
  typenames: [String!]
  periodRangeStart: DateTime
  periodRangeEnd: DateTime
}

enum JourneyMenuButtonIcon {
  menu1
  equals
  home3
  home4
  more
  ellipsis
  grid1
  chevronDown
}

type JourneyNotification {
  id: ID
  userId: ID
  journeyId: ID
  userTeamId: ID
  userJourneyId: ID
  visitorInteractionEmail: Boolean
  journey: Journey
  userTeam: UserTeam
  userJourney: UserJourney
}

input JourneyNotificationUpdateInput {
  journeyId: ID!
  visitorInteractionEmail: Boolean!
}

type JourneyProfile
  @key(fields: "id")
{
  id: ID
  userId: ID
  acceptedTermsAt: DateTime
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

input JourneyProfileUpdateInput {
  lastActiveTeamId: String
  journeyFlowBackButtonClicked: Boolean
  plausibleJourneyFlowViewed: Boolean
  plausibleDashboardViewed: Boolean
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

input JourneyTemplateInput {
  template: Boolean
}

type JourneyTheme {
  id: ID
  journeyId: ID
  userId: ID
  headerFont: String
  bodyFont: String
  labelFont: String
  createdAt: DateTime
  updatedAt: DateTime
  journey: Journey
}

input JourneyThemeCreateInput {
  journeyId: ID!
  headerFont: String
  bodyFont: String
  labelFont: String
}

input JourneyThemeUpdateInput {
  headerFont: String
  bodyFont: String
  labelFont: String
}

input JourneyUpdateInput {
  title: String
  languageId: String
  themeMode: ThemeMode
  themeName: ThemeName
  description: String
  creatorDescription: String
  creatorImageBlockId: ID
  primaryImageBlockId: ID
  slug: String
  seoTitle: String
  seoDescription: String
  hostId: String
  strategySlug: String
  tagIds: [ID!]
  website: Boolean
  showShareButton: Boolean
  showLikeButton: Boolean
  showDislikeButton: Boolean
  displayTitle: String
  showHosts: Boolean
  showChatButtons: Boolean
  showReactionButtons: Boolean
  showLogo: Boolean
  showMenu: Boolean
  showDisplayTitle: Boolean
  menuButtonIcon: JourneyMenuButtonIcon
  menuStepBlockId: ID
  logoImageBlockId: ID
  socialNodeX: Int
  socialNodeY: Int
}

type JourneyVisitor {
  id: ID
  journeyId: String
  visitorId: String
  createdAt: DateTime
  duration: Int
  activityCount: Int
  updatedAt: DateTime
  journey: Journey
  visitor: Visitor
}

input JourneyVisitorFilter {
  countryCode: String
  hasIcon: Boolean
  hasChatStarted: Boolean
  hasTextResponse: Boolean
  hideInactive: Boolean
  journeyId: ID!
}

enum JourneyVisitorSort {
  date
  duration
  activity
}

type JourneysEmailPreference {
  email: String
  unsubscribeAll: Boolean
  accountNotifications: Boolean
}

input JourneysEmailPreferenceUpdateInput {
  email: String!
  preference: String!
  value: Boolean!
}

input JourneysFilter {
  featured: Boolean
  template: Boolean
  ids: [ID!]
  tagIds: [ID!]
  languageIds: [ID!]
  limit: Int
  orderByRecent: Boolean
}

input JourneysQueryOptions {
  """
  hostname filters journeys to those that belong to a team with a custom domain matching the hostname.
  """
  hostname: String

  """is this being requested from an embed url"""
  embedded: Boolean

  """
  limit results to journeys in a journey collection (currently only available when using hostname option)
  """
  journeyCollection: Boolean
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Language
  @key(fields: "id")
  @extends
{
  id: ID! @external
}

type LinkAction implements Action {
  parentBlockId: ID
  gtmEventName: String
  url: String
  target: String
}

input LinkActionInput {
  gtmEventName: String
  url: String!
  target: String
}

union MediaVideo = MuxVideo | Video | YouTube

type Mutation {
  """blockDelete returns the updated sibling blocks on successful delete"""
  blockDelete(
    id: ID!

    """drop this parameter after merging teams"""
    journeyId: ID

    """drop this parameter after merging teams"""
    parentBlockId: ID
  ): [Block!]!

  """
  blockDuplicate returns the updated block, its children and sibling blocks on successful duplicate
  """
  blockDuplicate(
    id: ID!

    """
    parentOrder defines the position to add the duplicated block. Negative values defines the position from the end of the array. Positions greater than the length of the array or null parentOrder will add duplicate at end of the array.
    """
    parentOrder: Int

    """
    idMap is used to set custom ids for the duplicated block and its descendants.
    """
    idMap: [BlockDuplicateIdMap!]

    """drop this parameter after merging teams"""
    journeyId: ID

    """
    x is used to position a step block block horizontally in the journey flow diagram on the editor.
    """
    x: Int

    """
    y is used to position a step block block vertically in the journey flow diagram on the editor.
    """
    y: Int
  ): [Block!]!
  blockOrderUpdate(
    id: ID!
    parentOrder: Int!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): [Block!]!

  """blockRestore is used for redo/undo"""
  blockRestore(id: ID!): [Block!]!
  blockDeleteAction(id: ID!, journeyId: ID): Block!
  blockUpdateAction(id: ID!, input: BlockUpdateActionInput!): Action!
  blockUpdateNavigateToBlockAction(id: ID!, input: NavigateToBlockActionInput!, journeyId: ID): NavigateToBlockAction!
  blockUpdateLinkAction(id: ID!, input: LinkActionInput!, journeyId: ID): LinkAction!
  blockUpdateEmailAction(id: ID!, input: EmailActionInput!, journeyId: ID): EmailAction!
  buttonBlockCreate(input: ButtonBlockCreateInput!): ButtonBlock!
  buttonBlockUpdate(
    id: ID!
    input: ButtonBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ButtonBlock!
  cardBlockCreate(input: CardBlockCreateInput!): CardBlock!
  cardBlockUpdate(
    id: ID!
    input: CardBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): CardBlock!
  gridContainerBlockCreate(input: GridContainerBlockCreateInput!): GridContainerBlock!
  gridContainerBlockUpdate(
    id: ID!
    input: GridContainerBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): GridContainerBlock!
  gridItemBlockCreate(input: GridItemBlockCreateInput!): GridItemBlock!
  gridItemBlockUpdate(
    id: ID!
    input: GridItemBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): GridItemBlock!
  iconBlockCreate(input: IconBlockCreateInput!): IconBlock!
  iconBlockUpdate(
    id: ID!
    input: IconBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): IconBlock!
  imageBlockCreate(input: ImageBlockCreateInput!): ImageBlock!
  imageBlockUpdate(
    id: ID!
    input: ImageBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): ImageBlock!
  radioQuestionBlockCreate(input: RadioQuestionBlockCreateInput!): RadioQuestionBlock!
  radioQuestionBlockUpdate(
    id: ID!
    input: RadioQuestionBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): RadioQuestionBlock!
  radioOptionBlockCreate(input: RadioOptionBlockCreateInput!): RadioOptionBlock!
  radioOptionBlockUpdate(
    id: ID!
    input: RadioOptionBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): RadioOptionBlock!
  signUpBlockCreate(input: SignUpBlockCreateInput!): SignUpBlock!
  signUpBlockUpdate(
    id: ID!
    input: SignUpBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): SignUpBlock!
  spacerBlockCreate(input: SpacerBlockCreateInput!): SpacerBlock!
  spacerBlockUpdate(
    id: ID!
    input: SpacerBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): SpacerBlock!
  stepBlockCreate(input: StepBlockCreateInput!): StepBlock!
  stepBlockUpdate(
    id: ID!
    input: StepBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): StepBlock!
  stepBlockPositionUpdate(input: [StepBlockPositionUpdateInput!]!): [StepBlock!]!
  textResponseBlockCreate(input: TextResponseBlockCreateInput!): TextResponseBlock!
  textResponseBlockUpdate(
    id: ID!
    input: TextResponseBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TextResponseBlock!
  videoTriggerBlockCreate(input: VideoTriggerBlockCreateInput!): VideoTriggerBlock!
  videoTriggerBlockUpdate(
    id: ID!
    input: VideoTriggerBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): VideoTriggerBlock!
  videoBlockCreate(input: VideoBlockCreateInput!): VideoBlock!
  videoBlockUpdate(
    id: ID!
    input: VideoBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): VideoBlock!
  typographyBlockCreate(input: TypographyBlockCreateInput!): TypographyBlock!
  typographyBlockUpdate(
    id: ID!
    input: TypographyBlockUpdateInput!

    """drop this parameter after merging teams"""
    journeyId: ID
  ): TypographyBlock!
  journeyCreate(input: JourneyCreateInput!, teamId: ID!): Journey!
  journeyUpdate(id: ID!, input: JourneyUpdateInput!): Journey!
  journeyPublish(id: ID!): Journey!
  journeyFeature(id: ID!, feature: Boolean!): Journey!
  journeysArchive(ids: [ID!]!): [Journey!]!
  journeysDelete(ids: [ID!]!): [Journey!]!
  journeysTrash(ids: [ID!]!): [Journey!]!
  journeysRestore(ids: [ID!]!): [Journey!]!
  journeyTemplate(id: ID!, input: JourneyTemplateInput!): Journey!
  journeySimpleUpdate(id: ID!, journey: Json!): Json
  journeyAiTranslateCreate(input: JourneyAiTranslateInput!): Journey!
  journeyCollectionCreate(input: JourneyCollectionCreateInput!): JourneyCollection!
  journeyCollectionUpdate(id: ID!, input: JourneyCollectionUpdateInput!): JourneyCollection!
  journeyCollectionDelete(id: ID!): JourneyCollection!
  createJourneyEventsExportLog(input: JourneyEventsExportLogInput!): JourneyEventsExportLog!
  journeyProfileCreate: JourneyProfile!
  journeyProfileUpdate(input: JourneyProfileUpdateInput!): JourneyProfile!
  journeyThemeCreate(input: JourneyThemeCreateInput!): JourneyTheme!
  journeyThemeUpdate(id: ID!, input: JourneyThemeUpdateInput!): JourneyTheme!
  journeyThemeDelete(id: ID!): JourneyTheme!
  updateJourneysEmailPreference(input: JourneysEmailPreferenceUpdateInput!): JourneysEmailPreference
  journeyNotificationUpdate(input: JourneyNotificationUpdateInput!): JourneyNotification!
  journeyLanguageAiDetect(input: MutationJourneyLanguageAiDetectInput!): Boolean!
  teamCreate(input: TeamCreateInput!): Team
  teamUpdate(id: ID!, input: TeamUpdateInput!): Team
  userJourneyRequest(journeyId: ID!): UserJourney
  userJourneyApprove(id: ID!): UserJourney
  userJourneyPromote(id: ID!): UserJourney
  userJourneyRemove(id: ID!): UserJourney
  userJourneyRemoveAll(id: ID!): [UserJourney!]
  userJourneyOpen(id: ID!): UserJourney
  userTeamUpdate(id: ID!, input: UserTeamUpdateInput!): UserTeam
  userTeamDelete(id: ID!): UserTeam
  userTeamInviteCreate(teamId: ID!, input: UserTeamInviteCreateInput!): UserTeamInvite
  userTeamInviteRemove(id: ID!): UserTeamInvite
  userTeamInviteAcceptAll: [UserTeamInvite!]
  userInviteCreate(journeyId: ID!, input: UserInviteCreateInput!): UserInvite
  userInviteRemove(id: ID!, journeyId: ID!): UserInvite
  userInviteAcceptAll: [UserInvite!]
}

input MutationJourneyLanguageAiDetectInput {
  journeyId: ID!
  name: String!
  journeyLanguageName: String!
  textLanguageId: ID!
  textLanguageName: String!
}

type MuxVideo
  @key(fields: "id primaryLanguageId")
  @extends
{
  id: ID! @external
  primaryLanguageId: ID @external
  source: VideoBlockSource! @shareable
}

type NavigateToBlockAction implements Action {
  parentBlockId: ID
  gtmEventName: String
  blockId: String
}

input NavigateToBlockActionInput {
  gtmEventName: String
  blockId: String!
}

type PageInfo
  @shareable
{
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  blocks(where: BlocksFilter): [Block!]!
  block(id: ID!): Block
  journey(id: ID!, idType: IdType, options: JourneysQueryOptions): Journey
  journeys(where: JourneysFilter, options: JourneysQueryOptions): [Journey!]!
  adminJourney(id: ID!, idType: IdType): Journey!
  adminJourneys(status: [JourneyStatus!], template: Boolean, teamId: ID, useLastActiveTeamId: Boolean): [Journey!]!
  journeySimpleGet(id: ID!): Json
  journeyCollection(id: ID!): JourneyCollection!
  journeyCollections(teamId: ID!): [JourneyCollection!]!
  getJourneyProfile: JourneyProfile
  journeyTheme(journeyId: ID!): JourneyTheme
  journeyEventsConnection(journeyId: ID!, filter: JourneyEventsFilter, before: String, after: String, first: Int, last: Int): QueryJourneyEventsConnection
  journeyEventsCount(journeyId: ID!, filter: JourneyEventsFilter): Int!
  journeysEmailPreference(email: String!): JourneysEmailPreference
  teams: [Team!]
  team(id: ID!): Team
  userTeams(teamId: ID!, where: UserTeamFilterInput): [UserTeam!]
  userTeam(id: ID!): UserTeam
  userTeamInvites(teamId: ID!): [UserTeamInvite!]
  userInvites(journeyId: ID!): [UserInvite!]
  getUserRole: UserRole
  journeyVisitorsConnection(filter: JourneyVisitorFilter!, sort: JourneyVisitorSort, before: String, after: String, first: Int, last: Int): QueryJourneyVisitorsConnection
  journeyVisitorCount(filter: JourneyVisitorFilter!): Int
}

type QueryJourneyEventsConnection {
  pageInfo: PageInfo!
  edges: [QueryJourneyEventsConnectionEdge]
}

type QueryJourneyEventsConnectionEdge {
  node: Event
  cursor: String!
}

type QueryJourneyVisitorsConnection {
  pageInfo: PageInfo!
  edges: [QueryJourneyVisitorsConnectionEdge]
}

type QueryJourneyVisitorsConnectionEdge {
  node: JourneyVisitor
  cursor: String!
}

type RadioOptionBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  label: String! @shareable
}

input RadioOptionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput {
  parentBlockId: ID
  label: String
}

type RadioQuestionBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
}

input RadioQuestionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

input RadioQuestionBlockUpdateInput {
  parentBlockId: ID
}

enum Role {
  publisher
}

type SignUpBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  submitIconId: ID @shareable
  submitLabel: String @shareable
}

input SignUpBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput {
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

type SpacerBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  spacing: Int @shareable
}

input SpacerBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  spacing: Int
}

input SpacerBlockUpdateInput {
  spacing: Int
}

type StepBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean! @shareable

  """
  nextBlockId contains the preferred block to navigate to, users will have to
  manually set the next block they want to card to navigate to
  """
  nextBlockId: ID @shareable

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int @shareable

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int @shareable

  """
  Slug should be unique amongst all blocks
  (server will throw BAD_USER_INPUT error if not)
  If not required will use the current block id
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String @shareable
}

input StepBlockCreateInput {
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on the editor.
  """
  y: Int
}

input StepBlockPositionUpdateInput {
  id: ID!
  x: Int
  y: Int
}

input StepBlockUpdateInput {
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on the editor.
  """
  y: Int

  """
  Slug should be unique amongst all blocks (server will throw BAD_USER_INPUT error if not). If not required will use the current block id. If the generated slug is not unique the uuid will be placed at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

type Subscription {
  journeyAiTranslateCreateSubscription(input: JourneyAiTranslateInput!): JourneyAiTranslateProgress!
}

type Team {
  id: ID
  title: String
  publicTitle: String
  createdAt: DateTime
  updatedAt: DateTime
  userTeams: [UserTeam!]
}

input TeamCreateInput {
  title: String!
  publicTitle: String
}

input TeamUpdateInput {
  title: String!
  publicTitle: String
}

type TextResponseBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  label: String! @shareable
  placeholder: String @shareable
  required: Boolean @shareable
  hint: String @shareable
  minRows: Int @shareable
  type: TextResponseType @shareable
  routeId: String @shareable
  integrationId: String @shareable
}

input TextResponseBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input TextResponseBlockUpdateInput {
  parentBlockId: ID
  label: String
  placeholder: String
  required: Boolean
  hint: String
  minRows: Int
  routeId: String
  type: TextResponseType
  integrationId: String
}

enum TextResponseType {
  freeForm
  name
  email
  phone
}

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

enum TypographyAlign {
  left
  center
  right
}

type TypographyBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable
  content: String! @shareable
  variant: TypographyVariant @shareable
  color: TypographyColor @shareable
  align: TypographyAlign @shareable
  settings: TypographyBlockSettings @shareable
}

input TypographyBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

type TypographyBlockSettings {
  """Color of the typography"""
  color: String @shareable
}

input TypographyBlockSettingsInput {
  color: String
}

input TypographyBlockUpdateInput {
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

enum TypographyColor {
  primary
  secondary
  error
}

enum TypographyVariant {
  h1
  h2
  h3
  h4
  h5
  h6
  subtitle1
  subtitle2
  body1
  body2
  caption
  overline
}

type UserInvite {
  id: ID
  journeyId: ID
  senderId: ID
  email: String
  acceptedAt: DateTime
  removedAt: DateTime
  updatedAt: DateTime
  journey: Journey
}

input UserInviteCreateInput {
  email: String!
}

type UserJourney {
  id: ID
  userId: ID
  journeyId: ID
  role: UserJourneyRole
  openedAt: DateTime
  journey: Journey
}

enum UserJourneyRole {
  inviteRequested
  editor
  owner
}

type UserRole {
  id: ID
  userId: ID
  roles: [Role!]
}

type UserTeam {
  id: ID
  teamId: ID
  userId: ID
  role: UserTeamRole
  createdAt: DateTime
  updatedAt: DateTime
  team: Team
}

input UserTeamFilterInput {
  role: [UserTeamRole!]
}

type UserTeamInvite {
  id: ID
  teamId: ID
  email: String
  senderId: ID
  receipientId: ID
  acceptedAt: DateTime
  removedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  team: Team
}

input UserTeamInviteCreateInput {
  email: String!
}

enum UserTeamRole {
  manager
  member
}

input UserTeamUpdateInput {
  role: UserTeamRole!
}

type Video
  @key(fields: "id primaryLanguageId")
  @extends
{
  id: ID! @external
  primaryLanguageId: ID! @external
  source: VideoBlockSource! @shareable
}

type VideoBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """startAt dictates at which point of time the video should start playing"""
  startAt: Int @shareable

  """endAt dictates at which point of time the video should end"""
  endAt: Int @shareable
  muted: Boolean @shareable
  autoplay: Boolean @shareable

  """
  posterBlockId is present if a child block should be used as a poster.
  This child block should not be rendered normally, instead it should be used
  as the video poster. PosterBlock should be of type ImageBlock.
  """
  posterBlockId: ID @shareable
  fullsize: Boolean @shareable

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoId: ID @shareable

  """
  internal source videos: videoId and videoVariantLanguageId both need to be set
  to select a video.
  For other sources only videoId needs to be set.
  """
  videoVariantLanguageId: ID @shareable

  """
  internal source: videoId, videoVariantLanguageId, and video present
  youTube source: videoId, title, description, and duration present
  """
  source: VideoBlockSource! @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field.
  For other sources this is automatically populated.
  """
  title: String @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  description: String @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  image: String @shareable

  """
  internal source videos: this field is not populated and instead only present
  in the video field
  For other sources this is automatically populated.
  """
  duration: Int @shareable
  objectFit: VideoBlockObjectFit @shareable
  mediaVideo: MediaVideo @shareable
}

input VideoBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  videoId: ID
  videoVariantLanguageId: ID
  source: VideoBlockSource
  title: String
  description: String
  image: String
  duration: Int
  objectFit: VideoBlockObjectFit
  startAt: Int
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  fullsize: Boolean
  posterBlockId: ID
}

enum VideoBlockObjectFit {
  fill
  fit
  zoomed
}

enum VideoBlockSource {
  cloudflare
  internal
  youTube
  mux
}

input VideoBlockUpdateInput {
  parentBlockId: ID
  videoId: ID
  videoVariantLanguageId: ID
  posterBlockId: ID
  title: String
  description: String
  image: String
  duration: Int
  objectFit: VideoBlockObjectFit
  startAt: Int
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  fullsize: Boolean
}

type VideoTriggerBlock implements Block
  @key(fields: "id")
{
  id: ID! @shareable
  journeyId: ID! @shareable
  parentBlockId: ID @shareable
  parentOrder: Int @shareable

  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int! @shareable
}

input VideoTriggerBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!

  """
  triggerStart sets the time as to when a video navigates to the next block, this is the number of seconds since the start of the video
  """
  triggerStart: Int
}

input VideoTriggerBlockUpdateInput {
  triggerStart: Int
}

type Visitor {
  id: ID
  createdAt: DateTime
  countryCode: String
  duration: Int
  email: String
  name: String
  phone: String
  teamId: String
  userId: String
  updatedAt: DateTime
  team: Team
  journeyVisitors: [JourneyVisitor!]
}

type YouTube
  @key(fields: "id primaryLanguageId")
  @extends
{
  id: ID! @external
  primaryLanguageId: ID @external
  source: VideoBlockSource! @shareable
}