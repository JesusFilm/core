extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.6", import: ["@extends", "@external", "@key", "@shareable"])

interface Action {
  parentBlockId: ID!
  gtmEventName: String
  parentBlock: Block!
}

interface Block {
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
}

input BlockDuplicateIdMap {
  oldId: ID!
  newId: ID!
}

input BlocksFilter {
  journeyIds: [ID!]
  typenames: [String!]
}

enum ButtonAlignment {
  left
  center
  right
  justify
}

type ButtonBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String! @shareable
  variant: ButtonVariant @shareable
  color: ButtonColor @shareable
  size: ButtonSize @shareable
  startIconId: ID @shareable
  endIconId: ID @shareable
  submitEnabled: Boolean @shareable
  settings: ButtonBlockSettings @shareable
  action: Action @shareable
}

input ButtonBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

type ButtonBlockSettings
  @shareable
{
  """Alignment of the button"""
  alignment: ButtonAlignment @shareable

  """Color of the button"""
  color: String @shareable
}

input ButtonBlockSettingsInput {
  alignment: ButtonAlignment
  color: String
}

input ButtonBlockUpdateInput {
  parentBlockId: ID
  label: String
  variant: ButtonVariant
  color: ButtonColor
  size: ButtonSize
  startIconId: ID
  endIconId: ID
  submitEnabled: Boolean
  settings: ButtonBlockSettingsInput
}

enum ButtonColor {
  primary
  secondary
  error
  inherit
}

enum ButtonSize {
  small
  medium
  large
}

enum ButtonVariant {
  text
  contained
  outlined
}

type CardBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String @shareable

  """
  backdropBlur should be a number representing blur amount in pixels e.g 20.
  """
  backdropBlur: Int @shareable

  """
  coverBlockId is present if a child block should be used as a cover.
  This child block should not be rendered normally, instead it should be used
  as a background. Blocks are often of type ImageBlock or VideoBlock.
  """
  coverBlockId: ID @shareable

  """
  fullscreen should control how the coverBlock is displayed. When fullscreen
  is set to true the coverBlock Image should be displayed as a blur in the
  background.
  """
  fullscreen: Boolean! @shareable

  """
  themeMode can override journey themeMode. If nothing is set then use
  themeMode from journey
  """
  themeMode: ThemeMode @shareable

  """
  themeName can override journey themeName. If nothing is set then use
  themeName from journey
  """
  themeName: ThemeName @shareable
}

input CardBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID

  """backgroundColor should be a HEX color value e.g #FFFFFF for white."""
  backgroundColor: String

  """
  backdropBlur should be a number representing blur amount in pixels e.g 20.
  """
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

input CardBlockUpdateInput {
  parentBlockId: ID
  coverBlockId: ID
  backgroundColor: String
  backdropBlur: Int
  fullscreen: Boolean
  themeMode: ThemeMode
  themeName: ThemeName
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type EmailAction implements Action
  @shareable
{
  parentBlockId: ID!
  gtmEventName: String
  parentBlock: Block!
  email: String!
  customizable: Boolean
  parentStepId: String
}

input EmailActionInput {
  gtmEventName: String
  email: String!
  customizable: Boolean
  parentStepId: String
}

enum EventType {
  ButtonClickEvent
  ChatOpenEvent
  JourneyViewEvent
  RadioQuestionSubmissionEvent
  SignUpSubmissionEvent
  StepViewEvent
  StepNextEvent
  StepPreviousEvent
  TextResponseSubmissionEvent
  VideoStartEvent
  VideoPlayEvent
  VideoPauseEvent
  VideoCompleteEvent
  VideoExpandEvent
  VideoCollapseEvent
  VideoProgressEvent
}

enum GridAlignItems {
  baseline
  flexStart
  flexEnd
  center
}

type GridContainerBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  gap: Int! @shareable
  direction: GridDirection! @shareable
  justifyContent: GridJustifyContent! @shareable
  alignItems: GridAlignItems! @shareable
}

input GridContainerBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  gap: Int
  direction: GridDirection
  justifyContent: GridJustifyContent
  alignItems: GridAlignItems
}

input GridContainerBlockUpdateInput {
  parentBlockId: ID
  gap: Int
  direction: GridDirection
  justifyContent: GridJustifyContent
  alignItems: GridAlignItems
}

enum GridDirection {
  columnReverse
  column
  row
  rowReverse
}

type GridItemBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  xl: Int! @shareable
  lg: Int! @shareable
  sm: Int! @shareable
}

input GridItemBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  xl: Int
  lg: Int
  sm: Int
}

input GridItemBlockUpdateInput {
  parentBlockId: ID
  xl: Int
  lg: Int
  sm: Int
}

enum GridJustifyContent {
  flexStart
  flexEnd
  center
}

type IconBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  name: IconName @shareable
  color: IconColor @shareable
  size: IconSize @shareable
}

input IconBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID!
  journeyId: ID!
  name: IconName
  color: IconColor
  size: IconSize
}

input IconBlockUpdateInput {
  name: IconName
  color: IconColor
  size: IconSize
}

enum IconColor {
  primary
  secondary
  action
  error
  disabled
  inherit
}

enum IconName {
  PlayArrowRounded
  TranslateRounded
  CheckCircleRounded
  RadioButtonUncheckedRounded
  FormatQuoteRounded
  LockOpenRounded
  ArrowForwardRounded
  ArrowBackRounded
  ChatBubbleOutlineRounded
  LiveTvRounded
  MenuBookRounded
  ChevronRightRounded
  ChevronLeftRounded
  BeenhereRounded
  SendRounded
  SubscriptionsRounded
  ContactSupportRounded
  Launch
  MailOutline
}

enum IconSize {
  sm
  md
  lg
  xl
  inherit
}

type ImageBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  src: String @shareable
  alt: String! @shareable
  width: Int! @shareable
  height: Int! @shareable

  """
  blurhash is a compact representation of a placeholder for an image.
  Find a frontend implementation at https://github.com/woltapp/blurhash
    
  """
  blurhash: String! @shareable
  focalTop: Int @shareable
  focalLeft: Int @shareable
  scale: Int @shareable
}

input ImageBlockCreateInput {
  """
  ID should be unique Response UUID (Provided for optimistic mutation result matching)
  """
  id: ID
  parentBlockId: ID
  journeyId: ID!
  src: String
  alt: String!

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int

  """
  True if the coverBlockId in a parent block should be set to this block's id.
  """
  isCover: Boolean
  scale: Int
  focalTop: Int
  focalLeft: Int
}

input ImageBlockUpdateInput {
  parentBlockId: ID
  src: String
  alt: String

  """
  If blurhash, width, & height are provided, the image will skip blurhash processing. Otherwise these values will be calculated.
  """
  blurhash: String
  width: Int
  height: Int
  isCover: Boolean
  scale: Int
  focalTop: Int
  focalLeft: Int
}

type Journey
  @key(fields: "id")
{
  id: ID! @shareable

  """private title for creators"""
  title: String! @shareable
  description: String @shareable
  slug: String! @shareable
  createdAt: DateTime! @shareable
  updatedAt: DateTime! @shareable
  status: JourneyStatus! @shareable
  languageId: String! @shareable
  language: Language! @shareable
  blocks: [Block!] @shareable
}

input JourneyAiTranslateInput {
  journeyId: ID!
  name: String!
  journeyLanguageName: String!
  textLanguageId: ID!
  textLanguageName: String!
}

type JourneyAiTranslateProgress {
  """Translation progress as a percentage (0-100)"""
  progress: Float

  """Current translation step message"""
  message: String

  """The journey being translated (only present when complete)"""
  journey: Journey
}

type JourneyEventsExportLog {
  id: ID!
  createdAt: DateTimeISO!
  userId: ID!
  journeyId: ID!
  eventsFilter: [String!]!
  dateRangeStart: DateTimeISO
  dateRangeEnd: DateTimeISO
}

input JourneyEventsExportLogInput {
  journeyId: ID!
  eventsFilter: [EventType!]!
  dateRangeStart: DateTimeISO
  dateRangeEnd: DateTimeISO
}

enum JourneyStatus {
  archived
  deleted
  draft
  published
  trashed
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Language
  @key(fields: "id")
  @extends
{
  id: ID! @external
}

type LinkAction implements Action
  @shareable
{
  parentBlockId: ID!
  gtmEventName: String
  parentBlock: Block!
  url: String!
  target: String
  customizable: Boolean
  parentStepId: String
}

input LinkActionInput {
  gtmEventName: String
  url: String!
  target: String
  customizable: Boolean
  parentStepId: String
}

union MediaVideo = MuxVideo | Video | YouTube

enum MessagePlatform {
  facebook
  telegram
  whatsApp
  instagram
  kakaoTalk
  viber
  vk
  snapchat
  skype
  line
  tikTok
  custom
  globe2
  globe3
  messageText1
  messageText2
  send1
  send2
  messageChat2
  messageCircle
  messageNotifyCircle
  messageNotifySquare
  messageSquare
  mail1
  linkExternal
  home3
  home4
  helpCircleContained
  helpSquareContained
  shieldCheck
  menu1
  checkBroken
  checkContained
  settings
}

type Mutation {
  journeySimpleUpdate(id: ID!, journey: Json!): Json
  journeyAiTranslateCreate(input: JourneyAiTranslateInput!): Journey!
  createJourneyEventsExportLog(input: JourneyEventsExportLogInput!): JourneyEventsExportLog!
  journeyLanguageAiDetect(input: MutationJourneyLanguageAiDetectInput!): Boolean!
}

input MutationJourneyLanguageAiDetectInput {
  journeyId: ID!
  name: String!
  journeyLanguageName: String!
  textLanguageId: ID!
  textLanguageName: String!
}

type MuxVideo
  @key(fields: "id primaryLanguageId")
  @extends
{
  id: ID! @external
  primaryLanguageId: ID @external
  source: VideoBlockSource! @shareable
}

type NavigateToBlockAction implements Action
  @shareable
{
  parentBlockId: ID!
  gtmEventName: String
  parentBlock: Block!
  blockId: String!
}

type Query {
  journeySimpleGet(id: ID!): Json
}

type RadioOptionBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String! @shareable

  """
  pollOptionImageBlockId is present if a child block should be used as a poll option image.
        This child block should not be rendered normally, instead it should be used
        as a poll option image. Blocks are often of type ImageBlock
  """
  pollOptionImageBlockId: ID @shareable
}

input RadioOptionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input RadioOptionBlockUpdateInput {
  parentBlockId: ID
  label: String
}

type RadioQuestionBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  gridView: Boolean @shareable
}

input RadioQuestionBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
}

type SignUpBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  submitIconId: ID @shareable
  submitLabel: String @shareable
}

input SignUpBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  submitLabel: String!
}

input SignUpBlockUpdateInput {
  parentBlockId: ID
  submitIconId: ID
  submitLabel: String
}

type SpacerBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  spacing: Int @shareable
}

input SpacerBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  spacing: Int
}

input SpacerBlockUpdateInput {
  spacing: Int
}

type StepBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """
  locked will be set to true if the user should not be able to manually
  advance to the next step.
  """
  locked: Boolean! @shareable

  """
  nextBlockId contains the preferred block to navigate to, users will have to
  manually set the next block they want to card to navigate to
  """
  nextBlockId: ID @shareable

  """
  x is used to position the block horizontally in the journey flow diagram on
  the editor.
  """
  x: Int @shareable

  """
  y is used to position the block vertically in the journey flow diagram on
  the editor.
  """
  y: Int @shareable

  """
  Slug should be unique amongst all blocks
  (server will throw BAD_USER_INPUT error if not)
  If not required will use the current block id
  If the generated slug is not unique the uuid will be placed
  at the end of the slug guaranteeing uniqueness
  """
  slug: String @shareable
}

input StepBlockCreateInput {
  id: ID
  journeyId: ID!
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on the editor.
  """
  y: Int
}

input StepBlockPositionUpdateInput {
  id: ID!
  x: Int
  y: Int
}

input StepBlockUpdateInput {
  nextBlockId: ID
  locked: Boolean

  """
  x is used to position the block horizontally in the journey flow diagram on the editor.
  """
  x: Int

  """
  y is used to position the block vertically in the journey flow diagram on the editor.
  """
  y: Int

  """
  Slug should be unique amongst all blocks (server will throw BAD_USER_INPUT error if not). If not required will use the current block id. If the generated slug is not unique the uuid will be placed at the end of the slug guaranteeing uniqueness
  """
  slug: String
}

type Subscription {
  journeyAiTranslateCreateSubscription(input: JourneyAiTranslateInput!): JourneyAiTranslateProgress!
}

type TextResponseBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  label: String! @shareable
  placeholder: String @shareable
  required: Boolean @shareable
  hint: String @shareable
  minRows: Int @shareable
  type: TextResponseType @shareable
  routeId: String @shareable
  integrationId: String @shareable
}

input TextResponseBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  label: String!
}

input TextResponseBlockUpdateInput {
  parentBlockId: ID
  label: String
  placeholder: String
  required: Boolean
  hint: String
  minRows: Int
  routeId: String
  type: TextResponseType
  integrationId: String
}

enum TextResponseType {
  freeForm
  name
  email
  phone
}

enum ThemeMode {
  dark
  light
}

enum ThemeName {
  base
}

enum TypographyAlign {
  left
  center
  right
}

type TypographyBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  content: String! @shareable
  variant: TypographyVariant @shareable
  color: TypographyColor @shareable
  align: TypographyAlign @shareable
  settings: TypographyBlockSettings @shareable
}

input TypographyBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  content: String!
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

type TypographyBlockSettings
  @shareable
{
  """Color of the typography"""
  color: String @shareable
}

input TypographyBlockSettingsInput {
  color: String
}

input TypographyBlockUpdateInput {
  parentBlockId: ID
  content: String
  variant: TypographyVariant
  color: TypographyColor
  align: TypographyAlign
  settings: TypographyBlockSettingsInput
}

enum TypographyColor {
  primary
  secondary
  error
}

enum TypographyVariant {
  h1
  h2
  h3
  h4
  h5
  h6
  subtitle1
  subtitle2
  body1
  body2
  caption
  overline
}

type Video
  @key(fields: "id primaryLanguageId")
  @extends
{
  id: ID! @external
  primaryLanguageId: ID! @external
  source: VideoBlockSource! @shareable
}

type VideoBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int
  autoplay: Boolean! @shareable
  startAt: Int @shareable
  endAt: Int @shareable
  muted: Boolean! @shareable
  videoId: ID @shareable
  videoVariantLanguageId: ID @shareable
  source: VideoBlockSource @shareable
  title: String! @shareable
  description: String! @shareable
  image: String @shareable
  duration: Int @shareable
  objectFit: VideoBlockObjectFit @shareable
  posterBlockId: ID @shareable
  fullsize: Boolean! @shareable
  action: Action
  mediaVideo: MediaVideo @shareable
}

input VideoBlockCreateInput {
  id: ID
  journeyId: ID!
  parentBlockId: ID!
  videoId: ID
  videoVariantLanguageId: ID
  source: VideoBlockSource
  title: String
  description: String
  image: String
  duration: Int
  objectFit: VideoBlockObjectFit
  startAt: Int
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  fullsize: Boolean
  posterBlockId: ID
}

enum VideoBlockObjectFit {
  fill
  fit
  zoomed
}

enum VideoBlockSource {
  cloudflare
  internal
  youTube
  mux
}

input VideoBlockUpdateInput {
  parentBlockId: ID
  videoId: ID
  videoVariantLanguageId: ID
  posterBlockId: ID
  title: String
  description: String
  image: String
  duration: Int
  objectFit: VideoBlockObjectFit
  startAt: Int
  endAt: Int
  muted: Boolean
  autoplay: Boolean
  fullsize: Boolean
}

type VideoTriggerBlock implements Block
  @shareable
{
  id: ID!
  journeyId: ID!
  parentBlockId: ID
  parentOrder: Int

  """
  triggerStart sets the time as to when a video navigates to the next block,
  this is the number of seconds since the start of the video
  """
  triggerStart: Int! @shareable
  action: Action @shareable
}

type YouTube
  @key(fields: "id primaryLanguageId")
  @extends
{
  id: ID! @external
  primaryLanguageId: ID @external
  source: VideoBlockSource! @shareable
}