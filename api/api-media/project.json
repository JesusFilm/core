{
  "name": "api-media",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "api/api-media/src",
  "projectType": "application",
  "tags": [],
  "targets": {
    "build": {
      "executor": "@nx/webpack:webpack",
      "outputs": ["{options.outputPath}"],
      "defaultConfiguration": "development",
      "options": {
        "outputPath": "dist/api/api-media",
        "main": "api/api-media/src/index.ts",
        "tsConfig": "api/api-media/tsconfig.app.json",
        "compiler": "tsc",
        "target": "node",
        "webpackConfig": "api/api-media/webpack.config.js"
      },
      "configurations": {
        "production": {
          "generatePackageJson": true,
          "optimization": true,
          "extractLicenses": true,
          "inspect": false
        }
      }
    },
    "_serve": {
      "executor": "@nx/js:node",
      "options": {
        "buildTarget": "api-media:build",
        "inspect": false
      }
    },
    "serve": {
      "executor": "nx:run-commands",
      "options": {
        "command": "nx _serve api-media | npx pino-pretty --config .pino-prettyrc.js"
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "cache": true,
        "cacheLocation": ".cache/api-media/eslint",
        "cacheStrategy": "content"
      }
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/api/api-media"],
      "options": {
        "jestConfig": "api/api-media/jest.config.ts"
      }
    },
    "generate-graphql": {
      "executor": "nx:run-commands",
      "options": {
        "command": "GENERATE_SCHEMA=true npx ts-node -P api/api-media/tsconfig.app.json -r tsconfig-paths/register api/api-media/src/schema/index.ts"
      }
    },
    "subgraph-check": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npx hive schema:check api/api-media/schema.graphql --registry.accessToken $HIVE_TOKEN --github --service api-media"
      }
    },
    "fetch-secrets": {
      "executor": "nx:run-commands",
      "options": {
        "command": "DOPPLER_TOKEN=$DOPPLER_API_MEDIA_TOKEN doppler secrets download --no-file --format=env-no-quotes --project api-media > api/api-media/.env"
      }
    },
    "prisma-generate": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "npx prisma generate --schema api/api-media/db/schema.prisma"
        ]
      }
    },
    "prisma-migrate": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "bash -c 'npx prisma migrate dev --schema api/api-media/db/schema.prisma --name `date +\"%Y%m%d%H%M%S\"`'"
        ],
        "parallel": false
      },
      "configurations": {
        "production": {
          "commands": [
            "npx prisma migrate deploy --schema api/api-media/db/schema.prisma"
          ]
        }
      }
    },
    "prisma-reset": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npx prisma migrate reset --schema api/api-media/db/schema.prisma --force"
        ]
      }
    },
    "prisma-seed": {
      "executor": "nx:run-commands",
      "options": {
        "commands": ["npm run ts-node api/api-media/db/seed.ts"]
      }
    },
    "prisma-studio": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npx prisma studio --schema api/api-media/db/schema.prisma"
        ]
      }
    },
    "prisma-validate": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npx prisma validate --schema api/api-media/db/schema.prisma"
        ]
      }
    },
    "type-check": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npx tsc -b api/api-media/tsconfig.json"
      }
    },
    "codecov": {
      "executor": "nx:run-commands",
      "options": {
        "command": "codecov -f coverage/api/api-media/cobertura-coverage.xml -F apps.api-media"
      }
    },
    "queue-ingest": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npm run ts-node api/api-media/src/workers/cli.ts big-query"
      }
    },
    "queue-crowdin": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npm run ts-node api/api-media/src/workers/cli.ts crowdin"
      }
    },
    "queue-algolia": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npm run ts-node api/api-media/src/workers/cli.ts algolia"
      }
    },
    "queue-blocklist": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npm run ts-node api/api-media/src/workers/cli.ts blocklist"
      }
    },
    "queue-seed": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npm run ts-node api/api-media/src/workers/cli.ts seed"
      }
    },
    "export-language-slugs": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npm run ts-node api/api-media/src/lib/exportExistingLanguageSlugs.ts",
          "npx prettier api/api-languages/src/__generated__/languageSlugs.ts --write"
        ],
        "parallel": false
      }
    },
    "codegen": {
      "executor": "nx:run-commands",
      "options": {
        "command": "gql.tada generate output --tsconfig api/api-media/tsconfig.json"
      }
    }
  }
}
